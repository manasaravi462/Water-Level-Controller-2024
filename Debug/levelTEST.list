
levelTEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08008968  08008968  00018968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de0  08008de0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008de0  08008de0  00018de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de8  08008de8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dec  08008dec  00018dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008df0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001e8  08008fd8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08008fd8  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecd3  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c0  00000000  00000000  0002ef2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000312f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1f  00000000  00000000  00032140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190ac  00000000  00000000  00032c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110c2  00000000  00000000  0004bd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be45  00000000  00000000  0005cdcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005070  00000000  00000000  000f8c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000fdc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800894c 	.word	0x0800894c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800894c 	.word	0x0800894c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <LcdCreate>:
 * Create new Lcd_HandleTypeDef and initialize the Lcd
 */
Lcd_HandleTypeDef LcdCreate(
Lcd_PortType lcd_port[4], Lcd_PinType lcd_pin[4],
Lcd_PortType rs_port, Lcd_PinType rs_pin,
Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode) {
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b090      	sub	sp, #64	; 0x40
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]

	Lcd_HandleTypeDef lcd = {
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	2228      	movs	r2, #40	; 0x28
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 fc8d 	bl	800588a <memset>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000f78:	863b      	strh	r3, [r7, #48]	; 0x30
 8000f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000f82:	873b      	strh	r3, [r7, #56]	; 0x38
 8000f84:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000f88:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	.lcd_mode = mode, .lcd_en_pin = en_pin, .lcd_en_port = en_port,
			.lcd_rs_pin = rs_pin, .lcd_rs_port = rs_port };

	for (int i = 0; i < 4; i++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f90:	e019      	b.n	8000fc6 <LcdCreate+0x72>
		lcd.lcd_data_port[i] = lcd_port[i];
 8000f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	4413      	add	r3, r2
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	3340      	adds	r3, #64	; 0x40
 8000fa2:	443b      	add	r3, r7
 8000fa4:	f843 2c2c 	str.w	r2, [r3, #-44]
		lcd.lcd_data_pin[i] = lcd_pin[i];
 8000fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	881a      	ldrh	r2, [r3, #0]
 8000fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fb4:	3308      	adds	r3, #8
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	3340      	adds	r3, #64	; 0x40
 8000fba:	443b      	add	r3, r7
 8000fbc:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for (int i = 0; i < 4; i++) {
 8000fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	dde2      	ble.n	8000f92 <LcdCreate+0x3e>
	}

	LcdInit(&lcd);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f810 	bl	8000ff6 <LcdInit>

	return lcd;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	461d      	mov	r5, r3
 8000fda:	f107 0414 	add.w	r4, r7, #20
 8000fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fea:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	3740      	adds	r7, #64	; 0x40
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bdb0      	pop	{r4, r5, r7, pc}

08000ff6 <LcdInit>:

/**
 * Initialize 16x2-lcd without cursor
 */
void LcdInit(Lcd_HandleTypeDef *lcd) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	if (lcd->lcd_mode == LCD_4_BIT_MODE) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10c      	bne.n	8001022 <LcdInit+0x2c>
		LcdWriteCommand(lcd, 0x33);
 8001008:	2133      	movs	r1, #51	; 0x33
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f8b0 	bl	8001170 <LcdWriteCommand>
		LcdWriteCommand(lcd, 0x32);
 8001010:	2132      	movs	r1, #50	; 0x32
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f8ac 	bl	8001170 <LcdWriteCommand>
		LcdWriteCommand(lcd, FUNCTION_SET | OPT_N);			// 4-bit mode
 8001018:	2128      	movs	r1, #40	; 0x28
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f8a8 	bl	8001170 <LcdWriteCommand>
 8001020:	e003      	b.n	800102a <LcdInit+0x34>
	} else
		LcdWriteCommand(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001022:	2138      	movs	r1, #56	; 0x38
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f8a3 	bl	8001170 <LcdWriteCommand>

	LcdWriteCommand(lcd, CLEAR_DISPLAY);						// Clear screen
 800102a:	2101      	movs	r1, #1
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f89f 	bl	8001170 <LcdWriteCommand>
	LcdWriteCommand(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);// Lcd-on, cursor-off, no-blink
 8001032:	210c      	movs	r1, #12
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f89b 	bl	8001170 <LcdWriteCommand>
	LcdWriteCommand(lcd, ENTRY_MODE_SET | OPT_INC);		// Increment cursor
 800103a:	2106      	movs	r1, #6
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f897 	bl	8001170 <LcdWriteCommand>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <LcdInitialize>:

/******* Lcd port and pin define****/

Lcd_HandleTypeDef LcdInitialize(void) {
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b08d      	sub	sp, #52	; 0x34
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
	Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port,
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <LcdInitialize+0x4c>)
 8001056:	f107 0410 	add.w	r4, r7, #16
 800105a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	D7_GPIO_Port };
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = { D4_Pin, D5_Pin, D6_Pin, D7_Pin };
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LcdInitialize+0x50>)
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800106a:	e883 0003 	stmia.w	r3, {r0, r1}
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	return LcdCreate(ports, pins, RSDisplay_GPIO_Port, RSDisplay_Pin,
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f107 0208 	add.w	r2, r7, #8
 8001074:	f107 0110 	add.w	r1, r7, #16
 8001078:	2300      	movs	r3, #0
 800107a:	9303      	str	r3, [sp, #12]
 800107c:	2320      	movs	r3, #32
 800107e:	9302      	str	r3, [sp, #8]
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <LcdInitialize+0x54>)
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2340      	movs	r3, #64	; 0x40
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <LcdInitialize+0x54>)
 800108a:	f7ff ff63 	bl	8000f54 <LcdCreate>
	enableDisplay_GPIO_Port, enableDisplay_Pin, LCD_4_BIT_MODE);
}
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd90      	pop	{r4, r7, pc}
 8001096:	bf00      	nop
 8001098:	08008968 	.word	0x08008968
 800109c:	08008978 	.word	0x08008978
 80010a0:	40020400 	.word	0x40020400

080010a4 <LcdInt>:

/**
 * Write a number on the current position
 */
void LcdInt(Lcd_HandleTypeDef *lcd, int number) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
	char buffer[11] = "";
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	f8c3 2003 	str.w	r2, [r3, #3]
	sprintf(buffer, "%d", number);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	4906      	ldr	r1, [pc, #24]	; (80010e0 <LcdInt+0x3c>)
 80010c6:	4618      	mov	r0, r3
 80010c8:	f004 fb7c 	bl	80057c4 <siprintf>

	LcdString(lcd, buffer);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f806 	bl	80010e4 <LcdString>
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	08008980 	.word	0x08008980

080010e4 <LcdString>:

/**
 * Write a string on the current position
 */
void LcdString(Lcd_HandleTypeDef *lcd, char *string) {
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	73fb      	strb	r3, [r7, #15]
 80010f2:	e00a      	b.n	800110a <LcdString+0x26>
		LcdWriteData(lcd, string[i]);
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f865 	bl	80011ce <LcdWriteData>
	for (uint8_t i = 0; i < strlen(string); i++) {
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	3301      	adds	r3, #1
 8001108:	73fb      	strb	r3, [r7, #15]
 800110a:	7bfc      	ldrb	r4, [r7, #15]
 800110c:	6838      	ldr	r0, [r7, #0]
 800110e:	f7ff f8b7 	bl	8000280 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	429c      	cmp	r4, r3
 8001116:	d3ed      	bcc.n	80010f4 <LcdString+0x10>
	}
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}
	...

08001124 <LcdCursor>:

/**
 * Set the cursor position
 */
void LcdCursor(Lcd_HandleTypeDef *lcd, uint8_t row, uint8_t col) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
 8001130:	4613      	mov	r3, r2
 8001132:	70bb      	strb	r3, [r7, #2]

	LcdWriteCommand(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	4a07      	ldr	r2, [pc, #28]	; (8001154 <LcdCursor+0x30>)
 8001138:	5cd2      	ldrb	r2, [r2, r3]
 800113a:	78bb      	ldrb	r3, [r7, #2]
 800113c:	4413      	add	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	3b80      	subs	r3, #128	; 0x80
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4619      	mov	r1, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f812 	bl	8001170 <LcdWriteCommand>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	08008a20 	.word	0x08008a20

08001158 <LcdClear>:

/**
 * Clear the screen
 */
void LcdClear(Lcd_HandleTypeDef *lcd) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	LcdWriteCommand(lcd, CLEAR_DISPLAY);
 8001160:	2101      	movs	r1, #1
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f804 	bl	8001170 <LcdWriteCommand>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <LcdWriteCommand>:
/************************************** Static function definition **************************************/

/**
 * Write a byte to the command register
 */
void LcdWriteCommand(Lcd_HandleTypeDef *lcd, uint8_t command) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->lcd_rs_port, lcd->lcd_rs_pin, LCD_COMMAND_REG);// Write to command register
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6998      	ldr	r0, [r3, #24]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	8b9b      	ldrh	r3, [r3, #28]
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	f002 f8fc 	bl	8003384 <HAL_GPIO_WritePin>

	if (lcd->lcd_mode == LCD_4_BIT_MODE) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001192:	2b00      	cmp	r3, #0
 8001194:	d111      	bne.n	80011ba <LcdWriteCommand+0x4a>
		LcdWrite(lcd, (command >> 4), LCD_NIB);
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2204      	movs	r2, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f843 	bl	800122c <LcdWrite>
		LcdWrite(lcd, command & 0x0F, LCD_NIB);
 80011a6:	78fb      	ldrb	r3, [r7, #3]
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2204      	movs	r2, #4
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f83a 	bl	800122c <LcdWrite>
	} else {
		LcdWrite(lcd, command, LCD_BYTE);
	}

}
 80011b8:	e005      	b.n	80011c6 <LcdWriteCommand+0x56>
		LcdWrite(lcd, command, LCD_BYTE);
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	2208      	movs	r2, #8
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f833 	bl	800122c <LcdWrite>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <LcdWriteData>:

/**
 * Write a byte to the data register
 */
void LcdWriteData(Lcd_HandleTypeDef *lcd, uint8_t data) {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->lcd_rs_port, lcd->lcd_rs_pin, LCD_DATA_REG);	// Write to data register
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6998      	ldr	r0, [r3, #24]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	8b9b      	ldrh	r3, [r3, #28]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	f002 f8cd 	bl	8003384 <HAL_GPIO_WritePin>

	if (lcd->lcd_mode == LCD_4_BIT_MODE) {
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d111      	bne.n	8001218 <LcdWriteData+0x4a>
		LcdWrite(lcd, data >> 4, LCD_NIB);
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2204      	movs	r2, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f814 	bl	800122c <LcdWrite>
		LcdWrite(lcd, data & 0x0F, LCD_NIB);
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2204      	movs	r2, #4
 800120e:	4619      	mov	r1, r3
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f80b 	bl	800122c <LcdWrite>
	} else {
		LcdWrite(lcd, data, LCD_BYTE);
	}

}
 8001216:	e005      	b.n	8001224 <LcdWriteData+0x56>
		LcdWrite(lcd, data, LCD_BYTE);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	2208      	movs	r2, #8
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f804 	bl	800122c <LcdWrite>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <LcdWrite>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void LcdWrite(Lcd_HandleTypeDef *lcd, uint8_t data, uint8_t len) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
 8001238:	4613      	mov	r3, r2
 800123a:	70bb      	strb	r3, [r7, #2]
	for (uint8_t i = 0; i < len; i++) {
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e016      	b.n	8001270 <LcdWrite+0x44>
		HAL_GPIO_WritePin(lcd->lcd_data_port[i], lcd->lcd_data_pin[i],
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800124a:	7bfa      	ldrb	r2, [r7, #15]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3208      	adds	r2, #8
 8001250:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
				(data >> i) & 0x01);
 8001254:	78fa      	ldrb	r2, [r7, #3]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	fa42 f303 	asr.w	r3, r2, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(lcd->lcd_data_port[i], lcd->lcd_data_pin[i],
 8001264:	461a      	mov	r2, r3
 8001266:	f002 f88d 	bl	8003384 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < len; i++) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	3301      	adds	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	429a      	cmp	r2, r3
 8001276:	d3e4      	bcc.n	8001242 <LcdWrite+0x16>
	}

	HAL_GPIO_WritePin(lcd->lcd_en_port, lcd->lcd_en_pin, 1);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a18      	ldr	r0, [r3, #32]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001280:	2201      	movs	r2, #1
 8001282:	4619      	mov	r1, r3
 8001284:	f002 f87e 	bl	8003384 <HAL_GPIO_WritePin>
	DELAY(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f001 f9fb 	bl	8002684 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->lcd_en_port, lcd->lcd_en_pin, 0); // Data receive on falling edge
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a18      	ldr	r0, [r3, #32]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	f002 f873 	bl	8003384 <HAL_GPIO_WritePin>
}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <DisplayLevel>:
	LcdString(lcd, "      ");
}

/*Display the level in percentage*/

void DisplayLevel(Lcd_HandleTypeDef *lcd, uint8_t level) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
	LcdCursor(lcd, 0, 6);
 80012b4:	2206      	movs	r2, #6
 80012b6:	2100      	movs	r1, #0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff33 	bl	8001124 <LcdCursor>
	LcdInt(lcd, level);
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	4619      	mov	r1, r3
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff feee 	bl	80010a4 <LcdInt>
	if (level >= 100) {
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	2b63      	cmp	r3, #99	; 0x63
 80012cc:	d908      	bls.n	80012e0 <DisplayLevel+0x38>
		LcdCursor(lcd, 0, 9);
 80012ce:	2209      	movs	r2, #9
 80012d0:	2100      	movs	r1, #0
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff26 	bl	8001124 <LcdCursor>
		LcdString(lcd, "%");
 80012d8:	4909      	ldr	r1, [pc, #36]	; (8001300 <DisplayLevel+0x58>)
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ff02 	bl	80010e4 <LcdString>
	}
	if (level <= 99) {
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	2b63      	cmp	r3, #99	; 0x63
 80012e4:	d808      	bhi.n	80012f8 <DisplayLevel+0x50>
		LcdCursor(lcd, 0, 8);
 80012e6:	2208      	movs	r2, #8
 80012e8:	2100      	movs	r1, #0
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff1a 	bl	8001124 <LcdCursor>
		LcdString(lcd, "% ");
 80012f0:	4904      	ldr	r1, [pc, #16]	; (8001304 <DisplayLevel+0x5c>)
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fef6 	bl	80010e4 <LcdString>
	}
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	0800898c 	.word	0x0800898c
 8001304:	08008990 	.word	0x08008990

08001308 <DisplayClearInAuto>:

/*clear the display when it switches between modes*/

void DisplayClearInAuto(Lcd_HandleTypeDef *lcd) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if (clear_state == 1) {
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <DisplayClearInAuto+0x24>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <DisplayClearInAuto+0x1c>
		LcdClear(lcd);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff1d 	bl	8001158 <LcdClear>
		clear_state = 0;
 800131e:	4b03      	ldr	r3, [pc, #12]	; (800132c <DisplayClearInAuto+0x24>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
	}
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000204 	.word	0x20000204

08001330 <DisplayClearInManual>:
void DisplayClearInManual(Lcd_HandleTypeDef *lcd) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	if (clear_state == 0) {
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <DisplayClearInManual+0x24>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d105      	bne.n	800134c <DisplayClearInManual+0x1c>
		LcdClear(lcd);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ff09 	bl	8001158 <LcdClear>
		clear_state = 1;
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <DisplayClearInManual+0x24>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
	}
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000204 	.word	0x20000204

08001358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b098      	sub	sp, #96	; 0x60
 800135c:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135e:	f001 f91f 	bl	80025a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001362:	f000 fa2f 	bl	80017c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f000 fb61 	bl	8001a2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800136a:	f000 fb35 	bl	80019d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800136e:	f000 fa95 	bl	800189c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001372:	f000 fae5 	bl	8001940 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	Lcd_HandleTypeDef LCD_instance = LcdInitialize();
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe67 	bl	800104c <LcdInitialize>
	HAL_ADC_Start(&hadc1);
 800137e:	48a9      	ldr	r0, [pc, #676]	; (8001624 <main+0x2cc>)
 8001380:	f001 f9e8 	bl	8002754 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001384:	48a8      	ldr	r0, [pc, #672]	; (8001628 <main+0x2d0>)
 8001386:	f002 fcff 	bl	8003d88 <HAL_TIM_Base_Start_IT>

	uint8_t thresholdLevel = 20, maximumLevel = 100, intermediateLevel = 60;
 800138a:	2314      	movs	r3, #20
 800138c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001396:	233c      	movs	r3, #60	; 0x3c
 8001398:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		ReadVoltage();
 800139c:	f001 f80e 	bl	80023bc <ReadVoltage>
		CheckOverVoltage();
 80013a0:	f001 f84c 	bl	800243c <CheckOverVoltage>
		sprintf(str, "voltage = %.f v\n", VoltageParameters.voltage);
 80013a4:	4ba1      	ldr	r3, [pc, #644]	; (800162c <main+0x2d4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8d5 	bl	8000558 <__aeabi_f2d>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	499f      	ldr	r1, [pc, #636]	; (8001630 <main+0x2d8>)
 80013b4:	489f      	ldr	r0, [pc, #636]	; (8001634 <main+0x2dc>)
 80013b6:	f004 fa05 	bl	80057c4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 80013ba:	489e      	ldr	r0, [pc, #632]	; (8001634 <main+0x2dc>)
 80013bc:	f7fe ff60 	bl	8000280 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	499b      	ldr	r1, [pc, #620]	; (8001634 <main+0x2dc>)
 80013c8:	489b      	ldr	r0, [pc, #620]	; (8001638 <main+0x2e0>)
 80013ca:	f003 f917 	bl	80045fc <HAL_UART_Transmit>
		ReadModeSwitch();
 80013ce:	f000 fe55 	bl	800207c <ReadModeSwitch>

		if (SystemFlags.modeFlag) {  // modeFlag=1 for manual mode
 80013d2:	4b9a      	ldr	r3, [pc, #616]	; (800163c <main+0x2e4>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d045      	beq.n	8001466 <main+0x10e>

			//******************    Device in manual mode      *********************
			DisplayClearInManual(&LCD_instance);
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ffa7 	bl	8001330 <DisplayClearInManual>
			UIStatus(LCD_instance, 0, 3, "MANUAL MODE", blueLed_GPIO_Port,
 80013e2:	2301      	movs	r3, #1
 80013e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80013e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ea:	930a      	str	r3, [sp, #40]	; 0x28
 80013ec:	4b94      	ldr	r3, [pc, #592]	; (8001640 <main+0x2e8>)
 80013ee:	9309      	str	r3, [sp, #36]	; 0x24
 80013f0:	4b94      	ldr	r3, [pc, #592]	; (8001644 <main+0x2ec>)
 80013f2:	9308      	str	r3, [sp, #32]
 80013f4:	2303      	movs	r3, #3
 80013f6:	9307      	str	r3, [sp, #28]
 80013f8:	2300      	movs	r3, #0
 80013fa:	9306      	str	r3, [sp, #24]
 80013fc:	466d      	mov	r5, sp
 80013fe:	f107 0414 	add.w	r4, r7, #20
 8001402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800140a:	e885 0003 	stmia.w	r5, {r0, r1}
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001412:	f000 fed9 	bl	80021c8 <UIStatus>
			blueLed_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(greenLed_GPIO_Port, greenLed_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141c:	4888      	ldr	r0, [pc, #544]	; (8001640 <main+0x2e8>)
 800141e:	f001 ffb1 	bl	8003384 <HAL_GPIO_WritePin>
			Protection(LCD_instance); // Check the voltage Flags
 8001422:	466d      	mov	r5, sp
 8001424:	f107 0414 	add.w	r4, r7, #20
 8001428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001430:	e885 0003 	stmia.w	r5, {r0, r1}
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001438:	f000 fe34 	bl	80020a4 <Protection>

			// To turn ON / OFF motor in manual mode
			if (HAL_GPIO_ReadPin(manualModeRelayON_GPIO_Port,
 800143c:	2102      	movs	r1, #2
 800143e:	4880      	ldr	r0, [pc, #512]	; (8001640 <main+0x2e8>)
 8001440:	f001 ff88 	bl	8003354 <HAL_GPIO_ReadPin>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <main+0x100>
			manualModeRelayON_Pin)) {
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001450:	487d      	ldr	r0, [pc, #500]	; (8001648 <main+0x2f0>)
 8001452:	f001 ff97 	bl	8003384 <HAL_GPIO_WritePin>
 8001456:	e1a3      	b.n	80017a0 <main+0x448>
			} else {
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145e:	487a      	ldr	r0, [pc, #488]	; (8001648 <main+0x2f0>)
 8001460:	f001 ff90 	bl	8003384 <HAL_GPIO_WritePin>
 8001464:	e19c      	b.n	80017a0 <main+0x448>
		}

		//************************* Device in auto mode  *******************************

		else {
			DisplayClearInAuto(&LCD_instance);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff4d 	bl	8001308 <DisplayClearInAuto>
			// Check if Sump is empty
			if (HAL_GPIO_ReadPin(floatSwitch_GPIO_Port, floatSwitch_Pin)) {
 800146e:	2110      	movs	r1, #16
 8001470:	4873      	ldr	r0, [pc, #460]	; (8001640 <main+0x2e8>)
 8001472:	f001 ff6f 	bl	8003354 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d027      	beq.n	80014cc <main+0x174>
				LcdClear(&LCD_instance);
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fe6a 	bl	8001158 <LcdClear>
				UIStatus(LCD_instance, 0, 3, "EMPTY SUMP", greenLed_GPIO_Port,
 8001484:	2300      	movs	r3, #0
 8001486:	930b      	str	r3, [sp, #44]	; 0x2c
 8001488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800148c:	930a      	str	r3, [sp, #40]	; 0x28
 800148e:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <main+0x2e8>)
 8001490:	9309      	str	r3, [sp, #36]	; 0x24
 8001492:	4b6e      	ldr	r3, [pc, #440]	; (800164c <main+0x2f4>)
 8001494:	9308      	str	r3, [sp, #32]
 8001496:	2303      	movs	r3, #3
 8001498:	9307      	str	r3, [sp, #28]
 800149a:	2300      	movs	r3, #0
 800149c:	9306      	str	r3, [sp, #24]
 800149e:	466d      	mov	r5, sp
 80014a0:	f107 0414 	add.w	r4, r7, #20
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b4:	f000 fe88 	bl	80021c8 <UIStatus>
				greenLed_Pin, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014be:	4862      	ldr	r0, [pc, #392]	; (8001648 <main+0x2f0>)
 80014c0:	f001 ff60 	bl	8003384 <HAL_GPIO_WritePin>
				WaterLevel.sumpFlag = 1;
 80014c4:	4b62      	ldr	r3, [pc, #392]	; (8001650 <main+0x2f8>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	70da      	strb	r2, [r3, #3]
 80014ca:	e169      	b.n	80017a0 <main+0x448>

			} else {
				// Clear display
				if (WaterLevel.sumpFlag) {
 80014cc:	4b60      	ldr	r3, [pc, #384]	; (8001650 <main+0x2f8>)
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <main+0x18a>
					LcdClear(&LCD_instance);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe3e 	bl	8001158 <LcdClear>
					WaterLevel.sumpFlag = 0;
 80014dc:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <main+0x2f8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	70da      	strb	r2, [r3, #3]
				}
				// Measure the water level
				ReadLevel();
 80014e2:	f000 fb5d 	bl	8001ba0 <ReadLevel>
				UIStatus(LCD_instance, 0, 0, "Level", blueLed_GPIO_Port,
 80014e6:	2300      	movs	r3, #0
 80014e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80014ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ee:	930a      	str	r3, [sp, #40]	; 0x28
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <main+0x2e8>)
 80014f2:	9309      	str	r3, [sp, #36]	; 0x24
 80014f4:	4b57      	ldr	r3, [pc, #348]	; (8001654 <main+0x2fc>)
 80014f6:	9308      	str	r3, [sp, #32]
 80014f8:	2300      	movs	r3, #0
 80014fa:	9307      	str	r3, [sp, #28]
 80014fc:	2300      	movs	r3, #0
 80014fe:	9306      	str	r3, [sp, #24]
 8001500:	466d      	mov	r5, sp
 8001502:	f107 0414 	add.w	r4, r7, #20
 8001506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001516:	f000 fe57 	bl	80021c8 <UIStatus>
				blueLed_Pin, GPIO_PIN_RESET);
				// Display the voltage
				LcdCursor(&LCD_instance, 0, 11);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	220b      	movs	r2, #11
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fdff 	bl	8001124 <LcdCursor>
				LcdInt(&LCD_instance, (int) VoltageParameters.voltage);
 8001526:	4b41      	ldr	r3, [pc, #260]	; (800162c <main+0x2d4>)
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	ee17 1a90 	vmov	r1, s15
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fdb4 	bl	80010a4 <LcdInt>

				// to check water level - whether water is in thresholdlevel and to turn on motor
				if (WaterLevel.levelOne == 0 && WaterLevel.levelTwo == 0
 800153c:	4b44      	ldr	r3, [pc, #272]	; (8001650 <main+0x2f8>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	f083 0301 	eor.w	r3, r3, #1
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d03d      	beq.n	80015c6 <main+0x26e>
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <main+0x2f8>)
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	f083 0301 	eor.w	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d036      	beq.n	80015c6 <main+0x26e>
						&& WaterLevel.levelThree == 0) {
 8001558:	4b3d      	ldr	r3, [pc, #244]	; (8001650 <main+0x2f8>)
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	f083 0301 	eor.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d02f      	beq.n	80015c6 <main+0x26e>
					DisplayLevel(&LCD_instance, thresholdLevel); // Display 20%
 8001566:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fe9a 	bl	80012a8 <DisplayLevel>

					if (SystemFlags.overVoltageFlag == 0
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <main+0x2e4>)
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d014      	beq.n	80015ac <main+0x254>
							&& SystemFlags.underVoltageFlag == 0) {
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <main+0x2e4>)
 8001584:	789b      	ldrb	r3, [r3, #2]
 8001586:	f083 0301 	eor.w	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00d      	beq.n	80015ac <main+0x254>
						TurnOnMotor(LCD_instance);
 8001590:	466d      	mov	r5, sp
 8001592:	f107 0414 	add.w	r4, r7, #20
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800159e:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a6:	f000 fe33 	bl	8002210 <TurnOnMotor>
 80015aa:	e00c      	b.n	80015c6 <main+0x26e>
					} else {
						// Turn OFF motor when Voltage Flag is set
						AutoProtection(LCD_instance);
 80015ac:	466d      	mov	r5, sp
 80015ae:	f107 0414 	add.w	r4, r7, #20
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c2:	f000 fe73 	bl	80022ac <AutoProtection>
					}
				}
				//turn on the motor when device is in intermediateLevel(voltage flags is set)
				if (WaterLevel.levelOne == 1 && WaterLevel.levelTwo == 0
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <main+0x2f8>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d067      	beq.n	800169e <main+0x346>
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <main+0x2f8>)
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d060      	beq.n	800169e <main+0x346>
						&& WaterLevel.levelThree == 0) {
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <main+0x2f8>)
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d059      	beq.n	800169e <main+0x346>
					DisplayLevel(&LCD_instance, thresholdLevel); // Display 20%
 80015ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe58 	bl	80012a8 <DisplayLevel>
					if (SystemFlags.overVoltageFlag == 1
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <main+0x2e4>)
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <main+0x2b0>
							|| SystemFlags.underVoltageFlag == 1) {
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <main+0x2e4>)
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d027      	beq.n	8001658 <main+0x300>
						// Turn OFF motor when Voltage Flag is set
						AutoProtection(LCD_instance);
 8001608:	466d      	mov	r5, sp
 800160a:	f107 0414 	add.w	r4, r7, #20
 800160e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001612:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001616:	e885 0003 	stmia.w	r5, {r0, r1}
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800161e:	f000 fe45 	bl	80022ac <AutoProtection>
					if (SystemFlags.overVoltageFlag == 1
 8001622:	e0ba      	b.n	800179a <main+0x442>
 8001624:	20000208 	.word	0x20000208
 8001628:	20000250 	.word	0x20000250
 800162c:	200002e4 	.word	0x200002e4
 8001630:	08008994 	.word	0x08008994
 8001634:	200002f4 	.word	0x200002f4
 8001638:	20000298 	.word	0x20000298
 800163c:	200002e0 	.word	0x200002e0
 8001640:	40020000 	.word	0x40020000
 8001644:	080089a8 	.word	0x080089a8
 8001648:	40020400 	.word	0x40020400
 800164c:	080089b4 	.word	0x080089b4
 8001650:	2000030c 	.word	0x2000030c
 8001654:	080089c0 	.word	0x080089c0
					} else if (VoltageParameters.protectionFlag == 1
 8001658:	4b54      	ldr	r3, [pc, #336]	; (80017ac <main+0x454>)
 800165a:	7b5b      	ldrb	r3, [r3, #13]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 809c 	beq.w	800179a <main+0x442>
							&& SystemFlags.overVoltageFlag == 0
 8001662:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <main+0x458>)
 8001664:	785b      	ldrb	r3, [r3, #1]
 8001666:	f083 0301 	eor.w	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8094 	beq.w	800179a <main+0x442>
							&& SystemFlags.underVoltageFlag == 0) {
 8001672:	4b4f      	ldr	r3, [pc, #316]	; (80017b0 <main+0x458>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	f083 0301 	eor.w	r3, r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 808c 	beq.w	800179a <main+0x442>
						TurnOnMotor(LCD_instance);
 8001682:	466d      	mov	r5, sp
 8001684:	f107 0414 	add.w	r4, r7, #20
 8001688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001690:	e885 0003 	stmia.w	r5, {r0, r1}
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001698:	f000 fdba 	bl	8002210 <TurnOnMotor>
					if (SystemFlags.overVoltageFlag == 1
 800169c:	e07d      	b.n	800179a <main+0x442>
					}
				} else if (WaterLevel.levelOne == 1 && WaterLevel.levelTwo == 1
 800169e:	4b45      	ldr	r3, [pc, #276]	; (80017b4 <main+0x45c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d046      	beq.n	8001734 <main+0x3dc>
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <main+0x45c>)
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d042      	beq.n	8001734 <main+0x3dc>
						&& WaterLevel.levelThree == 0) {
 80016ae:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <main+0x45c>)
 80016b0:	789b      	ldrb	r3, [r3, #2]
 80016b2:	f083 0301 	eor.w	r3, r3, #1
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d03b      	beq.n	8001734 <main+0x3dc>
					DisplayLevel(&LCD_instance, intermediateLevel); // Display 60%
 80016bc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fdef 	bl	80012a8 <DisplayLevel>
					if (SystemFlags.overVoltageFlag
 80016ca:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <main+0x458>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d103      	bne.n	80016da <main+0x382>
							|| SystemFlags.underVoltageFlag) {
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <main+0x458>)
 80016d4:	789b      	ldrb	r3, [r3, #2]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00c      	beq.n	80016f4 <main+0x39c>
						// Turn OFF motor when Voltage Flag is set
						AutoProtection(LCD_instance);
 80016da:	466d      	mov	r5, sp
 80016dc:	f107 0414 	add.w	r4, r7, #20
 80016e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f0:	f000 fddc 	bl	80022ac <AutoProtection>
					}
					if (VoltageParameters.protectionFlag==1 && SystemFlags.overVoltageFlag==0
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <main+0x454>)
 80016f6:	7b5b      	ldrb	r3, [r3, #13]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d050      	beq.n	800179e <main+0x446>
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <main+0x458>)
 80016fe:	785b      	ldrb	r3, [r3, #1]
 8001700:	f083 0301 	eor.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d049      	beq.n	800179e <main+0x446>
							&& SystemFlags.underVoltageFlag==0) {
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <main+0x458>)
 800170c:	789b      	ldrb	r3, [r3, #2]
 800170e:	f083 0301 	eor.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	d042      	beq.n	800179e <main+0x446>
						TurnOnMotor(LCD_instance);
 8001718:	466d      	mov	r5, sp
 800171a:	f107 0414 	add.w	r4, r7, #20
 800171e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001726:	e885 0003 	stmia.w	r5, {r0, r1}
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800172e:	f000 fd6f 	bl	8002210 <TurnOnMotor>
					if (VoltageParameters.protectionFlag==1 && SystemFlags.overVoltageFlag==0
 8001732:	e034      	b.n	800179e <main+0x446>
					}
				}

				// Turn Off Motor when tank is full
				else if (WaterLevel.levelOne & WaterLevel.levelTwo
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <main+0x45c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <main+0x45c>)
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	4013      	ands	r3, r2
						& WaterLevel.levelThree) {
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <main+0x45c>)
 8001742:	7892      	ldrb	r2, [r2, #2]
 8001744:	4013      	ands	r3, r2
				else if (WaterLevel.levelOne & WaterLevel.levelTwo
 8001746:	2b00      	cmp	r3, #0
 8001748:	d02a      	beq.n	80017a0 <main+0x448>
					DisplayLevel(&LCD_instance, maximumLevel); // Display 100%
 800174a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fda8 	bl	80012a8 <DisplayLevel>
					HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin,
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800175e:	4816      	ldr	r0, [pc, #88]	; (80017b8 <main+0x460>)
 8001760:	f001 fe10 	bl	8003384 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET); // turn off relay
					UIStatus(LCD_instance, 1, 0, "MOTOR OFF",
 8001764:	2300      	movs	r3, #0
 8001766:	930b      	str	r3, [sp, #44]	; 0x2c
 8001768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800176c:	930a      	str	r3, [sp, #40]	; 0x28
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <main+0x464>)
 8001770:	9309      	str	r3, [sp, #36]	; 0x24
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <main+0x468>)
 8001774:	9308      	str	r3, [sp, #32]
 8001776:	2300      	movs	r3, #0
 8001778:	9307      	str	r3, [sp, #28]
 800177a:	2301      	movs	r3, #1
 800177c:	9306      	str	r3, [sp, #24]
 800177e:	466d      	mov	r5, sp
 8001780:	f107 0414 	add.w	r4, r7, #20
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001794:	f000 fd18 	bl	80021c8 <UIStatus>
 8001798:	e002      	b.n	80017a0 <main+0x448>
					if (SystemFlags.overVoltageFlag == 1
 800179a:	bf00      	nop
 800179c:	e000      	b.n	80017a0 <main+0x448>
					if (VoltageParameters.protectionFlag==1 && SystemFlags.overVoltageFlag==0
 800179e:	bf00      	nop
					greenLed_GPIO_Port, greenLed_Pin, GPIO_PIN_RESET);
				}
			}
		}
		HAL_GPIO_WritePin(debug_GPIO_Port, debug_Pin, GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2120      	movs	r1, #32
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <main+0x464>)
 80017a6:	f001 fded 	bl	8003384 <HAL_GPIO_WritePin>
		ReadVoltage();
 80017aa:	e5f7      	b.n	800139c <main+0x44>
 80017ac:	200002e4 	.word	0x200002e4
 80017b0:	200002e0 	.word	0x200002e0
 80017b4:	2000030c 	.word	0x2000030c
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020000 	.word	0x40020000
 80017c0:	080089c8 	.word	0x080089c8

080017c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b094      	sub	sp, #80	; 0x50
 80017c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ca:	f107 0320 	add.w	r3, r7, #32
 80017ce:	2230      	movs	r2, #48	; 0x30
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 f859 	bl	800588a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <SystemClock_Config+0xd0>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	4a28      	ldr	r2, [pc, #160]	; (8001894 <SystemClock_Config+0xd0>)
 80017f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f6:	6413      	str	r3, [r2, #64]	; 0x40
 80017f8:	4b26      	ldr	r3, [pc, #152]	; (8001894 <SystemClock_Config+0xd0>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <SystemClock_Config+0xd4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <SystemClock_Config+0xd4>)
 8001812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <SystemClock_Config+0xd4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001824:	2302      	movs	r3, #2
 8001826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001828:	2301      	movs	r3, #1
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800182c:	2310      	movs	r3, #16
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001830:	2302      	movs	r3, #2
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001834:	2300      	movs	r3, #0
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001838:	2310      	movs	r3, #16
 800183a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800183c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001840:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001842:	2304      	movs	r3, #4
 8001844:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001846:	2307      	movs	r3, #7
 8001848:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184a:	f107 0320 	add.w	r3, r7, #32
 800184e:	4618      	mov	r0, r3
 8001850:	f001 fdb2 	bl	80033b8 <HAL_RCC_OscConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800185a:	f000 fa23 	bl	8001ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185e:	230f      	movs	r3, #15
 8001860:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001862:	2302      	movs	r3, #2
 8001864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800186a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800186e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2102      	movs	r1, #2
 800187a:	4618      	mov	r0, r3
 800187c:	f002 f814 	bl	80038a8 <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001886:	f000 fa0d 	bl	8001ca4 <Error_Handler>
  }
}
 800188a:	bf00      	nop
 800188c:	3750      	adds	r7, #80	; 0x50
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40007000 	.word	0x40007000

0800189c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_ADC1_Init+0x98>)
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <MX_ADC1_Init+0x9c>)
 80018b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <MX_ADC1_Init+0x98>)
 80018b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <MX_ADC1_Init+0x98>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <MX_ADC1_Init+0x98>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_ADC1_Init+0x98>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <MX_ADC1_Init+0x98>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <MX_ADC1_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_ADC1_Init+0x98>)
 80018de:	4a17      	ldr	r2, [pc, #92]	; (800193c <MX_ADC1_Init+0xa0>)
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <MX_ADC1_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_ADC1_Init+0x98>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_ADC1_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_ADC1_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_ADC1_Init+0x98>)
 80018fe:	f000 fee5 	bl	80026cc <HAL_ADC_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001908:	f000 f9cc 	bl	8001ca4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800190c:	2308      	movs	r3, #8
 800190e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_ADC1_Init+0x98>)
 800191e:	f001 f865 	bl	80029ec <HAL_ADC_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001928:	f000 f9bc 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000208 	.word	0x20000208
 8001938:	40012000 	.word	0x40012000
 800193c:	0f000001 	.word	0x0f000001

08001940 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	463b      	mov	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_TIM2_Init+0x94>)
 800195e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001962:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <MX_TIM2_Init+0x94>)
 8001966:	2253      	movs	r2, #83	; 0x53
 8001968:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <MX_TIM2_Init+0x94>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <MX_TIM2_Init+0x94>)
 8001972:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001976:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <MX_TIM2_Init+0x94>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <MX_TIM2_Init+0x94>)
 8001980:	2280      	movs	r2, #128	; 0x80
 8001982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001984:	4813      	ldr	r0, [pc, #76]	; (80019d4 <MX_TIM2_Init+0x94>)
 8001986:	f002 f9af 	bl	8003ce8 <HAL_TIM_Base_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001990:	f000 f988 	bl	8001ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	; (80019d4 <MX_TIM2_Init+0x94>)
 80019a2:	f002 fb43 	bl	800402c <HAL_TIM_ConfigClockSource>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019ac:	f000 f97a 	bl	8001ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019b8:	463b      	mov	r3, r7
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_TIM2_Init+0x94>)
 80019be:	f002 fd4b 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019c8:	f000 f96c 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000250 	.word	0x20000250

080019d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019de:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_USART2_UART_Init+0x50>)
 80019e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 80019fe:	220c      	movs	r2, #12
 8001a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART2_UART_Init+0x4c>)
 8001a10:	f002 fda4 	bl	800455c <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a1a:	f000 f943 	bl	8001ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000298 	.word	0x20000298
 8001a28:	40004400 	.word	0x40004400

08001a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
 8001a40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b52      	ldr	r3, [pc, #328]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a51      	ldr	r2, [pc, #324]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b4b      	ldr	r3, [pc, #300]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a4a      	ldr	r2, [pc, #296]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b44      	ldr	r3, [pc, #272]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a43      	ldr	r2, [pc, #268]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a3c      	ldr	r2, [pc, #240]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <MX_GPIO_Init+0x164>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, debug_Pin|greenLed_Pin|redLed_Pin|blueLed_Pin, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8001ab8:	4836      	ldr	r0, [pc, #216]	; (8001b94 <MX_GPIO_Init+0x168>)
 8001aba:	f001 fc63 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, relay_Pin|buzzer_Pin|D4_Pin|enableDisplay_Pin
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f243 31f0 	movw	r1, #13296	; 0x33f0
 8001ac4:	4834      	ldr	r0, [pc, #208]	; (8001b98 <MX_GPIO_Init+0x16c>)
 8001ac6:	f001 fc5d 	bl	8003384 <HAL_GPIO_WritePin>
                          |RSDisplay_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	482e      	ldr	r0, [pc, #184]	; (8001b9c <MX_GPIO_Init+0x170>)
 8001ae2:	f001 fab3 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : manualModeRelayON_Pin level1_Pin level2_Pin level3_Pin */
  GPIO_InitStruct.Pin = manualModeRelayON_Pin|level1_Pin|level2_Pin|level3_Pin;
 8001ae6:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	4826      	ldr	r0, [pc, #152]	; (8001b94 <MX_GPIO_Init+0x168>)
 8001afc:	f001 faa6 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : floatSwitch_Pin */
  GPIO_InitStruct.Pin = floatSwitch_Pin;
 8001b00:	2310      	movs	r3, #16
 8001b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(floatSwitch_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4820      	ldr	r0, [pc, #128]	; (8001b94 <MX_GPIO_Init+0x168>)
 8001b14:	f001 fa9a 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : debug_Pin */
  GPIO_InitStruct.Pin = debug_Pin;
 8001b18:	2320      	movs	r3, #32
 8001b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(debug_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4819      	ldr	r0, [pc, #100]	; (8001b94 <MX_GPIO_Init+0x168>)
 8001b30:	f001 fa8c 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : manual_Pin */
  GPIO_InitStruct.Pin = manual_Pin;
 8001b34:	2302      	movs	r3, #2
 8001b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(manual_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4814      	ldr	r0, [pc, #80]	; (8001b98 <MX_GPIO_Init+0x16c>)
 8001b48:	f001 fa80 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : relay_Pin buzzer_Pin D4_Pin enableDisplay_Pin
                           RSDisplay_Pin D7_Pin D6_Pin D5_Pin */
  GPIO_InitStruct.Pin = relay_Pin|buzzer_Pin|D4_Pin|enableDisplay_Pin
 8001b4c:	f243 33f0 	movw	r3, #13296	; 0x33f0
 8001b50:	617b      	str	r3, [r7, #20]
                          |RSDisplay_Pin|D7_Pin|D6_Pin|D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <MX_GPIO_Init+0x16c>)
 8001b66:	f001 fa71 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : greenLed_Pin redLed_Pin blueLed_Pin */
  GPIO_InitStruct.Pin = greenLed_Pin|redLed_Pin|blueLed_Pin;
 8001b6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	4804      	ldr	r0, [pc, #16]	; (8001b94 <MX_GPIO_Init+0x168>)
 8001b84:	f001 fa62 	bl	800304c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800

08001ba0 <ReadLevel>:

/* USER CODE BEGIN 4 */
void ReadLevel(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	WaterLevel.levelOne = HAL_GPIO_ReadPin(level1_GPIO_Port, level1_Pin);
 8001ba4:	2140      	movs	r1, #64	; 0x40
 8001ba6:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <ReadLevel+0x54>)
 8001ba8:	f001 fbd4 	bl	8003354 <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bf14      	ite	ne
 8001bb2:	2301      	movne	r3, #1
 8001bb4:	2300      	moveq	r3, #0
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <ReadLevel+0x58>)
 8001bba:	701a      	strb	r2, [r3, #0]
	WaterLevel.levelTwo = HAL_GPIO_ReadPin(level2_GPIO_Port, level2_Pin);
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <ReadLevel+0x54>)
 8001bc0:	f001 fbc8 	bl	8003354 <HAL_GPIO_ReadPin>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <ReadLevel+0x58>)
 8001bd2:	705a      	strb	r2, [r3, #1]
	WaterLevel.levelThree = HAL_GPIO_ReadPin(level3_GPIO_Port, level3_Pin);
 8001bd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd8:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <ReadLevel+0x54>)
 8001bda:	f001 fbbb 	bl	8003354 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <ReadLevel+0x58>)
 8001bec:	709a      	strb	r2, [r3, #2]
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40020000 	.word	0x40020000
 8001bf8:	2000030c 	.word	0x2000030c
 8001bfc:	00000000 	.word	0x00000000

08001c00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	int ADC_Val = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c10:	4821      	ldr	r0, [pc, #132]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c12:	f000 fe53 	bl	80028bc <HAL_ADC_PollForConversion>
	ADC_Val = HAL_ADC_GetValue(&hadc1) - SC__offsetValue;
 8001c16:	4820      	ldr	r0, [pc, #128]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001c18:	f000 fedb 	bl	80029d2 <HAL_ADC_GetValue>
 8001c1c:	ee07 0a90 	vmov	s15, r0
 8001c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c24:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001c9c <HAL_TIM_PeriodElapsedCallback+0x9c>
 8001c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c30:	ee17 3a90 	vmov	r3, s15
 8001c34:	60fb      	str	r3, [r7, #12]
	VoltageParameters.sum += pow(ADC_Val, 2);
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7fe fc7c 	bl	8000534 <__aeabi_i2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001c90 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001c44:	ec43 2b10 	vmov	d0, r2, r3
 8001c48:	f005 ff1a 	bl	8007a80 <pow>
 8001c4c:	ec55 4b10 	vmov	r4, r5, d0
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc7f 	bl	8000558 <__aeabi_f2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4629      	mov	r1, r5
 8001c62:	f7fe fb1b 	bl	800029c <__adddf3>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ffa3 	bl	8000bb8 <__aeabi_d2f>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c76:	6093      	str	r3, [r2, #8]
	VoltageParameters.samplesTaken++;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c7a:	889b      	ldrh	r3, [r3, #4]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c82:	809a      	strh	r2, [r3, #4]
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8c:	f3af 8000 	nop.w
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40000000 	.word	0x40000000
 8001c98:	20000208 	.word	0x20000208
 8001c9c:	44fbe000 	.word	0x44fbe000
 8001ca0:	200002e4 	.word	0x200002e4

08001ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
}
 8001caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cac:	e7fe      	b.n	8001cac <Error_Handler+0x8>
	...

08001cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a08      	ldr	r2, [pc, #32]	; (8001cfc <HAL_MspInit+0x4c>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cee:	2007      	movs	r0, #7
 8001cf0:	f001 f96a 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <HAL_ADC_MspInit+0x7c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d127      	bne.n	8001d72 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_ADC_MspInit+0x80>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = voltageRead_Pin;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(voltageRead_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <HAL_ADC_MspInit+0x84>)
 8001d6e:	f001 f96d 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3728      	adds	r7, #40	; 0x28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40012000 	.word	0x40012000
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020400 	.word	0x40020400

08001d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d98:	d115      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_TIM_Base_MspInit+0x48>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <HAL_TIM_Base_MspInit+0x48>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_TIM_Base_MspInit+0x48>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	201c      	movs	r0, #28
 8001dbc:	f001 f90f 	bl	8002fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dc0:	201c      	movs	r0, #28
 8001dc2:	f001 f928 	bl	8003016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_UART_MspInit+0x84>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d12b      	bne.n	8001e4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <HAL_UART_MspInit+0x88>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e2e:	230c      	movs	r3, #12
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e3e:	2307      	movs	r3, #7
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <HAL_UART_MspInit+0x8c>)
 8001e4a:	f001 f8ff 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	; 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40004400 	.word	0x40004400
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler+0x4>

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb0:	f000 fbc8 	bl	8002644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <TIM2_IRQHandler+0x10>)
 8001ebe:	f001 ffc5 	bl	8003e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000250 	.word	0x20000250

08001ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_kill>:

int _kill(int pid, int sig)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ee6:	f003 fd23 	bl	8005930 <__errno>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2216      	movs	r2, #22
 8001eee:	601a      	str	r2, [r3, #0]
  return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_exit>:

void _exit (int status)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffe7 	bl	8001edc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f0e:	e7fe      	b.n	8001f0e <_exit+0x12>

08001f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e00a      	b.n	8001f38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f22:	f3af 8000 	nop.w
 8001f26:	4601      	mov	r1, r0
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbf0      	blt.n	8001f22 <_read+0x12>
  }

  return len;
 8001f40:	687b      	ldr	r3, [r7, #4]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e009      	b.n	8001f70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	60ba      	str	r2, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf1      	blt.n	8001f5c <_write+0x12>
  }
  return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_close>:

int _close(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001faa:	605a      	str	r2, [r3, #4]
  return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_isatty>:

int _isatty(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f003 fc88 	bl	8005930 <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20018000 	.word	0x20018000
 800204c:	00000400 	.word	0x00000400
 8002050:	20000308 	.word	0x20000308
 8002054:	20000468 	.word	0x20000468

08002058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <SystemInit+0x20>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <SystemInit+0x20>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <ReadModeSwitch>:
extern SParameter VoltageParameters;

/********************************Private functions*****************************************/
struct SLevel WaterLevel = { };

void ReadModeSwitch() {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	SystemFlags.modeFlag = HAL_GPIO_ReadPin(manual_GPIO_Port, manual_Pin);
 8002080:	2102      	movs	r1, #2
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <ReadModeSwitch+0x20>)
 8002084:	f001 f966 	bl	8003354 <HAL_GPIO_ReadPin>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <ReadModeSwitch+0x24>)
 8002096:	701a      	strb	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40020400 	.word	0x40020400
 80020a0:	200002e0 	.word	0x200002e0

080020a4 <Protection>:

void Protection(Lcd_HandleTypeDef lcd) {
 80020a4:	b084      	sub	sp, #16
 80020a6:	b5b0      	push	{r4, r5, r7, lr}
 80020a8:	b08c      	sub	sp, #48	; 0x30
 80020aa:	af0c      	add	r7, sp, #48	; 0x30
 80020ac:	f107 0410 	add.w	r4, r7, #16
 80020b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (SystemFlags.overVoltageFlag || SystemFlags.underVoltageFlag) {
 80020b4:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <Protection+0x110>)
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <Protection+0x20>
 80020bc:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <Protection+0x110>)
 80020be:	789b      	ldrb	r3, [r3, #2]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d05d      	beq.n	8002180 <Protection+0xdc>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ca:	483b      	ldr	r0, [pc, #236]	; (80021b8 <Protection+0x114>)
 80020cc:	f001 f95a 	bl	8003384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020d6:	4838      	ldr	r0, [pc, #224]	; (80021b8 <Protection+0x114>)
 80020d8:	f001 f954 	bl	8003384 <HAL_GPIO_WritePin>
		if (SystemFlags.overVoltageFlag) {
 80020dc:	4b35      	ldr	r3, [pc, #212]	; (80021b4 <Protection+0x110>)
 80020de:	785b      	ldrb	r3, [r3, #1]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <Protection+0x78>
			UIStatus(lcd, 1, 0, "Warning!! V_high", redLed_GPIO_Port,
 80020e4:	2301      	movs	r3, #1
 80020e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80020e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ec:	930a      	str	r3, [sp, #40]	; 0x28
 80020ee:	4b33      	ldr	r3, [pc, #204]	; (80021bc <Protection+0x118>)
 80020f0:	9309      	str	r3, [sp, #36]	; 0x24
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <Protection+0x11c>)
 80020f4:	9308      	str	r3, [sp, #32]
 80020f6:	2300      	movs	r3, #0
 80020f8:	9307      	str	r3, [sp, #28]
 80020fa:	2301      	movs	r3, #1
 80020fc:	9306      	str	r3, [sp, #24]
 80020fe:	466d      	mov	r5, sp
 8002100:	f107 0420 	add.w	r4, r7, #32
 8002104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002108:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002116:	f000 f857 	bl	80021c8 <UIStatus>
 800211a:	e01e      	b.n	800215a <Protection+0xb6>
					redLed_Pin, GPIO_PIN_SET);
		} else if (SystemFlags.underVoltageFlag) {
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <Protection+0x110>)
 800211e:	789b      	ldrb	r3, [r3, #2]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01a      	beq.n	800215a <Protection+0xb6>
			UIStatus(lcd, 1, 0, "Warning!! V_Low", redLed_GPIO_Port, redLed_Pin,
 8002124:	2301      	movs	r3, #1
 8002126:	930b      	str	r3, [sp, #44]	; 0x2c
 8002128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800212c:	930a      	str	r3, [sp, #40]	; 0x28
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <Protection+0x118>)
 8002130:	9309      	str	r3, [sp, #36]	; 0x24
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <Protection+0x120>)
 8002134:	9308      	str	r3, [sp, #32]
 8002136:	2300      	movs	r3, #0
 8002138:	9307      	str	r3, [sp, #28]
 800213a:	2301      	movs	r3, #1
 800213c:	9306      	str	r3, [sp, #24]
 800213e:	466d      	mov	r5, sp
 8002140:	f107 0420 	add.w	r4, r7, #32
 8002144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002148:	e894 0003 	ldmia.w	r4, {r0, r1}
 800214c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002156:	f000 f837 	bl	80021c8 <UIStatus>
					GPIO_PIN_SET);
		}
		ReadVoltage();
 800215a:	f000 f92f 	bl	80023bc <ReadVoltage>
		if (SystemFlags.overVoltageFlag || SystemFlags.underVoltageFlag) {
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <Protection+0x110>)
 8002160:	785b      	ldrb	r3, [r3, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <Protection+0xca>
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <Protection+0x110>)
 8002168:	789b      	ldrb	r3, [r3, #2]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <Protection+0xd2>
			HAL_Delay(10000);
 800216e:	f242 7010 	movw	r0, #10000	; 0x2710
 8002172:	f000 fa87 	bl	8002684 <HAL_Delay>
		}
		LcdClear(&lcd);
 8002176:	f107 0010 	add.w	r0, r7, #16
 800217a:	f7fe ffed 	bl	8001158 <LcdClear>
 800217e:	e012      	b.n	80021a6 <Protection+0x102>

	} else {
		HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002186:	480c      	ldr	r0, [pc, #48]	; (80021b8 <Protection+0x114>)
 8002188:	f001 f8fc 	bl	8003384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002192:	4809      	ldr	r0, [pc, #36]	; (80021b8 <Protection+0x114>)
 8002194:	f001 f8f6 	bl	8003384 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(redLed_GPIO_Port, redLed_Pin, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219e:	4807      	ldr	r0, [pc, #28]	; (80021bc <Protection+0x118>)
 80021a0:	f001 f8f0 	bl	8003384 <HAL_GPIO_WritePin>
	}
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80021ae:	b004      	add	sp, #16
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	200002e0 	.word	0x200002e0
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40020000 	.word	0x40020000
 80021c0:	080089d4 	.word	0x080089d4
 80021c4:	080089e8 	.word	0x080089e8

080021c8 <UIStatus>:

void UIStatus(Lcd_HandleTypeDef lcd, uint8_t row, uint8_t column, char *message,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, _Bool pinState) {
 80021c8:	b084      	sub	sp, #16
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	f107 0c08 	add.w	ip, r7, #8
 80021d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, pinState);
 80021d6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80021da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021de:	4619      	mov	r1, r3
 80021e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80021e2:	f001 f8cf 	bl	8003384 <HAL_GPIO_WritePin>
	LcdCursor(&lcd, row, column);
 80021e6:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80021ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80021ee:	4619      	mov	r1, r3
 80021f0:	f107 0008 	add.w	r0, r7, #8
 80021f4:	f7fe ff96 	bl	8001124 <LcdCursor>
	LcdString(&lcd, message);
 80021f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80021fa:	f107 0008 	add.w	r0, r7, #8
 80021fe:	f7fe ff71 	bl	80010e4 <LcdString>
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800220a:	b004      	add	sp, #16
 800220c:	4770      	bx	lr
	...

08002210 <TurnOnMotor>:
		char *message, uint8_t value) {
	LcdCursor(&lcd, row, column);
	LcdString(&lcd, message);
	LcdInt(&lcd, value);
}
void TurnOnMotor(Lcd_HandleTypeDef lcd) {
 8002210:	b084      	sub	sp, #16
 8002212:	b5b0      	push	{r4, r5, r7, lr}
 8002214:	b08c      	sub	sp, #48	; 0x30
 8002216:	af0c      	add	r7, sp, #48	; 0x30
 8002218:	f107 0410 	add.w	r4, r7, #16
 800221c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (VoltageParameters.protectionFlag) {
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <TurnOnMotor+0x8c>)
 8002222:	7b5b      	ldrb	r3, [r3, #13]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <TurnOnMotor+0x26>
		LcdClear(&lcd);
 8002228:	f107 0010 	add.w	r0, r7, #16
 800222c:	f7fe ff94 	bl	8001158 <LcdClear>
		VoltageParameters.protectionFlag = 0;
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <TurnOnMotor+0x8c>)
 8002232:	2200      	movs	r2, #0
 8002234:	735a      	strb	r2, [r3, #13]
	}
	UIStatus(lcd, 1, 0, "MOTOR ON ", redLed_GPIO_Port, redLed_Pin,
 8002236:	2300      	movs	r3, #0
 8002238:	930b      	str	r3, [sp, #44]	; 0x2c
 800223a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800223e:	930a      	str	r3, [sp, #40]	; 0x28
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <TurnOnMotor+0x90>)
 8002242:	9309      	str	r3, [sp, #36]	; 0x24
 8002244:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <TurnOnMotor+0x94>)
 8002246:	9308      	str	r3, [sp, #32]
 8002248:	2300      	movs	r3, #0
 800224a:	9307      	str	r3, [sp, #28]
 800224c:	2301      	movs	r3, #1
 800224e:	9306      	str	r3, [sp, #24]
 8002250:	466d      	mov	r5, sp
 8002252:	f107 0420 	add.w	r4, r7, #32
 8002256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800225a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800225e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002268:	f7ff ffae 	bl	80021c8 <UIStatus>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 800226c:	2200      	movs	r2, #0
 800226e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002272:	480d      	ldr	r0, [pc, #52]	; (80022a8 <TurnOnMotor+0x98>)
 8002274:	f001 f886 	bl	8003384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(greenLed_GPIO_Port, greenLed_Pin, GPIO_PIN_SET);
 8002278:	2201      	movs	r2, #1
 800227a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800227e:	4808      	ldr	r0, [pc, #32]	; (80022a0 <TurnOnMotor+0x90>)
 8002280:	f001 f880 	bl	8003384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800228a:	4807      	ldr	r0, [pc, #28]	; (80022a8 <TurnOnMotor+0x98>)
 800228c:	f001 f87a 	bl	8003384 <HAL_GPIO_WritePin>
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002298:	b004      	add	sp, #16
 800229a:	4770      	bx	lr
 800229c:	200002e4 	.word	0x200002e4
 80022a0:	40020000 	.word	0x40020000
 80022a4:	080089f8 	.word	0x080089f8
 80022a8:	40020400 	.word	0x40020400

080022ac <AutoProtection>:
void AutoProtection(Lcd_HandleTypeDef lcd) {
 80022ac:	b084      	sub	sp, #16
 80022ae:	b5b0      	push	{r4, r5, r7, lr}
 80022b0:	b08c      	sub	sp, #48	; 0x30
 80022b2:	af0c      	add	r7, sp, #48	; 0x30
 80022b4:	f107 0410 	add.w	r4, r7, #16
 80022b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	VoltageParameters.protectionFlag = 1;
 80022bc:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <AutoProtection+0xf4>)
 80022be:	2201      	movs	r2, #1
 80022c0:	735a      	strb	r2, [r3, #13]
	UIStatus(lcd, 1, 0, "MOTOR OFF", greenLed_GPIO_Port, greenLed_Pin,
 80022c2:	2300      	movs	r3, #0
 80022c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80022c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ca:	930a      	str	r3, [sp, #40]	; 0x28
 80022cc:	4b35      	ldr	r3, [pc, #212]	; (80023a4 <AutoProtection+0xf8>)
 80022ce:	9309      	str	r3, [sp, #36]	; 0x24
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <AutoProtection+0xfc>)
 80022d2:	9308      	str	r3, [sp, #32]
 80022d4:	2300      	movs	r3, #0
 80022d6:	9307      	str	r3, [sp, #28]
 80022d8:	2301      	movs	r3, #1
 80022da:	9306      	str	r3, [sp, #24]
 80022dc:	466d      	mov	r5, sp
 80022de:	f107 0420 	add.w	r4, r7, #32
 80022e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022f4:	f7ff ff68 	bl	80021c8 <UIStatus>
			GPIO_PIN_RESET);
	HAL_GPIO_WritePin(relay_GPIO_Port, relay_Pin, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fe:	482b      	ldr	r0, [pc, #172]	; (80023ac <AutoProtection+0x100>)
 8002300:	f001 f840 	bl	8003384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800230a:	4828      	ldr	r0, [pc, #160]	; (80023ac <AutoProtection+0x100>)
 800230c:	f001 f83a 	bl	8003384 <HAL_GPIO_WritePin>

	if (SystemFlags.underVoltageFlag) {
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <AutoProtection+0x104>)
 8002312:	789b      	ldrb	r3, [r3, #2]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d01a      	beq.n	800234e <AutoProtection+0xa2>
		UIStatus(lcd, 1, 10, "V_LOW ", redLed_GPIO_Port, redLed_Pin, GPIO_PIN_SET);
 8002318:	2301      	movs	r3, #1
 800231a:	930b      	str	r3, [sp, #44]	; 0x2c
 800231c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002320:	930a      	str	r3, [sp, #40]	; 0x28
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <AutoProtection+0xf8>)
 8002324:	9309      	str	r3, [sp, #36]	; 0x24
 8002326:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <AutoProtection+0x108>)
 8002328:	9308      	str	r3, [sp, #32]
 800232a:	230a      	movs	r3, #10
 800232c:	9307      	str	r3, [sp, #28]
 800232e:	2301      	movs	r3, #1
 8002330:	9306      	str	r3, [sp, #24]
 8002332:	466d      	mov	r5, sp
 8002334:	f107 0420 	add.w	r4, r7, #32
 8002338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002340:	e885 0003 	stmia.w	r5, {r0, r1}
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800234a:	f7ff ff3d 	bl	80021c8 <UIStatus>
	}
	if (SystemFlags.overVoltageFlag) {
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <AutoProtection+0x104>)
 8002350:	785b      	ldrb	r3, [r3, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <AutoProtection+0xe0>
		UIStatus(lcd,  1, 10, "V_HIGH",redLed_GPIO_Port, redLed_Pin, GPIO_PIN_SET);
 8002356:	2301      	movs	r3, #1
 8002358:	930b      	str	r3, [sp, #44]	; 0x2c
 800235a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800235e:	930a      	str	r3, [sp, #40]	; 0x28
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <AutoProtection+0xf8>)
 8002362:	9309      	str	r3, [sp, #36]	; 0x24
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <AutoProtection+0x10c>)
 8002366:	9308      	str	r3, [sp, #32]
 8002368:	230a      	movs	r3, #10
 800236a:	9307      	str	r3, [sp, #28]
 800236c:	2301      	movs	r3, #1
 800236e:	9306      	str	r3, [sp, #24]
 8002370:	466d      	mov	r5, sp
 8002372:	f107 0420 	add.w	r4, r7, #32
 8002376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800237e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002388:	f7ff ff1e 	bl	80021c8 <UIStatus>
	}
	HAL_Delay(5000);
 800238c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002390:	f000 f978 	bl	8002684 <HAL_Delay>

}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800239c:	b004      	add	sp, #16
 800239e:	4770      	bx	lr
 80023a0:	200002e4 	.word	0x200002e4
 80023a4:	40020000 	.word	0x40020000
 80023a8:	08008a04 	.word	0x08008a04
 80023ac:	40020400 	.word	0x40020400
 80023b0:	200002e0 	.word	0x200002e0
 80023b4:	08008a10 	.word	0x08008a10
 80023b8:	08008a18 	.word	0x08008a18

080023bc <ReadVoltage>:
 * The final vRMS value is obtained and value gets refreshed whenever the sample count reaches 500.
 * set the ready flag to know the read is completed
 * @param  None
 * @retval None                   */

void ReadVoltage() {
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	if (VoltageParameters.samplesTaken >= 500) {
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <ReadVoltage+0x78>)
 80023c2:	889b      	ldrh	r3, [r3, #4]
 80023c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023c8:	d32e      	bcc.n	8002428 <ReadVoltage+0x6c>
		VoltageParameters.voltage = sqrt(
				VoltageParameters.sum
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <ReadVoltage+0x78>)
 80023cc:	ed93 7a02 	vldr	s14, [r3, #8]
						/ VoltageParameters.samplesTaken) * SCALING_FACTOR;
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <ReadVoltage+0x78>)
 80023d2:	889b      	ldrh	r3, [r3, #4]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
		VoltageParameters.voltage = sqrt(
 80023e0:	ee16 0a90 	vmov	r0, s13
 80023e4:	f7fe f8b8 	bl	8000558 <__aeabi_f2d>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	ec43 2b10 	vmov	d0, r2, r3
 80023f0:	f005 fbb6 	bl	8007b60 <sqrt>
 80023f4:	ec51 0b10 	vmov	r0, r1, d0
						/ VoltageParameters.samplesTaken) * SCALING_FACTOR;
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <ReadVoltage+0x7c>)
 80023fe:	f7fe f903 	bl	8000608 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fbd5 	bl	8000bb8 <__aeabi_d2f>
 800240e:	4603      	mov	r3, r0
		VoltageParameters.voltage = sqrt(
 8002410:	4a08      	ldr	r2, [pc, #32]	; (8002434 <ReadVoltage+0x78>)
 8002412:	6013      	str	r3, [r2, #0]
		VoltageParameters.ready = 1;
 8002414:	4b07      	ldr	r3, [pc, #28]	; (8002434 <ReadVoltage+0x78>)
 8002416:	2201      	movs	r2, #1
 8002418:	731a      	strb	r2, [r3, #12]
		VoltageParameters.samplesTaken = 0;
 800241a:	4b06      	ldr	r3, [pc, #24]	; (8002434 <ReadVoltage+0x78>)
 800241c:	2200      	movs	r2, #0
 800241e:	809a      	strh	r2, [r3, #4]
		VoltageParameters.sum = 0;
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <ReadVoltage+0x78>)
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
	}
	HAL_Delay(150);
 8002428:	2096      	movs	r0, #150	; 0x96
 800242a:	f000 f92b 	bl	8002684 <HAL_Delay>

}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200002e4 	.word	0x200002e4
 8002438:	3ff80000 	.word	0x3ff80000

0800243c <CheckOverVoltage>:

/* @brief  to check the voltage is linear voltage.
 * @param  None
 * @retval None                           */
void CheckOverVoltage(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
	for (int a = 0; a < 10; a++) {
 8002442:	2300      	movs	r3, #0
 8002444:	607b      	str	r3, [r7, #4]
 8002446:	e010      	b.n	800246a <CheckOverVoltage+0x2e>
		if (VoltageParameters.ready) {
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <CheckOverVoltage+0x40>)
 800244a:	7b1b      	ldrb	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <CheckOverVoltage+0x28>
			VoltageParameters.ready = 0;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <CheckOverVoltage+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	731a      	strb	r2, [r3, #12]
			Check(VoltageParameters.voltage);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <CheckOverVoltage+0x40>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	eeb0 0a67 	vmov.f32	s0, s15
 8002460:	f000 f80e 	bl	8002480 <Check>
	for (int a = 0; a < 10; a++) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3301      	adds	r3, #1
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b09      	cmp	r3, #9
 800246e:	ddeb      	ble.n	8002448 <CheckOverVoltage+0xc>
		}
	}
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200002e4 	.word	0x200002e4

08002480 <Check>:
/* @brief  check the over/under  voltage.
 * @param  voltage. measurd voltage stored in the structure memeber
 * @retval None                           */
void Check(float voltage) {
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	ed87 0a01 	vstr	s0, [r7, #4]

	static int highCount = 0, lowCount = 0;
	// voltage is more then 250 highCount is increment.
	if (VoltageParameters.voltage > 250) {
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <Check+0xb4>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002538 <Check+0xb8>
 8002494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	dd04      	ble.n	80024a8 <Check+0x28>
		highCount++;
 800249e:	4b27      	ldr	r3, [pc, #156]	; (800253c <Check+0xbc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a25      	ldr	r2, [pc, #148]	; (800253c <Check+0xbc>)
 80024a6:	6013      	str	r3, [r2, #0]
	}
	//voltage is below then 200 lowCount is increment.
	if (VoltageParameters.voltage < 200) {
 80024a8:	4b22      	ldr	r3, [pc, #136]	; (8002534 <Check+0xb4>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002540 <Check+0xc0>
 80024b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	d504      	bpl.n	80024c6 <Check+0x46>
		lowCount++;
 80024bc:	4b21      	ldr	r3, [pc, #132]	; (8002544 <Check+0xc4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	4a20      	ldr	r2, [pc, #128]	; (8002544 <Check+0xc4>)
 80024c4:	6013      	str	r3, [r2, #0]
	}
	// voltage is normal  highCount& lowCount is reset.
	if (VoltageParameters.voltage < 250 && VoltageParameters.voltage > 200) {
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <Check+0xb4>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002538 <Check+0xb8>
 80024d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d8:	d50f      	bpl.n	80024fa <Check+0x7a>
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <Check+0xb4>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002540 <Check+0xc0>
 80024e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	dd05      	ble.n	80024fa <Check+0x7a>
		highCount = 0;
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <Check+0xbc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
		lowCount = 0;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <Check+0xc4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
	}

	// five sample voltage are more or less compare to normal voltage set the Over/Under voltage flags.
	if (highCount >= 5) {
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <Check+0xbc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	dd03      	ble.n	800250a <Check+0x8a>
		SystemFlags.overVoltageFlag = 1;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <Check+0xc8>)
 8002504:	2201      	movs	r2, #1
 8002506:	705a      	strb	r2, [r3, #1]
 8002508:	e002      	b.n	8002510 <Check+0x90>
	} else {
		SystemFlags.overVoltageFlag = 0;
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <Check+0xc8>)
 800250c:	2200      	movs	r2, #0
 800250e:	705a      	strb	r2, [r3, #1]
	}
	if (lowCount >= 5) {
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <Check+0xc4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b04      	cmp	r3, #4
 8002516:	dd03      	ble.n	8002520 <Check+0xa0>
		SystemFlags.underVoltageFlag = 1;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <Check+0xc8>)
 800251a:	2201      	movs	r2, #1
 800251c:	709a      	strb	r2, [r3, #2]
	} else {
		SystemFlags.underVoltageFlag = 0;
	}
}
 800251e:	e002      	b.n	8002526 <Check+0xa6>
		SystemFlags.underVoltageFlag = 0;
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <Check+0xc8>)
 8002522:	2200      	movs	r2, #0
 8002524:	709a      	strb	r2, [r3, #2]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200002e4 	.word	0x200002e4
 8002538:	437a0000 	.word	0x437a0000
 800253c:	20000310 	.word	0x20000310
 8002540:	43480000 	.word	0x43480000
 8002544:	20000314 	.word	0x20000314
 8002548:	200002e0 	.word	0x200002e0

0800254c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002584 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002550:	f7ff fd82 	bl	8002058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002554:	480c      	ldr	r0, [pc, #48]	; (8002588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002556:	490d      	ldr	r1, [pc, #52]	; (800258c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002558:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800256c:	4c0a      	ldr	r4, [pc, #40]	; (8002598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800257a:	f003 f9df 	bl	800593c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257e:	f7fe feeb 	bl	8001358 <main>
  bx  lr    
 8002582:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002584:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002590:	08008df0 	.word	0x08008df0
  ldr r2, =_sbss
 8002594:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002598:	20000468 	.word	0x20000468

0800259c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC_IRQHandler>
	...

080025a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <HAL_Init+0x40>)
 80025aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_Init+0x40>)
 80025b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_Init+0x40>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c8:	2003      	movs	r0, #3
 80025ca:	f000 fcfd 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f000 f808 	bl	80025e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d4:	f7ff fb6c 	bl	8001cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023c00 	.word	0x40023c00

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_InitTick+0x54>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_InitTick+0x58>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fd15 	bl	8003032 <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00e      	b.n	8002630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d80a      	bhi.n	800262e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f000 fcdd 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <HAL_InitTick+0x5c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000000 	.word	0x20000000
 800263c:	20000008 	.word	0x20000008
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x20>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x24>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_IncTick+0x24>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000008 	.word	0x20000008
 8002668:	20000318 	.word	0x20000318

0800266c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return uwTick;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_GetTick+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000318 	.word	0x20000318

08002684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800268c:	f7ff ffee 	bl	800266c <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d005      	beq.n	80026aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_Delay+0x44>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026aa:	bf00      	nop
 80026ac:	f7ff ffde 	bl	800266c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d8f7      	bhi.n	80026ac <HAL_Delay+0x28>
  {
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000008 	.word	0x20000008

080026cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e033      	b.n	800274a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff fb08 	bl	8001d00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002712:	f023 0302 	bic.w	r3, r3, #2
 8002716:	f043 0202 	orr.w	r2, r3, #2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fa86 	bl	8002c30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
 800273a:	e001      	b.n	8002740 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_ADC_Start+0x1a>
 800276a:	2302      	movs	r3, #2
 800276c:	e097      	b.n	800289e <HAL_ADC_Start+0x14a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d018      	beq.n	80027b6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002794:	4b45      	ldr	r3, [pc, #276]	; (80028ac <HAL_ADC_Start+0x158>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a45      	ldr	r2, [pc, #276]	; (80028b0 <HAL_ADC_Start+0x15c>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0c9a      	lsrs	r2, r3, #18
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80027a8:	e002      	b.n	80027b0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f9      	bne.n	80027aa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d15f      	bne.n	8002884 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	d106      	bne.n	8002812 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002808:	f023 0206 	bic.w	r2, r3, #6
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	645a      	str	r2, [r3, #68]	; 0x44
 8002810:	e002      	b.n	8002818 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002820:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_ADC_Start+0x160>)
 8002822:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800282c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d129      	bne.n	800289c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e020      	b.n	800289c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <HAL_ADC_Start+0x164>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d11b      	bne.n	800289c <HAL_ADC_Start+0x148>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d114      	bne.n	800289c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	e00b      	b.n	800289c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f043 0210 	orr.w	r2, r3, #16
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000000 	.word	0x20000000
 80028b0:	431bde83 	.word	0x431bde83
 80028b4:	40012300 	.word	0x40012300
 80028b8:	40012000 	.word	0x40012000

080028bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d8:	d113      	bne.n	8002902 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e8:	d10b      	bne.n	8002902 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e063      	b.n	80029ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002902:	f7ff feb3 	bl	800266c <HAL_GetTick>
 8002906:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002908:	e021      	b.n	800294e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d01d      	beq.n	800294e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_ADC_PollForConversion+0x6c>
 8002918:	f7ff fea8 	bl	800266c <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d212      	bcs.n	800294e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d00b      	beq.n	800294e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f043 0204 	orr.w	r2, r3, #4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e03d      	b.n	80029ca <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d1d6      	bne.n	800290a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0212 	mvn.w	r2, #18
 8002964:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d123      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d11f      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002992:	2b00      	cmp	r3, #0
 8002994:	d006      	beq.n	80029a4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1c>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e105      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x228>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b09      	cmp	r3, #9
 8002a16:	d925      	bls.n	8002a64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68d9      	ldr	r1, [r3, #12]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b1e      	subs	r3, #30
 8002a2e:	2207      	movs	r2, #7
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43da      	mvns	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	400a      	ands	r2, r1
 8002a3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68d9      	ldr	r1, [r3, #12]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	4618      	mov	r0, r3
 8002a50:	4603      	mov	r3, r0
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4403      	add	r3, r0
 8002a56:	3b1e      	subs	r3, #30
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	e022      	b.n	8002aaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6919      	ldr	r1, [r3, #16]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	461a      	mov	r2, r3
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	2207      	movs	r2, #7
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	400a      	ands	r2, r1
 8002a86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6919      	ldr	r1, [r3, #16]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4403      	add	r3, r0
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d824      	bhi.n	8002afc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3b05      	subs	r3, #5
 8002ac4:	221f      	movs	r2, #31
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43da      	mvns	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	400a      	ands	r2, r1
 8002ad2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	3b05      	subs	r3, #5
 8002aee:	fa00 f203 	lsl.w	r2, r0, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
 8002afa:	e04c      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d824      	bhi.n	8002b4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	3b23      	subs	r3, #35	; 0x23
 8002b16:	221f      	movs	r2, #31
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43da      	mvns	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	400a      	ands	r2, r1
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3b23      	subs	r3, #35	; 0x23
 8002b40:	fa00 f203 	lsl.w	r2, r0, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b4c:	e023      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b41      	subs	r3, #65	; 0x41
 8002b60:	221f      	movs	r2, #31
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	400a      	ands	r2, r1
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	3b41      	subs	r3, #65	; 0x41
 8002b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b96:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <HAL_ADC_ConfigChannel+0x234>)
 8002b98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <HAL_ADC_ConfigChannel+0x238>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d109      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d105      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_ADC_ConfigChannel+0x238>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d123      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x21e>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b10      	cmp	r3, #16
 8002bc8:	d003      	beq.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b11      	cmp	r3, #17
 8002bd0:	d11b      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d111      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_ADC_ConfigChannel+0x23c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <HAL_ADC_ConfigChannel+0x240>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	0c9a      	lsrs	r2, r3, #18
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bfc:	e002      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f9      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40012300 	.word	0x40012300
 8002c24:	40012000 	.word	0x40012000
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	431bde83 	.word	0x431bde83

08002c30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c38:	4b79      	ldr	r3, [pc, #484]	; (8002e20 <ADC_Init+0x1f0>)
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	021a      	lsls	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6899      	ldr	r1, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	4a58      	ldr	r2, [pc, #352]	; (8002e24 <ADC_Init+0x1f4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d022      	beq.n	8002d0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6899      	ldr	r1, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e00f      	b.n	8002d2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0202 	bic.w	r2, r2, #2
 8002d3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6899      	ldr	r1, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7e1b      	ldrb	r3, [r3, #24]
 8002d48:	005a      	lsls	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01b      	beq.n	8002d94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	3b01      	subs	r3, #1
 8002d88:	035a      	lsls	r2, r3, #13
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	e007      	b.n	8002da4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002da2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	051a      	lsls	r2, r3, #20
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002de6:	025a      	lsls	r2, r3, #9
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6899      	ldr	r1, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	029a      	lsls	r2, r3, #10
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	609a      	str	r2, [r3, #8]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	40012300 	.word	0x40012300
 8002e24:	0f000001 	.word	0x0f000001

08002e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e44:	4013      	ands	r3, r2
 8002e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5a:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <__NVIC_SetPriorityGrouping+0x44>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	60d3      	str	r3, [r2, #12]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e74:	4b04      	ldr	r3, [pc, #16]	; (8002e88 <__NVIC_GetPriorityGrouping+0x18>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 0307 	and.w	r3, r3, #7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	db0b      	blt.n	8002eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	f003 021f 	and.w	r2, r3, #31
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <__NVIC_EnableIRQ+0x38>)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2001      	movs	r0, #1
 8002eae:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	db0a      	blt.n	8002ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <__NVIC_SetPriority+0x4c>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	0112      	lsls	r2, r2, #4
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	440b      	add	r3, r1
 8002eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef0:	e00a      	b.n	8002f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	4908      	ldr	r1, [pc, #32]	; (8002f18 <__NVIC_SetPriority+0x50>)
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	3b04      	subs	r3, #4
 8002f00:	0112      	lsls	r2, r2, #4
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	440b      	add	r3, r1
 8002f06:	761a      	strb	r2, [r3, #24]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000e100 	.word	0xe000e100
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f1c3 0307 	rsb	r3, r3, #7
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	bf28      	it	cs
 8002f3a:	2304      	movcs	r3, #4
 8002f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d902      	bls.n	8002f4c <NVIC_EncodePriority+0x30>
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3b03      	subs	r3, #3
 8002f4a:	e000      	b.n	8002f4e <NVIC_EncodePriority+0x32>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f50:	f04f 32ff 	mov.w	r2, #4294967295
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43da      	mvns	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	401a      	ands	r2, r3
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	43d9      	mvns	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f74:	4313      	orrs	r3, r2
         );
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f7ff ff8e 	bl	8002ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff29 	bl	8002e28 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff3e 	bl	8002e70 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff8e 	bl	8002f1c <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5d 	bl	8002ec8 <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	4603      	mov	r3, r0
 800301e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff ff31 	bl	8002e8c <__NVIC_EnableIRQ>
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff ffa2 	bl	8002f84 <SysTick_Config>
 8003040:	4603      	mov	r3, r0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e159      	b.n	800331c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 8148 	bne.w	8003316 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d005      	beq.n	800309e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800309a:	2b02      	cmp	r3, #2
 800309c:	d130      	bne.n	8003100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 0201 	and.w	r2, r3, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b03      	cmp	r3, #3
 800310a:	d017      	beq.n	800313c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d123      	bne.n	8003190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a2 	beq.w	8003316 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b57      	ldr	r3, [pc, #348]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ee:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_GPIO_Init+0x2f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d019      	beq.n	800324e <HAL_GPIO_Init+0x202>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_GPIO_Init+0x2f4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x1fe>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a47      	ldr	r2, [pc, #284]	; (8003344 <HAL_GPIO_Init+0x2f8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x1fa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a46      	ldr	r2, [pc, #280]	; (8003348 <HAL_GPIO_Init+0x2fc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x1f6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a45      	ldr	r2, [pc, #276]	; (800334c <HAL_GPIO_Init+0x300>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x1f2>
 800323a:	2304      	movs	r3, #4
 800323c:	e008      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800323e:	2307      	movs	r3, #7
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003242:	2303      	movs	r3, #3
 8003244:	e004      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324e:	2300      	movs	r3, #0
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f002 0203 	and.w	r2, r2, #3
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	4093      	lsls	r3, r2
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003260:	4935      	ldr	r1, [pc, #212]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_GPIO_Init+0x304>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032e6:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	f67f aea2 	bls.w	8003068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40013800 	.word	0x40013800
 800333c:	40020000 	.word	0x40020000
 8003340:	40020400 	.word	0x40020400
 8003344:	40020800 	.word	0x40020800
 8003348:	40020c00 	.word	0x40020c00
 800334c:	40021000 	.word	0x40021000
 8003350:	40013c00 	.word	0x40013c00

08003354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	887b      	ldrh	r3, [r7, #2]
 8003366:	4013      	ands	r3, r2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e001      	b.n	8003376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
 8003390:	4613      	mov	r3, r2
 8003392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033a0:	e003      	b.n	80033aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033a2:	887b      	ldrh	r3, [r7, #2]
 80033a4:	041a      	lsls	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	619a      	str	r2, [r3, #24]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e267      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d075      	beq.n	80034c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d6:	4b88      	ldr	r3, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d00c      	beq.n	80033fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4b85      	ldr	r3, [pc, #532]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d112      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ee:	4b82      	ldr	r3, [pc, #520]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033fa:	d10b      	bne.n	8003414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	4b7e      	ldr	r3, [pc, #504]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d05b      	beq.n	80034c0 <HAL_RCC_OscConfig+0x108>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d157      	bne.n	80034c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e242      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341c:	d106      	bne.n	800342c <HAL_RCC_OscConfig+0x74>
 800341e:	4b76      	ldr	r3, [pc, #472]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a75      	ldr	r2, [pc, #468]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e01d      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x98>
 8003436:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6f      	ldr	r2, [pc, #444]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b6d      	ldr	r3, [pc, #436]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a6c      	ldr	r2, [pc, #432]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0xb0>
 8003450:	4b69      	ldr	r3, [pc, #420]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a68      	ldr	r2, [pc, #416]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a65      	ldr	r2, [pc, #404]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7ff f8fc 	bl	800266c <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003478:	f7ff f8f8 	bl	800266c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e207      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b5b      	ldr	r3, [pc, #364]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0xc0>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7ff f8e8 	bl	800266c <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a0:	f7ff f8e4 	bl	800266c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	; 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e1f3      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	4b51      	ldr	r3, [pc, #324]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0xe8>
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d063      	beq.n	8003596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ce:	4b4a      	ldr	r3, [pc, #296]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034da:	4b47      	ldr	r3, [pc, #284]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d11c      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e6:	4b44      	ldr	r3, [pc, #272]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d116      	bne.n	8003520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d001      	beq.n	800350a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e1c7      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350a:	4b3b      	ldr	r3, [pc, #236]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4937      	ldr	r1, [pc, #220]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	e03a      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003528:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x244>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7ff f89d 	bl	800266c <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003536:	f7ff f899 	bl	800266c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e1a8      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003554:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4925      	ldr	r1, [pc, #148]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 8003564:	4313      	orrs	r3, r2
 8003566:	600b      	str	r3, [r1, #0]
 8003568:	e015      	b.n	8003596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_RCC_OscConfig+0x244>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7ff f87c 	bl	800266c <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003578:	f7ff f878 	bl	800266c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e187      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d036      	beq.n	8003610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d016      	beq.n	80035d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_RCC_OscConfig+0x248>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7ff f85c 	bl	800266c <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b8:	f7ff f858 	bl	800266c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e167      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_RCC_OscConfig+0x240>)
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x200>
 80035d6:	e01b      	b.n	8003610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d8:	4b09      	ldr	r3, [pc, #36]	; (8003600 <HAL_RCC_OscConfig+0x248>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035de:	f7ff f845 	bl	800266c <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	e00e      	b.n	8003604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e6:	f7ff f841 	bl	800266c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d907      	bls.n	8003604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e150      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
 80035f8:	40023800 	.word	0x40023800
 80035fc:	42470000 	.word	0x42470000
 8003600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003604:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ea      	bne.n	80035e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8097 	beq.w	800374c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003622:	4b81      	ldr	r3, [pc, #516]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10f      	bne.n	800364e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	4b7d      	ldr	r3, [pc, #500]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	4a7c      	ldr	r2, [pc, #496]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363c:	6413      	str	r3, [r2, #64]	; 0x40
 800363e:	4b7a      	ldr	r3, [pc, #488]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364e:	4b77      	ldr	r3, [pc, #476]	; (800382c <HAL_RCC_OscConfig+0x474>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d118      	bne.n	800368c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365a:	4b74      	ldr	r3, [pc, #464]	; (800382c <HAL_RCC_OscConfig+0x474>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a73      	ldr	r2, [pc, #460]	; (800382c <HAL_RCC_OscConfig+0x474>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003666:	f7ff f801 	bl	800266c <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366e:	f7fe fffd 	bl	800266c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e10c      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <HAL_RCC_OscConfig+0x474>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x2ea>
 8003694:	4b64      	ldr	r3, [pc, #400]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a63      	ldr	r2, [pc, #396]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
 80036a0:	e01c      	b.n	80036dc <HAL_RCC_OscConfig+0x324>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b05      	cmp	r3, #5
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x30c>
 80036aa:	4b5f      	ldr	r3, [pc, #380]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a5e      	ldr	r2, [pc, #376]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 0304 	orr.w	r3, r3, #4
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	4b5c      	ldr	r3, [pc, #368]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	4a5b      	ldr	r2, [pc, #364]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0x324>
 80036c4:	4b58      	ldr	r3, [pc, #352]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a57      	ldr	r2, [pc, #348]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	4b55      	ldr	r3, [pc, #340]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a54      	ldr	r2, [pc, #336]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f023 0304 	bic.w	r3, r3, #4
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d015      	beq.n	8003710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fe ffc2 	bl	800266c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe ffbe 	bl	800266c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0cb      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	4b49      	ldr	r3, [pc, #292]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ee      	beq.n	80036ec <HAL_RCC_OscConfig+0x334>
 800370e:	e014      	b.n	800373a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003710:	f7fe ffac 	bl	800266c <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003716:	e00a      	b.n	800372e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003718:	f7fe ffa8 	bl	800266c <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e0b5      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ee      	bne.n	8003718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373a:	7dfb      	ldrb	r3, [r7, #23]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003740:	4b39      	ldr	r3, [pc, #228]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	4a38      	ldr	r2, [pc, #224]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a1 	beq.w	8003898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003756:	4b34      	ldr	r3, [pc, #208]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b08      	cmp	r3, #8
 8003760:	d05c      	beq.n	800381c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d141      	bne.n	80037ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_RCC_OscConfig+0x478>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fe ff7c 	bl	800266c <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003778:	f7fe ff78 	bl	800266c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e087      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f0      	bne.n	8003778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69da      	ldr	r2, [r3, #28]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	019b      	lsls	r3, r3, #6
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	3b01      	subs	r3, #1
 80037b0:	041b      	lsls	r3, r3, #16
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	491b      	ldr	r1, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_RCC_OscConfig+0x478>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c6:	f7fe ff51 	bl	800266c <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fe ff4d 	bl	800266c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e05c      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e0:	4b11      	ldr	r3, [pc, #68]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0x416>
 80037ec:	e054      	b.n	8003898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <HAL_RCC_OscConfig+0x478>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fe ff3a 	bl	800266c <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fe ff36 	bl	800266c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e045      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_OscConfig+0x470>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0x444>
 800381a:	e03d      	b.n	8003898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e038      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
 8003828:	40023800 	.word	0x40023800
 800382c:	40007000 	.word	0x40007000
 8003830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x4ec>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d028      	beq.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d121      	bne.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d11a      	bne.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003864:	4013      	ands	r3, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800386a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800386c:	4293      	cmp	r3, r2
 800386e:	d111      	bne.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	3b01      	subs	r3, #1
 800387e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d107      	bne.n	8003894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800

080038a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0cc      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038bc:	4b68      	ldr	r3, [pc, #416]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d90c      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b63      	ldr	r3, [pc, #396]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0b8      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038fc:	4b59      	ldr	r3, [pc, #356]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4a58      	ldr	r2, [pc, #352]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a52      	ldr	r2, [pc, #328]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003920:	4b50      	ldr	r3, [pc, #320]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	494d      	ldr	r1, [pc, #308]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d044      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d119      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e07f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b02      	cmp	r3, #2
 800395c:	d003      	beq.n	8003966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003962:	2b03      	cmp	r3, #3
 8003964:	d107      	bne.n	8003976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e06f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003976:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e067      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f023 0203 	bic.w	r2, r3, #3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4934      	ldr	r1, [pc, #208]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003998:	f7fe fe68 	bl	800266c <HAL_GetTick>
 800399c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399e:	e00a      	b.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039a0:	f7fe fe64 	bl	800266c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e04f      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 020c 	and.w	r2, r3, #12
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d1eb      	bne.n	80039a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c8:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d20c      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e032      	b.n	8003a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039fc:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4916      	ldr	r1, [pc, #88]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d009      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	490e      	ldr	r1, [pc, #56]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2e:	f000 f821 	bl	8003a74 <HAL_RCC_GetSysClockFreq>
 8003a32:	4602      	mov	r2, r0
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	490a      	ldr	r1, [pc, #40]	; (8003a68 <HAL_RCC_ClockConfig+0x1c0>)
 8003a40:	5ccb      	ldrb	r3, [r1, r3]
 8003a42:	fa22 f303 	lsr.w	r3, r2, r3
 8003a46:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fdc8 	bl	80025e4 <HAL_InitTick>

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40023c00 	.word	0x40023c00
 8003a64:	40023800 	.word	0x40023800
 8003a68:	08008a24 	.word	0x08008a24
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	20000004 	.word	0x20000004

08003a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a78:	b094      	sub	sp, #80	; 0x50
 8003a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a80:	2300      	movs	r3, #0
 8003a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a84:	2300      	movs	r3, #0
 8003a86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a8c:	4b79      	ldr	r3, [pc, #484]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d00d      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	f200 80e1 	bhi.w	8003c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d003      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x3a>
 8003aa6:	e0db      	b.n	8003c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b73      	ldr	r3, [pc, #460]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003aac:	e0db      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aae:	4b73      	ldr	r3, [pc, #460]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ab2:	e0d8      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab4:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003abc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003abe:	4b6d      	ldr	r3, [pc, #436]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d063      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003adc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ade:	2300      	movs	r3, #0
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	462b      	mov	r3, r5
 8003aea:	f04f 0000 	mov.w	r0, #0
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	0159      	lsls	r1, r3, #5
 8003af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af8:	0150      	lsls	r0, r2, #5
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4621      	mov	r1, r4
 8003b00:	1a51      	subs	r1, r2, r1
 8003b02:	6139      	str	r1, [r7, #16]
 8003b04:	4629      	mov	r1, r5
 8003b06:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b18:	4659      	mov	r1, fp
 8003b1a:	018b      	lsls	r3, r1, #6
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b22:	4651      	mov	r1, sl
 8003b24:	018a      	lsls	r2, r1, #6
 8003b26:	4651      	mov	r1, sl
 8003b28:	ebb2 0801 	subs.w	r8, r2, r1
 8003b2c:	4659      	mov	r1, fp
 8003b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b46:	4690      	mov	r8, r2
 8003b48:	4699      	mov	r9, r3
 8003b4a:	4623      	mov	r3, r4
 8003b4c:	eb18 0303 	adds.w	r3, r8, r3
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	462b      	mov	r3, r5
 8003b54:	eb49 0303 	adc.w	r3, r9, r3
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b66:	4629      	mov	r1, r5
 8003b68:	024b      	lsls	r3, r1, #9
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b70:	4621      	mov	r1, r4
 8003b72:	024a      	lsls	r2, r1, #9
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b84:	f7fd f868 	bl	8000c58 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b90:	e058      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b92:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	2200      	movs	r2, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bac:	4642      	mov	r2, r8
 8003bae:	464b      	mov	r3, r9
 8003bb0:	f04f 0000 	mov.w	r0, #0
 8003bb4:	f04f 0100 	mov.w	r1, #0
 8003bb8:	0159      	lsls	r1, r3, #5
 8003bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bbe:	0150      	lsls	r0, r2, #5
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bca:	4649      	mov	r1, r9
 8003bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003be4:	ebb2 040a 	subs.w	r4, r2, sl
 8003be8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	00eb      	lsls	r3, r5, #3
 8003bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfa:	00e2      	lsls	r2, r4, #3
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	461d      	mov	r5, r3
 8003c00:	4643      	mov	r3, r8
 8003c02:	18e3      	adds	r3, r4, r3
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	464b      	mov	r3, r9
 8003c08:	eb45 0303 	adc.w	r3, r5, r3
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	028b      	lsls	r3, r1, #10
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c24:	4621      	mov	r1, r4
 8003c26:	028a      	lsls	r2, r1, #10
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	61fa      	str	r2, [r7, #28]
 8003c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c38:	f7fd f80e 	bl	8000c58 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4613      	mov	r3, r2
 8003c42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	3301      	adds	r3, #1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c5e:	e002      	b.n	8003c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3750      	adds	r7, #80	; 0x50
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	007a1200 	.word	0x007a1200

08003c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c86:	681b      	ldr	r3, [r3, #0]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000000 	.word	0x20000000

08003c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c9c:	f7ff fff0 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0a9b      	lsrs	r3, r3, #10
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4903      	ldr	r1, [pc, #12]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	08008a34 	.word	0x08008a34

08003cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cc4:	f7ff ffdc 	bl	8003c80 <HAL_RCC_GetHCLKFreq>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	0b5b      	lsrs	r3, r3, #13
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	4903      	ldr	r1, [pc, #12]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd6:	5ccb      	ldrb	r3, [r1, r3]
 8003cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	08008a34 	.word	0x08008a34

08003ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e041      	b.n	8003d7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fe f83a 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f000 fa70 	bl	800420c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d001      	beq.n	8003da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e044      	b.n	8003e2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <HAL_TIM_Base_Start_IT+0xb0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d013      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_TIM_Base_Start_IT+0xb4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00e      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_TIM_Base_Start_IT+0xb8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x6c>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <HAL_TIM_Base_Start_IT+0xbc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x6c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_TIM_Base_Start_IT+0xc0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d111      	bne.n	8003e18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b06      	cmp	r3, #6
 8003e04:	d010      	beq.n	8003e28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0201 	orr.w	r2, r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e16:	e007      	b.n	8003e28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	40000400 	.word	0x40000400
 8003e40:	40000800 	.word	0x40000800
 8003e44:	40000c00 	.word	0x40000c00
 8003e48:	40014000 	.word	0x40014000

08003e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d020      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01b      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0202 	mvn.w	r2, #2
 8003e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f999 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f98b 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f99c 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0204 	mvn.w	r2, #4
 8003ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f973 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f965 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f976 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d020      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0208 	mvn.w	r2, #8
 8003f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2204      	movs	r2, #4
 8003f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f94d 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f93f 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f950 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d020      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0210 	mvn.w	r2, #16
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2208      	movs	r2, #8
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f927 	bl	80041ce <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f919 	bl	80041ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f92a 	bl	80041e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0201 	mvn.w	r2, #1
 8003fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd fe24 	bl	8001c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00c      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fab6 	bl	8004548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00c      	beq.n	8004000 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d007      	beq.n	8004000 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f8fb 	bl	80041f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00c      	beq.n	8004024 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d007      	beq.n	8004024 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0220 	mvn.w	r2, #32
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa88 	bl	8004534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_TIM_ConfigClockSource+0x1c>
 8004044:	2302      	movs	r3, #2
 8004046:	e0b4      	b.n	80041b2 <HAL_TIM_ConfigClockSource+0x186>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800406e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004080:	d03e      	beq.n	8004100 <HAL_TIM_ConfigClockSource+0xd4>
 8004082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004086:	f200 8087 	bhi.w	8004198 <HAL_TIM_ConfigClockSource+0x16c>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	f000 8086 	beq.w	800419e <HAL_TIM_ConfigClockSource+0x172>
 8004092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004096:	d87f      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b70      	cmp	r3, #112	; 0x70
 800409a:	d01a      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0xa6>
 800409c:	2b70      	cmp	r3, #112	; 0x70
 800409e:	d87b      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b60      	cmp	r3, #96	; 0x60
 80040a2:	d050      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x11a>
 80040a4:	2b60      	cmp	r3, #96	; 0x60
 80040a6:	d877      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b50      	cmp	r3, #80	; 0x50
 80040aa:	d03c      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0xfa>
 80040ac:	2b50      	cmp	r3, #80	; 0x50
 80040ae:	d873      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x16c>
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d058      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x13a>
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	d86f      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x16c>
 80040b8:	2b30      	cmp	r3, #48	; 0x30
 80040ba:	d064      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15a>
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d86b      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x16c>
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d060      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15a>
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d867      	bhi.n	8004198 <HAL_TIM_ConfigClockSource+0x16c>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d05c      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15a>
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d05a      	beq.n	8004186 <HAL_TIM_ConfigClockSource+0x15a>
 80040d0:	e062      	b.n	8004198 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040e2:	f000 f999 	bl	8004418 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	609a      	str	r2, [r3, #8]
      break;
 80040fe:	e04f      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004110:	f000 f982 	bl	8004418 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004122:	609a      	str	r2, [r3, #8]
      break;
 8004124:	e03c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004132:	461a      	mov	r2, r3
 8004134:	f000 f8f6 	bl	8004324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2150      	movs	r1, #80	; 0x50
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f94f 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8004144:	e02c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004152:	461a      	mov	r2, r3
 8004154:	f000 f915 	bl	8004382 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2160      	movs	r1, #96	; 0x60
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f93f 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8004164:	e01c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004172:	461a      	mov	r2, r3
 8004174:	f000 f8d6 	bl	8004324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2140      	movs	r1, #64	; 0x40
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f92f 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8004184:	e00c      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4619      	mov	r1, r3
 8004190:	4610      	mov	r0, r2
 8004192:	f000 f926 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8004196:	e003      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
      break;
 800419c:	e000      	b.n	80041a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800419e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
	...

0800420c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3a      	ldr	r2, [pc, #232]	; (8004308 <TIM_Base_SetConfig+0xfc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00f      	beq.n	8004244 <TIM_Base_SetConfig+0x38>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d00b      	beq.n	8004244 <TIM_Base_SetConfig+0x38>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a37      	ldr	r2, [pc, #220]	; (800430c <TIM_Base_SetConfig+0x100>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d007      	beq.n	8004244 <TIM_Base_SetConfig+0x38>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a36      	ldr	r2, [pc, #216]	; (8004310 <TIM_Base_SetConfig+0x104>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_Base_SetConfig+0x38>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a35      	ldr	r2, [pc, #212]	; (8004314 <TIM_Base_SetConfig+0x108>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d108      	bne.n	8004256 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <TIM_Base_SetConfig+0xfc>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01b      	beq.n	8004296 <TIM_Base_SetConfig+0x8a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004264:	d017      	beq.n	8004296 <TIM_Base_SetConfig+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a28      	ldr	r2, [pc, #160]	; (800430c <TIM_Base_SetConfig+0x100>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <TIM_Base_SetConfig+0x8a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a27      	ldr	r2, [pc, #156]	; (8004310 <TIM_Base_SetConfig+0x104>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00f      	beq.n	8004296 <TIM_Base_SetConfig+0x8a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a26      	ldr	r2, [pc, #152]	; (8004314 <TIM_Base_SetConfig+0x108>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_Base_SetConfig+0x8a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a25      	ldr	r2, [pc, #148]	; (8004318 <TIM_Base_SetConfig+0x10c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0x8a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a24      	ldr	r2, [pc, #144]	; (800431c <TIM_Base_SetConfig+0x110>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0x8a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a23      	ldr	r2, [pc, #140]	; (8004320 <TIM_Base_SetConfig+0x114>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a0e      	ldr	r2, [pc, #56]	; (8004308 <TIM_Base_SetConfig+0xfc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d103      	bne.n	80042dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f023 0201 	bic.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	611a      	str	r2, [r3, #16]
  }
}
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800
 8004314:	40000c00 	.word	0x40000c00
 8004318:	40014000 	.word	0x40014000
 800431c:	40014400 	.word	0x40014400
 8004320:	40014800 	.word	0x40014800

08004324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0201 	bic.w	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800434e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 030a 	bic.w	r3, r3, #10
 8004360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004382:	b480      	push	{r7}
 8004384:	b087      	sub	sp, #28
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f023 0210 	bic.w	r2, r3, #16
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	f043 0307 	orr.w	r3, r3, #7
 8004404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	609a      	str	r2, [r3, #8]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	431a      	orrs	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	609a      	str	r2, [r3, #8]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800446c:	2302      	movs	r3, #2
 800446e:	e050      	b.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044bc:	d013      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a18      	ldr	r2, [pc, #96]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a15      	ldr	r2, [pc, #84]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10c      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40010000 	.word	0x40010000
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00
 8004530:	40014000 	.word	0x40014000

08004534 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e042      	b.n	80045f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7fd fc26 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800459e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f973 	bl	800488c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695a      	ldr	r2, [r3, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b20      	cmp	r3, #32
 800461a:	d175      	bne.n	8004708 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_UART_Transmit+0x2c>
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e06e      	b.n	800470a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2221      	movs	r2, #33	; 0x21
 8004636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800463a:	f7fe f817 	bl	800266c <HAL_GetTick>
 800463e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004654:	d108      	bne.n	8004668 <HAL_UART_Transmit+0x6c>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d104      	bne.n	8004668 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	e003      	b.n	8004670 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004670:	e02e      	b.n	80046d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2180      	movs	r1, #128	; 0x80
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f848 	bl	8004712 <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e03a      	b.n	800470a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10b      	bne.n	80046b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	3302      	adds	r3, #2
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e007      	b.n	80046c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1cb      	bne.n	8004672 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2200      	movs	r2, #0
 80046e2:	2140      	movs	r1, #64	; 0x40
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f814 	bl	8004712 <UART_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e006      	b.n	800470a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	3720      	adds	r7, #32
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	4613      	mov	r3, r2
 8004720:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004722:	e03b      	b.n	800479c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d037      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472c:	f7fd ff9e 	bl	800266c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	6a3a      	ldr	r2, [r7, #32]
 8004738:	429a      	cmp	r2, r3
 800473a:	d302      	bcc.n	8004742 <UART_WaitOnFlagUntilTimeout+0x30>
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e03a      	b.n	80047bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d023      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b80      	cmp	r3, #128	; 0x80
 8004758:	d020      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x8a>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d01d      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b08      	cmp	r3, #8
 800476c:	d116      	bne.n	800479c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f81d 	bl	80047c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2208      	movs	r2, #8
 800478e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e00f      	b.n	80047bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	4013      	ands	r3, r2
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	bf0c      	ite	eq
 80047ac:	2301      	moveq	r3, #1
 80047ae:	2300      	movne	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d0b4      	beq.n	8004724 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b095      	sub	sp, #84	; 0x54
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047ec:	643a      	str	r2, [r7, #64]	; 0x40
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3314      	adds	r3, #20
 8004806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	64bb      	str	r3, [r7, #72]	; 0x48
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3314      	adds	r3, #20
 800481e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004820:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	2b01      	cmp	r3, #1
 800483a:	d119      	bne.n	8004870 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	60bb      	str	r3, [r7, #8]
   return(result);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f023 0310 	bic.w	r3, r3, #16
 8004852:	647b      	str	r3, [r7, #68]	; 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	330c      	adds	r3, #12
 800485a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800485c:	61ba      	str	r2, [r7, #24]
 800485e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6979      	ldr	r1, [r7, #20]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	613b      	str	r3, [r7, #16]
   return(result);
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e5      	bne.n	800483c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800487e:	bf00      	nop
 8004880:	3754      	adds	r7, #84	; 0x54
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800488c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004890:	b0c0      	sub	sp, #256	; 0x100
 8004892:	af00      	add	r7, sp, #0
 8004894:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a8:	68d9      	ldr	r1, [r3, #12]
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	ea40 0301 	orr.w	r3, r0, r1
 80048b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048e4:	f021 010c 	bic.w	r1, r1, #12
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048f2:	430b      	orrs	r3, r1
 80048f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004906:	6999      	ldr	r1, [r3, #24]
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	ea40 0301 	orr.w	r3, r0, r1
 8004912:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b8f      	ldr	r3, [pc, #572]	; (8004b58 <UART_SetConfig+0x2cc>)
 800491c:	429a      	cmp	r2, r3
 800491e:	d005      	beq.n	800492c <UART_SetConfig+0xa0>
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	4b8d      	ldr	r3, [pc, #564]	; (8004b5c <UART_SetConfig+0x2d0>)
 8004928:	429a      	cmp	r2, r3
 800492a:	d104      	bne.n	8004936 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800492c:	f7ff f9c8 	bl	8003cc0 <HAL_RCC_GetPCLK2Freq>
 8004930:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004934:	e003      	b.n	800493e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004936:	f7ff f9af 	bl	8003c98 <HAL_RCC_GetPCLK1Freq>
 800493a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004948:	f040 810c 	bne.w	8004b64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800494c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004950:	2200      	movs	r2, #0
 8004952:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004956:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800495a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800495e:	4622      	mov	r2, r4
 8004960:	462b      	mov	r3, r5
 8004962:	1891      	adds	r1, r2, r2
 8004964:	65b9      	str	r1, [r7, #88]	; 0x58
 8004966:	415b      	adcs	r3, r3
 8004968:	65fb      	str	r3, [r7, #92]	; 0x5c
 800496a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800496e:	4621      	mov	r1, r4
 8004970:	eb12 0801 	adds.w	r8, r2, r1
 8004974:	4629      	mov	r1, r5
 8004976:	eb43 0901 	adc.w	r9, r3, r1
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800498a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498e:	4690      	mov	r8, r2
 8004990:	4699      	mov	r9, r3
 8004992:	4623      	mov	r3, r4
 8004994:	eb18 0303 	adds.w	r3, r8, r3
 8004998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800499c:	462b      	mov	r3, r5
 800499e:	eb49 0303 	adc.w	r3, r9, r3
 80049a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049ba:	460b      	mov	r3, r1
 80049bc:	18db      	adds	r3, r3, r3
 80049be:	653b      	str	r3, [r7, #80]	; 0x50
 80049c0:	4613      	mov	r3, r2
 80049c2:	eb42 0303 	adc.w	r3, r2, r3
 80049c6:	657b      	str	r3, [r7, #84]	; 0x54
 80049c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049d0:	f7fc f942 	bl	8000c58 <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4b61      	ldr	r3, [pc, #388]	; (8004b60 <UART_SetConfig+0x2d4>)
 80049da:	fba3 2302 	umull	r2, r3, r3, r2
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	011c      	lsls	r4, r3, #4
 80049e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	1891      	adds	r1, r2, r2
 80049fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80049fc:	415b      	adcs	r3, r3
 80049fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a04:	4641      	mov	r1, r8
 8004a06:	eb12 0a01 	adds.w	sl, r2, r1
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	f04f 0300 	mov.w	r3, #0
 8004a18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a24:	4692      	mov	sl, r2
 8004a26:	469b      	mov	fp, r3
 8004a28:	4643      	mov	r3, r8
 8004a2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a32:	464b      	mov	r3, r9
 8004a34:	eb4b 0303 	adc.w	r3, fp, r3
 8004a38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a50:	460b      	mov	r3, r1
 8004a52:	18db      	adds	r3, r3, r3
 8004a54:	643b      	str	r3, [r7, #64]	; 0x40
 8004a56:	4613      	mov	r3, r2
 8004a58:	eb42 0303 	adc.w	r3, r2, r3
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a66:	f7fc f8f7 	bl	8000c58 <__aeabi_uldivmod>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4b3b      	ldr	r3, [pc, #236]	; (8004b60 <UART_SetConfig+0x2d4>)
 8004a72:	fba3 2301 	umull	r2, r3, r3, r1
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	2264      	movs	r2, #100	; 0x64
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	1acb      	subs	r3, r1, r3
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a86:	4b36      	ldr	r3, [pc, #216]	; (8004b60 <UART_SetConfig+0x2d4>)
 8004a88:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a94:	441c      	add	r4, r3
 8004a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004aa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	464b      	mov	r3, r9
 8004aac:	1891      	adds	r1, r2, r2
 8004aae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ab0:	415b      	adcs	r3, r3
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ab8:	4641      	mov	r1, r8
 8004aba:	1851      	adds	r1, r2, r1
 8004abc:	6339      	str	r1, [r7, #48]	; 0x30
 8004abe:	4649      	mov	r1, r9
 8004ac0:	414b      	adcs	r3, r1
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ad0:	4659      	mov	r1, fp
 8004ad2:	00cb      	lsls	r3, r1, #3
 8004ad4:	4651      	mov	r1, sl
 8004ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ada:	4651      	mov	r1, sl
 8004adc:	00ca      	lsls	r2, r1, #3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	189b      	adds	r3, r3, r2
 8004ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004aec:	464b      	mov	r3, r9
 8004aee:	460a      	mov	r2, r1
 8004af0:	eb42 0303 	adc.w	r3, r2, r3
 8004af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	18db      	adds	r3, r3, r3
 8004b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b12:	4613      	mov	r3, r2
 8004b14:	eb42 0303 	adc.w	r3, r2, r3
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b22:	f7fc f899 	bl	8000c58 <__aeabi_uldivmod>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <UART_SetConfig+0x2d4>)
 8004b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b30:	095b      	lsrs	r3, r3, #5
 8004b32:	2164      	movs	r1, #100	; 0x64
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	3332      	adds	r3, #50	; 0x32
 8004b3e:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <UART_SetConfig+0x2d4>)
 8004b40:	fba2 2303 	umull	r2, r3, r2, r3
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	f003 0207 	and.w	r2, r3, #7
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4422      	add	r2, r4
 8004b52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b54:	e106      	b.n	8004d64 <UART_SetConfig+0x4d8>
 8004b56:	bf00      	nop
 8004b58:	40011000 	.word	0x40011000
 8004b5c:	40011400 	.word	0x40011400
 8004b60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b76:	4642      	mov	r2, r8
 8004b78:	464b      	mov	r3, r9
 8004b7a:	1891      	adds	r1, r2, r2
 8004b7c:	6239      	str	r1, [r7, #32]
 8004b7e:	415b      	adcs	r3, r3
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
 8004b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b86:	4641      	mov	r1, r8
 8004b88:	1854      	adds	r4, r2, r1
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	eb43 0501 	adc.w	r5, r3, r1
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	00eb      	lsls	r3, r5, #3
 8004b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9e:	00e2      	lsls	r2, r4, #3
 8004ba0:	4614      	mov	r4, r2
 8004ba2:	461d      	mov	r5, r3
 8004ba4:	4643      	mov	r3, r8
 8004ba6:	18e3      	adds	r3, r4, r3
 8004ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bac:	464b      	mov	r3, r9
 8004bae:	eb45 0303 	adc.w	r3, r5, r3
 8004bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	008b      	lsls	r3, r1, #2
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bdc:	4621      	mov	r1, r4
 8004bde:	008a      	lsls	r2, r1, #2
 8004be0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004be4:	f7fc f838 	bl	8000c58 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4b60      	ldr	r3, [pc, #384]	; (8004d70 <UART_SetConfig+0x4e4>)
 8004bee:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	011c      	lsls	r4, r3, #4
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c08:	4642      	mov	r2, r8
 8004c0a:	464b      	mov	r3, r9
 8004c0c:	1891      	adds	r1, r2, r2
 8004c0e:	61b9      	str	r1, [r7, #24]
 8004c10:	415b      	adcs	r3, r3
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c18:	4641      	mov	r1, r8
 8004c1a:	1851      	adds	r1, r2, r1
 8004c1c:	6139      	str	r1, [r7, #16]
 8004c1e:	4649      	mov	r1, r9
 8004c20:	414b      	adcs	r3, r1
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c30:	4659      	mov	r1, fp
 8004c32:	00cb      	lsls	r3, r1, #3
 8004c34:	4651      	mov	r1, sl
 8004c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3a:	4651      	mov	r1, sl
 8004c3c:	00ca      	lsls	r2, r1, #3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4619      	mov	r1, r3
 8004c42:	4603      	mov	r3, r0
 8004c44:	4642      	mov	r2, r8
 8004c46:	189b      	adds	r3, r3, r2
 8004c48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	460a      	mov	r2, r1
 8004c50:	eb42 0303 	adc.w	r3, r2, r3
 8004c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c70:	4649      	mov	r1, r9
 8004c72:	008b      	lsls	r3, r1, #2
 8004c74:	4641      	mov	r1, r8
 8004c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	008a      	lsls	r2, r1, #2
 8004c7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c82:	f7fb ffe9 	bl	8000c58 <__aeabi_uldivmod>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <UART_SetConfig+0x4e4>)
 8004c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	2264      	movs	r2, #100	; 0x64
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	1acb      	subs	r3, r1, r3
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	3332      	adds	r3, #50	; 0x32
 8004ca0:	4a33      	ldr	r2, [pc, #204]	; (8004d70 <UART_SetConfig+0x4e4>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	095b      	lsrs	r3, r3, #5
 8004ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cac:	441c      	add	r4, r3
 8004cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	673b      	str	r3, [r7, #112]	; 0x70
 8004cb6:	677a      	str	r2, [r7, #116]	; 0x74
 8004cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	1891      	adds	r1, r2, r2
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	415b      	adcs	r3, r3
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ccc:	4641      	mov	r1, r8
 8004cce:	1851      	adds	r1, r2, r1
 8004cd0:	6039      	str	r1, [r7, #0]
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	414b      	adcs	r3, r1
 8004cd6:	607b      	str	r3, [r7, #4]
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	00cb      	lsls	r3, r1, #3
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cee:	4651      	mov	r1, sl
 8004cf0:	00ca      	lsls	r2, r1, #3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cfe:	464b      	mov	r3, r9
 8004d00:	460a      	mov	r2, r1
 8004d02:	eb42 0303 	adc.w	r3, r2, r3
 8004d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	663b      	str	r3, [r7, #96]	; 0x60
 8004d12:	667a      	str	r2, [r7, #100]	; 0x64
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d20:	4649      	mov	r1, r9
 8004d22:	008b      	lsls	r3, r1, #2
 8004d24:	4641      	mov	r1, r8
 8004d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d2a:	4641      	mov	r1, r8
 8004d2c:	008a      	lsls	r2, r1, #2
 8004d2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d32:	f7fb ff91 	bl	8000c58 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <UART_SetConfig+0x4e4>)
 8004d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	2164      	movs	r1, #100	; 0x64
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	3332      	adds	r3, #50	; 0x32
 8004d4e:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <UART_SetConfig+0x4e4>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	f003 020f 	and.w	r2, r3, #15
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4422      	add	r2, r4
 8004d62:	609a      	str	r2, [r3, #8]
}
 8004d64:	bf00      	nop
 8004d66:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d70:	51eb851f 	.word	0x51eb851f

08004d74 <__cvt>:
 8004d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	ec55 4b10 	vmov	r4, r5, d0
 8004d7c:	2d00      	cmp	r5, #0
 8004d7e:	460e      	mov	r6, r1
 8004d80:	4619      	mov	r1, r3
 8004d82:	462b      	mov	r3, r5
 8004d84:	bfbb      	ittet	lt
 8004d86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d8a:	461d      	movlt	r5, r3
 8004d8c:	2300      	movge	r3, #0
 8004d8e:	232d      	movlt	r3, #45	; 0x2d
 8004d90:	700b      	strb	r3, [r1, #0]
 8004d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d98:	4691      	mov	r9, r2
 8004d9a:	f023 0820 	bic.w	r8, r3, #32
 8004d9e:	bfbc      	itt	lt
 8004da0:	4622      	movlt	r2, r4
 8004da2:	4614      	movlt	r4, r2
 8004da4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004da8:	d005      	beq.n	8004db6 <__cvt+0x42>
 8004daa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dae:	d100      	bne.n	8004db2 <__cvt+0x3e>
 8004db0:	3601      	adds	r6, #1
 8004db2:	2102      	movs	r1, #2
 8004db4:	e000      	b.n	8004db8 <__cvt+0x44>
 8004db6:	2103      	movs	r1, #3
 8004db8:	ab03      	add	r3, sp, #12
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	ab02      	add	r3, sp, #8
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	ec45 4b10 	vmov	d0, r4, r5
 8004dc4:	4653      	mov	r3, sl
 8004dc6:	4632      	mov	r2, r6
 8004dc8:	f000 fe6a 	bl	8005aa0 <_dtoa_r>
 8004dcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	d102      	bne.n	8004dda <__cvt+0x66>
 8004dd4:	f019 0f01 	tst.w	r9, #1
 8004dd8:	d022      	beq.n	8004e20 <__cvt+0xac>
 8004dda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dde:	eb07 0906 	add.w	r9, r7, r6
 8004de2:	d110      	bne.n	8004e06 <__cvt+0x92>
 8004de4:	783b      	ldrb	r3, [r7, #0]
 8004de6:	2b30      	cmp	r3, #48	; 0x30
 8004de8:	d10a      	bne.n	8004e00 <__cvt+0x8c>
 8004dea:	2200      	movs	r2, #0
 8004dec:	2300      	movs	r3, #0
 8004dee:	4620      	mov	r0, r4
 8004df0:	4629      	mov	r1, r5
 8004df2:	f7fb fe71 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df6:	b918      	cbnz	r0, 8004e00 <__cvt+0x8c>
 8004df8:	f1c6 0601 	rsb	r6, r6, #1
 8004dfc:	f8ca 6000 	str.w	r6, [sl]
 8004e00:	f8da 3000 	ldr.w	r3, [sl]
 8004e04:	4499      	add	r9, r3
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	f7fb fe63 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e12:	b108      	cbz	r0, 8004e18 <__cvt+0xa4>
 8004e14:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e18:	2230      	movs	r2, #48	; 0x30
 8004e1a:	9b03      	ldr	r3, [sp, #12]
 8004e1c:	454b      	cmp	r3, r9
 8004e1e:	d307      	bcc.n	8004e30 <__cvt+0xbc>
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e24:	1bdb      	subs	r3, r3, r7
 8004e26:	4638      	mov	r0, r7
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	b004      	add	sp, #16
 8004e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e30:	1c59      	adds	r1, r3, #1
 8004e32:	9103      	str	r1, [sp, #12]
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e7f0      	b.n	8004e1a <__cvt+0xa6>

08004e38 <__exponent>:
 8004e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	bfb8      	it	lt
 8004e40:	4249      	neglt	r1, r1
 8004e42:	f803 2b02 	strb.w	r2, [r3], #2
 8004e46:	bfb4      	ite	lt
 8004e48:	222d      	movlt	r2, #45	; 0x2d
 8004e4a:	222b      	movge	r2, #43	; 0x2b
 8004e4c:	2909      	cmp	r1, #9
 8004e4e:	7042      	strb	r2, [r0, #1]
 8004e50:	dd2a      	ble.n	8004ea8 <__exponent+0x70>
 8004e52:	f10d 0207 	add.w	r2, sp, #7
 8004e56:	4617      	mov	r7, r2
 8004e58:	260a      	movs	r6, #10
 8004e5a:	4694      	mov	ip, r2
 8004e5c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e60:	fb06 1415 	mls	r4, r6, r5, r1
 8004e64:	3430      	adds	r4, #48	; 0x30
 8004e66:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	2c63      	cmp	r4, #99	; 0x63
 8004e6e:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e72:	4629      	mov	r1, r5
 8004e74:	dcf1      	bgt.n	8004e5a <__exponent+0x22>
 8004e76:	3130      	adds	r1, #48	; 0x30
 8004e78:	f1ac 0402 	sub.w	r4, ip, #2
 8004e7c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e80:	1c41      	adds	r1, r0, #1
 8004e82:	4622      	mov	r2, r4
 8004e84:	42ba      	cmp	r2, r7
 8004e86:	d30a      	bcc.n	8004e9e <__exponent+0x66>
 8004e88:	f10d 0209 	add.w	r2, sp, #9
 8004e8c:	eba2 020c 	sub.w	r2, r2, ip
 8004e90:	42bc      	cmp	r4, r7
 8004e92:	bf88      	it	hi
 8004e94:	2200      	movhi	r2, #0
 8004e96:	4413      	add	r3, r2
 8004e98:	1a18      	subs	r0, r3, r0
 8004e9a:	b003      	add	sp, #12
 8004e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e9e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004ea2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004ea6:	e7ed      	b.n	8004e84 <__exponent+0x4c>
 8004ea8:	2330      	movs	r3, #48	; 0x30
 8004eaa:	3130      	adds	r1, #48	; 0x30
 8004eac:	7083      	strb	r3, [r0, #2]
 8004eae:	70c1      	strb	r1, [r0, #3]
 8004eb0:	1d03      	adds	r3, r0, #4
 8004eb2:	e7f1      	b.n	8004e98 <__exponent+0x60>

08004eb4 <_printf_float>:
 8004eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb8:	ed2d 8b02 	vpush	{d8}
 8004ebc:	b08d      	sub	sp, #52	; 0x34
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	461f      	mov	r7, r3
 8004ec8:	4605      	mov	r5, r0
 8004eca:	f000 fce7 	bl	800589c <_localeconv_r>
 8004ece:	f8d0 a000 	ldr.w	sl, [r0]
 8004ed2:	4650      	mov	r0, sl
 8004ed4:	f7fb f9d4 	bl	8000280 <strlen>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	930a      	str	r3, [sp, #40]	; 0x28
 8004edc:	6823      	ldr	r3, [r4, #0]
 8004ede:	9305      	str	r3, [sp, #20]
 8004ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ee4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ee8:	3307      	adds	r3, #7
 8004eea:	f023 0307 	bic.w	r3, r3, #7
 8004eee:	f103 0208 	add.w	r2, r3, #8
 8004ef2:	f8c8 2000 	str.w	r2, [r8]
 8004ef6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004efa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004efe:	9307      	str	r3, [sp, #28]
 8004f00:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f04:	ee08 0a10 	vmov	s16, r0
 8004f08:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f10:	4b9e      	ldr	r3, [pc, #632]	; (800518c <_printf_float+0x2d8>)
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295
 8004f16:	f7fb fe11 	bl	8000b3c <__aeabi_dcmpun>
 8004f1a:	bb88      	cbnz	r0, 8004f80 <_printf_float+0xcc>
 8004f1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f20:	4b9a      	ldr	r3, [pc, #616]	; (800518c <_printf_float+0x2d8>)
 8004f22:	f04f 32ff 	mov.w	r2, #4294967295
 8004f26:	f7fb fdeb 	bl	8000b00 <__aeabi_dcmple>
 8004f2a:	bb48      	cbnz	r0, 8004f80 <_printf_float+0xcc>
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2300      	movs	r3, #0
 8004f30:	4640      	mov	r0, r8
 8004f32:	4649      	mov	r1, r9
 8004f34:	f7fb fdda 	bl	8000aec <__aeabi_dcmplt>
 8004f38:	b110      	cbz	r0, 8004f40 <_printf_float+0x8c>
 8004f3a:	232d      	movs	r3, #45	; 0x2d
 8004f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f40:	4a93      	ldr	r2, [pc, #588]	; (8005190 <_printf_float+0x2dc>)
 8004f42:	4b94      	ldr	r3, [pc, #592]	; (8005194 <_printf_float+0x2e0>)
 8004f44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f48:	bf94      	ite	ls
 8004f4a:	4690      	movls	r8, r2
 8004f4c:	4698      	movhi	r8, r3
 8004f4e:	2303      	movs	r3, #3
 8004f50:	6123      	str	r3, [r4, #16]
 8004f52:	9b05      	ldr	r3, [sp, #20]
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	f04f 0900 	mov.w	r9, #0
 8004f5e:	9700      	str	r7, [sp, #0]
 8004f60:	4633      	mov	r3, r6
 8004f62:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f64:	4621      	mov	r1, r4
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 f9da 	bl	8005320 <_printf_common>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	f040 8090 	bne.w	8005092 <_printf_float+0x1de>
 8004f72:	f04f 30ff 	mov.w	r0, #4294967295
 8004f76:	b00d      	add	sp, #52	; 0x34
 8004f78:	ecbd 8b02 	vpop	{d8}
 8004f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f80:	4642      	mov	r2, r8
 8004f82:	464b      	mov	r3, r9
 8004f84:	4640      	mov	r0, r8
 8004f86:	4649      	mov	r1, r9
 8004f88:	f7fb fdd8 	bl	8000b3c <__aeabi_dcmpun>
 8004f8c:	b140      	cbz	r0, 8004fa0 <_printf_float+0xec>
 8004f8e:	464b      	mov	r3, r9
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bfbc      	itt	lt
 8004f94:	232d      	movlt	r3, #45	; 0x2d
 8004f96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f9a:	4a7f      	ldr	r2, [pc, #508]	; (8005198 <_printf_float+0x2e4>)
 8004f9c:	4b7f      	ldr	r3, [pc, #508]	; (800519c <_printf_float+0x2e8>)
 8004f9e:	e7d1      	b.n	8004f44 <_printf_float+0x90>
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004fa6:	9206      	str	r2, [sp, #24]
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	d13f      	bne.n	800502c <_printf_float+0x178>
 8004fac:	2306      	movs	r3, #6
 8004fae:	6063      	str	r3, [r4, #4]
 8004fb0:	9b05      	ldr	r3, [sp, #20]
 8004fb2:	6861      	ldr	r1, [r4, #4]
 8004fb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fb8:	2300      	movs	r3, #0
 8004fba:	9303      	str	r3, [sp, #12]
 8004fbc:	ab0a      	add	r3, sp, #40	; 0x28
 8004fbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004fc2:	ab09      	add	r3, sp, #36	; 0x24
 8004fc4:	ec49 8b10 	vmov	d0, r8, r9
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	6022      	str	r2, [r4, #0]
 8004fcc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	f7ff fecf 	bl	8004d74 <__cvt>
 8004fd6:	9b06      	ldr	r3, [sp, #24]
 8004fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fda:	2b47      	cmp	r3, #71	; 0x47
 8004fdc:	4680      	mov	r8, r0
 8004fde:	d108      	bne.n	8004ff2 <_printf_float+0x13e>
 8004fe0:	1cc8      	adds	r0, r1, #3
 8004fe2:	db02      	blt.n	8004fea <_printf_float+0x136>
 8004fe4:	6863      	ldr	r3, [r4, #4]
 8004fe6:	4299      	cmp	r1, r3
 8004fe8:	dd41      	ble.n	800506e <_printf_float+0x1ba>
 8004fea:	f1ab 0302 	sub.w	r3, fp, #2
 8004fee:	fa5f fb83 	uxtb.w	fp, r3
 8004ff2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ff6:	d820      	bhi.n	800503a <_printf_float+0x186>
 8004ff8:	3901      	subs	r1, #1
 8004ffa:	465a      	mov	r2, fp
 8004ffc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005000:	9109      	str	r1, [sp, #36]	; 0x24
 8005002:	f7ff ff19 	bl	8004e38 <__exponent>
 8005006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005008:	1813      	adds	r3, r2, r0
 800500a:	2a01      	cmp	r2, #1
 800500c:	4681      	mov	r9, r0
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	dc02      	bgt.n	8005018 <_printf_float+0x164>
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	07d2      	lsls	r2, r2, #31
 8005016:	d501      	bpl.n	800501c <_printf_float+0x168>
 8005018:	3301      	adds	r3, #1
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005020:	2b00      	cmp	r3, #0
 8005022:	d09c      	beq.n	8004f5e <_printf_float+0xaa>
 8005024:	232d      	movs	r3, #45	; 0x2d
 8005026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800502a:	e798      	b.n	8004f5e <_printf_float+0xaa>
 800502c:	9a06      	ldr	r2, [sp, #24]
 800502e:	2a47      	cmp	r2, #71	; 0x47
 8005030:	d1be      	bne.n	8004fb0 <_printf_float+0xfc>
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1bc      	bne.n	8004fb0 <_printf_float+0xfc>
 8005036:	2301      	movs	r3, #1
 8005038:	e7b9      	b.n	8004fae <_printf_float+0xfa>
 800503a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800503e:	d118      	bne.n	8005072 <_printf_float+0x1be>
 8005040:	2900      	cmp	r1, #0
 8005042:	6863      	ldr	r3, [r4, #4]
 8005044:	dd0b      	ble.n	800505e <_printf_float+0x1aa>
 8005046:	6121      	str	r1, [r4, #16]
 8005048:	b913      	cbnz	r3, 8005050 <_printf_float+0x19c>
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	07d0      	lsls	r0, r2, #31
 800504e:	d502      	bpl.n	8005056 <_printf_float+0x1a2>
 8005050:	3301      	adds	r3, #1
 8005052:	440b      	add	r3, r1
 8005054:	6123      	str	r3, [r4, #16]
 8005056:	65a1      	str	r1, [r4, #88]	; 0x58
 8005058:	f04f 0900 	mov.w	r9, #0
 800505c:	e7de      	b.n	800501c <_printf_float+0x168>
 800505e:	b913      	cbnz	r3, 8005066 <_printf_float+0x1b2>
 8005060:	6822      	ldr	r2, [r4, #0]
 8005062:	07d2      	lsls	r2, r2, #31
 8005064:	d501      	bpl.n	800506a <_printf_float+0x1b6>
 8005066:	3302      	adds	r3, #2
 8005068:	e7f4      	b.n	8005054 <_printf_float+0x1a0>
 800506a:	2301      	movs	r3, #1
 800506c:	e7f2      	b.n	8005054 <_printf_float+0x1a0>
 800506e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005074:	4299      	cmp	r1, r3
 8005076:	db05      	blt.n	8005084 <_printf_float+0x1d0>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	6121      	str	r1, [r4, #16]
 800507c:	07d8      	lsls	r0, r3, #31
 800507e:	d5ea      	bpl.n	8005056 <_printf_float+0x1a2>
 8005080:	1c4b      	adds	r3, r1, #1
 8005082:	e7e7      	b.n	8005054 <_printf_float+0x1a0>
 8005084:	2900      	cmp	r1, #0
 8005086:	bfd4      	ite	le
 8005088:	f1c1 0202 	rsble	r2, r1, #2
 800508c:	2201      	movgt	r2, #1
 800508e:	4413      	add	r3, r2
 8005090:	e7e0      	b.n	8005054 <_printf_float+0x1a0>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	055a      	lsls	r2, r3, #21
 8005096:	d407      	bmi.n	80050a8 <_printf_float+0x1f4>
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	4642      	mov	r2, r8
 800509c:	4631      	mov	r1, r6
 800509e:	4628      	mov	r0, r5
 80050a0:	47b8      	blx	r7
 80050a2:	3001      	adds	r0, #1
 80050a4:	d12c      	bne.n	8005100 <_printf_float+0x24c>
 80050a6:	e764      	b.n	8004f72 <_printf_float+0xbe>
 80050a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050ac:	f240 80e0 	bls.w	8005270 <_printf_float+0x3bc>
 80050b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050b4:	2200      	movs	r2, #0
 80050b6:	2300      	movs	r3, #0
 80050b8:	f7fb fd0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d034      	beq.n	800512a <_printf_float+0x276>
 80050c0:	4a37      	ldr	r2, [pc, #220]	; (80051a0 <_printf_float+0x2ec>)
 80050c2:	2301      	movs	r3, #1
 80050c4:	4631      	mov	r1, r6
 80050c6:	4628      	mov	r0, r5
 80050c8:	47b8      	blx	r7
 80050ca:	3001      	adds	r0, #1
 80050cc:	f43f af51 	beq.w	8004f72 <_printf_float+0xbe>
 80050d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050d4:	429a      	cmp	r2, r3
 80050d6:	db02      	blt.n	80050de <_printf_float+0x22a>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	07d8      	lsls	r0, r3, #31
 80050dc:	d510      	bpl.n	8005100 <_printf_float+0x24c>
 80050de:	ee18 3a10 	vmov	r3, s16
 80050e2:	4652      	mov	r2, sl
 80050e4:	4631      	mov	r1, r6
 80050e6:	4628      	mov	r0, r5
 80050e8:	47b8      	blx	r7
 80050ea:	3001      	adds	r0, #1
 80050ec:	f43f af41 	beq.w	8004f72 <_printf_float+0xbe>
 80050f0:	f04f 0800 	mov.w	r8, #0
 80050f4:	f104 091a 	add.w	r9, r4, #26
 80050f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050fa:	3b01      	subs	r3, #1
 80050fc:	4543      	cmp	r3, r8
 80050fe:	dc09      	bgt.n	8005114 <_printf_float+0x260>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	079b      	lsls	r3, r3, #30
 8005104:	f100 8107 	bmi.w	8005316 <_printf_float+0x462>
 8005108:	68e0      	ldr	r0, [r4, #12]
 800510a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800510c:	4298      	cmp	r0, r3
 800510e:	bfb8      	it	lt
 8005110:	4618      	movlt	r0, r3
 8005112:	e730      	b.n	8004f76 <_printf_float+0xc2>
 8005114:	2301      	movs	r3, #1
 8005116:	464a      	mov	r2, r9
 8005118:	4631      	mov	r1, r6
 800511a:	4628      	mov	r0, r5
 800511c:	47b8      	blx	r7
 800511e:	3001      	adds	r0, #1
 8005120:	f43f af27 	beq.w	8004f72 <_printf_float+0xbe>
 8005124:	f108 0801 	add.w	r8, r8, #1
 8005128:	e7e6      	b.n	80050f8 <_printf_float+0x244>
 800512a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	dc39      	bgt.n	80051a4 <_printf_float+0x2f0>
 8005130:	4a1b      	ldr	r2, [pc, #108]	; (80051a0 <_printf_float+0x2ec>)
 8005132:	2301      	movs	r3, #1
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	f43f af19 	beq.w	8004f72 <_printf_float+0xbe>
 8005140:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005144:	4313      	orrs	r3, r2
 8005146:	d102      	bne.n	800514e <_printf_float+0x29a>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	07d9      	lsls	r1, r3, #31
 800514c:	d5d8      	bpl.n	8005100 <_printf_float+0x24c>
 800514e:	ee18 3a10 	vmov	r3, s16
 8005152:	4652      	mov	r2, sl
 8005154:	4631      	mov	r1, r6
 8005156:	4628      	mov	r0, r5
 8005158:	47b8      	blx	r7
 800515a:	3001      	adds	r0, #1
 800515c:	f43f af09 	beq.w	8004f72 <_printf_float+0xbe>
 8005160:	f04f 0900 	mov.w	r9, #0
 8005164:	f104 0a1a 	add.w	sl, r4, #26
 8005168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800516a:	425b      	negs	r3, r3
 800516c:	454b      	cmp	r3, r9
 800516e:	dc01      	bgt.n	8005174 <_printf_float+0x2c0>
 8005170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005172:	e792      	b.n	800509a <_printf_float+0x1e6>
 8005174:	2301      	movs	r3, #1
 8005176:	4652      	mov	r2, sl
 8005178:	4631      	mov	r1, r6
 800517a:	4628      	mov	r0, r5
 800517c:	47b8      	blx	r7
 800517e:	3001      	adds	r0, #1
 8005180:	f43f aef7 	beq.w	8004f72 <_printf_float+0xbe>
 8005184:	f109 0901 	add.w	r9, r9, #1
 8005188:	e7ee      	b.n	8005168 <_printf_float+0x2b4>
 800518a:	bf00      	nop
 800518c:	7fefffff 	.word	0x7fefffff
 8005190:	08008a3c 	.word	0x08008a3c
 8005194:	08008a40 	.word	0x08008a40
 8005198:	08008a44 	.word	0x08008a44
 800519c:	08008a48 	.word	0x08008a48
 80051a0:	08008a4c 	.word	0x08008a4c
 80051a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051a8:	429a      	cmp	r2, r3
 80051aa:	bfa8      	it	ge
 80051ac:	461a      	movge	r2, r3
 80051ae:	2a00      	cmp	r2, #0
 80051b0:	4691      	mov	r9, r2
 80051b2:	dc37      	bgt.n	8005224 <_printf_float+0x370>
 80051b4:	f04f 0b00 	mov.w	fp, #0
 80051b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051bc:	f104 021a 	add.w	r2, r4, #26
 80051c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051c2:	9305      	str	r3, [sp, #20]
 80051c4:	eba3 0309 	sub.w	r3, r3, r9
 80051c8:	455b      	cmp	r3, fp
 80051ca:	dc33      	bgt.n	8005234 <_printf_float+0x380>
 80051cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051d0:	429a      	cmp	r2, r3
 80051d2:	db3b      	blt.n	800524c <_printf_float+0x398>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	07da      	lsls	r2, r3, #31
 80051d8:	d438      	bmi.n	800524c <_printf_float+0x398>
 80051da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051de:	eba2 0903 	sub.w	r9, r2, r3
 80051e2:	9b05      	ldr	r3, [sp, #20]
 80051e4:	1ad2      	subs	r2, r2, r3
 80051e6:	4591      	cmp	r9, r2
 80051e8:	bfa8      	it	ge
 80051ea:	4691      	movge	r9, r2
 80051ec:	f1b9 0f00 	cmp.w	r9, #0
 80051f0:	dc35      	bgt.n	800525e <_printf_float+0x3aa>
 80051f2:	f04f 0800 	mov.w	r8, #0
 80051f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051fa:	f104 0a1a 	add.w	sl, r4, #26
 80051fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	eba3 0309 	sub.w	r3, r3, r9
 8005208:	4543      	cmp	r3, r8
 800520a:	f77f af79 	ble.w	8005100 <_printf_float+0x24c>
 800520e:	2301      	movs	r3, #1
 8005210:	4652      	mov	r2, sl
 8005212:	4631      	mov	r1, r6
 8005214:	4628      	mov	r0, r5
 8005216:	47b8      	blx	r7
 8005218:	3001      	adds	r0, #1
 800521a:	f43f aeaa 	beq.w	8004f72 <_printf_float+0xbe>
 800521e:	f108 0801 	add.w	r8, r8, #1
 8005222:	e7ec      	b.n	80051fe <_printf_float+0x34a>
 8005224:	4613      	mov	r3, r2
 8005226:	4631      	mov	r1, r6
 8005228:	4642      	mov	r2, r8
 800522a:	4628      	mov	r0, r5
 800522c:	47b8      	blx	r7
 800522e:	3001      	adds	r0, #1
 8005230:	d1c0      	bne.n	80051b4 <_printf_float+0x300>
 8005232:	e69e      	b.n	8004f72 <_printf_float+0xbe>
 8005234:	2301      	movs	r3, #1
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	9205      	str	r2, [sp, #20]
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f ae97 	beq.w	8004f72 <_printf_float+0xbe>
 8005244:	9a05      	ldr	r2, [sp, #20]
 8005246:	f10b 0b01 	add.w	fp, fp, #1
 800524a:	e7b9      	b.n	80051c0 <_printf_float+0x30c>
 800524c:	ee18 3a10 	vmov	r3, s16
 8005250:	4652      	mov	r2, sl
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	47b8      	blx	r7
 8005258:	3001      	adds	r0, #1
 800525a:	d1be      	bne.n	80051da <_printf_float+0x326>
 800525c:	e689      	b.n	8004f72 <_printf_float+0xbe>
 800525e:	9a05      	ldr	r2, [sp, #20]
 8005260:	464b      	mov	r3, r9
 8005262:	4442      	add	r2, r8
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	d1c1      	bne.n	80051f2 <_printf_float+0x33e>
 800526e:	e680      	b.n	8004f72 <_printf_float+0xbe>
 8005270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005272:	2a01      	cmp	r2, #1
 8005274:	dc01      	bgt.n	800527a <_printf_float+0x3c6>
 8005276:	07db      	lsls	r3, r3, #31
 8005278:	d53a      	bpl.n	80052f0 <_printf_float+0x43c>
 800527a:	2301      	movs	r3, #1
 800527c:	4642      	mov	r2, r8
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	f43f ae74 	beq.w	8004f72 <_printf_float+0xbe>
 800528a:	ee18 3a10 	vmov	r3, s16
 800528e:	4652      	mov	r2, sl
 8005290:	4631      	mov	r1, r6
 8005292:	4628      	mov	r0, r5
 8005294:	47b8      	blx	r7
 8005296:	3001      	adds	r0, #1
 8005298:	f43f ae6b 	beq.w	8004f72 <_printf_float+0xbe>
 800529c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052a0:	2200      	movs	r2, #0
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80052a8:	f7fb fc16 	bl	8000ad8 <__aeabi_dcmpeq>
 80052ac:	b9d8      	cbnz	r0, 80052e6 <_printf_float+0x432>
 80052ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80052b2:	f108 0201 	add.w	r2, r8, #1
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	d10e      	bne.n	80052de <_printf_float+0x42a>
 80052c0:	e657      	b.n	8004f72 <_printf_float+0xbe>
 80052c2:	2301      	movs	r3, #1
 80052c4:	4652      	mov	r2, sl
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	f43f ae50 	beq.w	8004f72 <_printf_float+0xbe>
 80052d2:	f108 0801 	add.w	r8, r8, #1
 80052d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d8:	3b01      	subs	r3, #1
 80052da:	4543      	cmp	r3, r8
 80052dc:	dcf1      	bgt.n	80052c2 <_printf_float+0x40e>
 80052de:	464b      	mov	r3, r9
 80052e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052e4:	e6da      	b.n	800509c <_printf_float+0x1e8>
 80052e6:	f04f 0800 	mov.w	r8, #0
 80052ea:	f104 0a1a 	add.w	sl, r4, #26
 80052ee:	e7f2      	b.n	80052d6 <_printf_float+0x422>
 80052f0:	2301      	movs	r3, #1
 80052f2:	4642      	mov	r2, r8
 80052f4:	e7df      	b.n	80052b6 <_printf_float+0x402>
 80052f6:	2301      	movs	r3, #1
 80052f8:	464a      	mov	r2, r9
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	f43f ae36 	beq.w	8004f72 <_printf_float+0xbe>
 8005306:	f108 0801 	add.w	r8, r8, #1
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800530e:	1a5b      	subs	r3, r3, r1
 8005310:	4543      	cmp	r3, r8
 8005312:	dcf0      	bgt.n	80052f6 <_printf_float+0x442>
 8005314:	e6f8      	b.n	8005108 <_printf_float+0x254>
 8005316:	f04f 0800 	mov.w	r8, #0
 800531a:	f104 0919 	add.w	r9, r4, #25
 800531e:	e7f4      	b.n	800530a <_printf_float+0x456>

08005320 <_printf_common>:
 8005320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005324:	4616      	mov	r6, r2
 8005326:	4699      	mov	r9, r3
 8005328:	688a      	ldr	r2, [r1, #8]
 800532a:	690b      	ldr	r3, [r1, #16]
 800532c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005330:	4293      	cmp	r3, r2
 8005332:	bfb8      	it	lt
 8005334:	4613      	movlt	r3, r2
 8005336:	6033      	str	r3, [r6, #0]
 8005338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800533c:	4607      	mov	r7, r0
 800533e:	460c      	mov	r4, r1
 8005340:	b10a      	cbz	r2, 8005346 <_printf_common+0x26>
 8005342:	3301      	adds	r3, #1
 8005344:	6033      	str	r3, [r6, #0]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	0699      	lsls	r1, r3, #26
 800534a:	bf42      	ittt	mi
 800534c:	6833      	ldrmi	r3, [r6, #0]
 800534e:	3302      	addmi	r3, #2
 8005350:	6033      	strmi	r3, [r6, #0]
 8005352:	6825      	ldr	r5, [r4, #0]
 8005354:	f015 0506 	ands.w	r5, r5, #6
 8005358:	d106      	bne.n	8005368 <_printf_common+0x48>
 800535a:	f104 0a19 	add.w	sl, r4, #25
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	6832      	ldr	r2, [r6, #0]
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	42ab      	cmp	r3, r5
 8005366:	dc26      	bgt.n	80053b6 <_printf_common+0x96>
 8005368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800536c:	1e13      	subs	r3, r2, #0
 800536e:	6822      	ldr	r2, [r4, #0]
 8005370:	bf18      	it	ne
 8005372:	2301      	movne	r3, #1
 8005374:	0692      	lsls	r2, r2, #26
 8005376:	d42b      	bmi.n	80053d0 <_printf_common+0xb0>
 8005378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800537c:	4649      	mov	r1, r9
 800537e:	4638      	mov	r0, r7
 8005380:	47c0      	blx	r8
 8005382:	3001      	adds	r0, #1
 8005384:	d01e      	beq.n	80053c4 <_printf_common+0xa4>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	6922      	ldr	r2, [r4, #16]
 800538a:	f003 0306 	and.w	r3, r3, #6
 800538e:	2b04      	cmp	r3, #4
 8005390:	bf02      	ittt	eq
 8005392:	68e5      	ldreq	r5, [r4, #12]
 8005394:	6833      	ldreq	r3, [r6, #0]
 8005396:	1aed      	subeq	r5, r5, r3
 8005398:	68a3      	ldr	r3, [r4, #8]
 800539a:	bf0c      	ite	eq
 800539c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053a0:	2500      	movne	r5, #0
 80053a2:	4293      	cmp	r3, r2
 80053a4:	bfc4      	itt	gt
 80053a6:	1a9b      	subgt	r3, r3, r2
 80053a8:	18ed      	addgt	r5, r5, r3
 80053aa:	2600      	movs	r6, #0
 80053ac:	341a      	adds	r4, #26
 80053ae:	42b5      	cmp	r5, r6
 80053b0:	d11a      	bne.n	80053e8 <_printf_common+0xc8>
 80053b2:	2000      	movs	r0, #0
 80053b4:	e008      	b.n	80053c8 <_printf_common+0xa8>
 80053b6:	2301      	movs	r3, #1
 80053b8:	4652      	mov	r2, sl
 80053ba:	4649      	mov	r1, r9
 80053bc:	4638      	mov	r0, r7
 80053be:	47c0      	blx	r8
 80053c0:	3001      	adds	r0, #1
 80053c2:	d103      	bne.n	80053cc <_printf_common+0xac>
 80053c4:	f04f 30ff 	mov.w	r0, #4294967295
 80053c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053cc:	3501      	adds	r5, #1
 80053ce:	e7c6      	b.n	800535e <_printf_common+0x3e>
 80053d0:	18e1      	adds	r1, r4, r3
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	2030      	movs	r0, #48	; 0x30
 80053d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053da:	4422      	add	r2, r4
 80053dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053e4:	3302      	adds	r3, #2
 80053e6:	e7c7      	b.n	8005378 <_printf_common+0x58>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4622      	mov	r2, r4
 80053ec:	4649      	mov	r1, r9
 80053ee:	4638      	mov	r0, r7
 80053f0:	47c0      	blx	r8
 80053f2:	3001      	adds	r0, #1
 80053f4:	d0e6      	beq.n	80053c4 <_printf_common+0xa4>
 80053f6:	3601      	adds	r6, #1
 80053f8:	e7d9      	b.n	80053ae <_printf_common+0x8e>
	...

080053fc <_printf_i>:
 80053fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	7e0f      	ldrb	r7, [r1, #24]
 8005402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005404:	2f78      	cmp	r7, #120	; 0x78
 8005406:	4691      	mov	r9, r2
 8005408:	4680      	mov	r8, r0
 800540a:	460c      	mov	r4, r1
 800540c:	469a      	mov	sl, r3
 800540e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005412:	d807      	bhi.n	8005424 <_printf_i+0x28>
 8005414:	2f62      	cmp	r7, #98	; 0x62
 8005416:	d80a      	bhi.n	800542e <_printf_i+0x32>
 8005418:	2f00      	cmp	r7, #0
 800541a:	f000 80d4 	beq.w	80055c6 <_printf_i+0x1ca>
 800541e:	2f58      	cmp	r7, #88	; 0x58
 8005420:	f000 80c0 	beq.w	80055a4 <_printf_i+0x1a8>
 8005424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800542c:	e03a      	b.n	80054a4 <_printf_i+0xa8>
 800542e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005432:	2b15      	cmp	r3, #21
 8005434:	d8f6      	bhi.n	8005424 <_printf_i+0x28>
 8005436:	a101      	add	r1, pc, #4	; (adr r1, 800543c <_printf_i+0x40>)
 8005438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800543c:	08005495 	.word	0x08005495
 8005440:	080054a9 	.word	0x080054a9
 8005444:	08005425 	.word	0x08005425
 8005448:	08005425 	.word	0x08005425
 800544c:	08005425 	.word	0x08005425
 8005450:	08005425 	.word	0x08005425
 8005454:	080054a9 	.word	0x080054a9
 8005458:	08005425 	.word	0x08005425
 800545c:	08005425 	.word	0x08005425
 8005460:	08005425 	.word	0x08005425
 8005464:	08005425 	.word	0x08005425
 8005468:	080055ad 	.word	0x080055ad
 800546c:	080054d5 	.word	0x080054d5
 8005470:	08005567 	.word	0x08005567
 8005474:	08005425 	.word	0x08005425
 8005478:	08005425 	.word	0x08005425
 800547c:	080055cf 	.word	0x080055cf
 8005480:	08005425 	.word	0x08005425
 8005484:	080054d5 	.word	0x080054d5
 8005488:	08005425 	.word	0x08005425
 800548c:	08005425 	.word	0x08005425
 8005490:	0800556f 	.word	0x0800556f
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	1d1a      	adds	r2, r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	602a      	str	r2, [r5, #0]
 800549c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054a4:	2301      	movs	r3, #1
 80054a6:	e09f      	b.n	80055e8 <_printf_i+0x1ec>
 80054a8:	6820      	ldr	r0, [r4, #0]
 80054aa:	682b      	ldr	r3, [r5, #0]
 80054ac:	0607      	lsls	r7, r0, #24
 80054ae:	f103 0104 	add.w	r1, r3, #4
 80054b2:	6029      	str	r1, [r5, #0]
 80054b4:	d501      	bpl.n	80054ba <_printf_i+0xbe>
 80054b6:	681e      	ldr	r6, [r3, #0]
 80054b8:	e003      	b.n	80054c2 <_printf_i+0xc6>
 80054ba:	0646      	lsls	r6, r0, #25
 80054bc:	d5fb      	bpl.n	80054b6 <_printf_i+0xba>
 80054be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054c2:	2e00      	cmp	r6, #0
 80054c4:	da03      	bge.n	80054ce <_printf_i+0xd2>
 80054c6:	232d      	movs	r3, #45	; 0x2d
 80054c8:	4276      	negs	r6, r6
 80054ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ce:	485a      	ldr	r0, [pc, #360]	; (8005638 <_printf_i+0x23c>)
 80054d0:	230a      	movs	r3, #10
 80054d2:	e012      	b.n	80054fa <_printf_i+0xfe>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	6820      	ldr	r0, [r4, #0]
 80054d8:	1d19      	adds	r1, r3, #4
 80054da:	6029      	str	r1, [r5, #0]
 80054dc:	0605      	lsls	r5, r0, #24
 80054de:	d501      	bpl.n	80054e4 <_printf_i+0xe8>
 80054e0:	681e      	ldr	r6, [r3, #0]
 80054e2:	e002      	b.n	80054ea <_printf_i+0xee>
 80054e4:	0641      	lsls	r1, r0, #25
 80054e6:	d5fb      	bpl.n	80054e0 <_printf_i+0xe4>
 80054e8:	881e      	ldrh	r6, [r3, #0]
 80054ea:	4853      	ldr	r0, [pc, #332]	; (8005638 <_printf_i+0x23c>)
 80054ec:	2f6f      	cmp	r7, #111	; 0x6f
 80054ee:	bf0c      	ite	eq
 80054f0:	2308      	moveq	r3, #8
 80054f2:	230a      	movne	r3, #10
 80054f4:	2100      	movs	r1, #0
 80054f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054fa:	6865      	ldr	r5, [r4, #4]
 80054fc:	60a5      	str	r5, [r4, #8]
 80054fe:	2d00      	cmp	r5, #0
 8005500:	bfa2      	ittt	ge
 8005502:	6821      	ldrge	r1, [r4, #0]
 8005504:	f021 0104 	bicge.w	r1, r1, #4
 8005508:	6021      	strge	r1, [r4, #0]
 800550a:	b90e      	cbnz	r6, 8005510 <_printf_i+0x114>
 800550c:	2d00      	cmp	r5, #0
 800550e:	d04b      	beq.n	80055a8 <_printf_i+0x1ac>
 8005510:	4615      	mov	r5, r2
 8005512:	fbb6 f1f3 	udiv	r1, r6, r3
 8005516:	fb03 6711 	mls	r7, r3, r1, r6
 800551a:	5dc7      	ldrb	r7, [r0, r7]
 800551c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005520:	4637      	mov	r7, r6
 8005522:	42bb      	cmp	r3, r7
 8005524:	460e      	mov	r6, r1
 8005526:	d9f4      	bls.n	8005512 <_printf_i+0x116>
 8005528:	2b08      	cmp	r3, #8
 800552a:	d10b      	bne.n	8005544 <_printf_i+0x148>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	07de      	lsls	r6, r3, #31
 8005530:	d508      	bpl.n	8005544 <_printf_i+0x148>
 8005532:	6923      	ldr	r3, [r4, #16]
 8005534:	6861      	ldr	r1, [r4, #4]
 8005536:	4299      	cmp	r1, r3
 8005538:	bfde      	ittt	le
 800553a:	2330      	movle	r3, #48	; 0x30
 800553c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005540:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005544:	1b52      	subs	r2, r2, r5
 8005546:	6122      	str	r2, [r4, #16]
 8005548:	f8cd a000 	str.w	sl, [sp]
 800554c:	464b      	mov	r3, r9
 800554e:	aa03      	add	r2, sp, #12
 8005550:	4621      	mov	r1, r4
 8005552:	4640      	mov	r0, r8
 8005554:	f7ff fee4 	bl	8005320 <_printf_common>
 8005558:	3001      	adds	r0, #1
 800555a:	d14a      	bne.n	80055f2 <_printf_i+0x1f6>
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	b004      	add	sp, #16
 8005562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	f043 0320 	orr.w	r3, r3, #32
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	4833      	ldr	r0, [pc, #204]	; (800563c <_printf_i+0x240>)
 8005570:	2778      	movs	r7, #120	; 0x78
 8005572:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	6829      	ldr	r1, [r5, #0]
 800557a:	061f      	lsls	r7, r3, #24
 800557c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005580:	d402      	bmi.n	8005588 <_printf_i+0x18c>
 8005582:	065f      	lsls	r7, r3, #25
 8005584:	bf48      	it	mi
 8005586:	b2b6      	uxthmi	r6, r6
 8005588:	07df      	lsls	r7, r3, #31
 800558a:	bf48      	it	mi
 800558c:	f043 0320 	orrmi.w	r3, r3, #32
 8005590:	6029      	str	r1, [r5, #0]
 8005592:	bf48      	it	mi
 8005594:	6023      	strmi	r3, [r4, #0]
 8005596:	b91e      	cbnz	r6, 80055a0 <_printf_i+0x1a4>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	f023 0320 	bic.w	r3, r3, #32
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	2310      	movs	r3, #16
 80055a2:	e7a7      	b.n	80054f4 <_printf_i+0xf8>
 80055a4:	4824      	ldr	r0, [pc, #144]	; (8005638 <_printf_i+0x23c>)
 80055a6:	e7e4      	b.n	8005572 <_printf_i+0x176>
 80055a8:	4615      	mov	r5, r2
 80055aa:	e7bd      	b.n	8005528 <_printf_i+0x12c>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	6826      	ldr	r6, [r4, #0]
 80055b0:	6961      	ldr	r1, [r4, #20]
 80055b2:	1d18      	adds	r0, r3, #4
 80055b4:	6028      	str	r0, [r5, #0]
 80055b6:	0635      	lsls	r5, r6, #24
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	d501      	bpl.n	80055c0 <_printf_i+0x1c4>
 80055bc:	6019      	str	r1, [r3, #0]
 80055be:	e002      	b.n	80055c6 <_printf_i+0x1ca>
 80055c0:	0670      	lsls	r0, r6, #25
 80055c2:	d5fb      	bpl.n	80055bc <_printf_i+0x1c0>
 80055c4:	8019      	strh	r1, [r3, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	6123      	str	r3, [r4, #16]
 80055ca:	4615      	mov	r5, r2
 80055cc:	e7bc      	b.n	8005548 <_printf_i+0x14c>
 80055ce:	682b      	ldr	r3, [r5, #0]
 80055d0:	1d1a      	adds	r2, r3, #4
 80055d2:	602a      	str	r2, [r5, #0]
 80055d4:	681d      	ldr	r5, [r3, #0]
 80055d6:	6862      	ldr	r2, [r4, #4]
 80055d8:	2100      	movs	r1, #0
 80055da:	4628      	mov	r0, r5
 80055dc:	f7fa fe00 	bl	80001e0 <memchr>
 80055e0:	b108      	cbz	r0, 80055e6 <_printf_i+0x1ea>
 80055e2:	1b40      	subs	r0, r0, r5
 80055e4:	6060      	str	r0, [r4, #4]
 80055e6:	6863      	ldr	r3, [r4, #4]
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	2300      	movs	r3, #0
 80055ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055f0:	e7aa      	b.n	8005548 <_printf_i+0x14c>
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	462a      	mov	r2, r5
 80055f6:	4649      	mov	r1, r9
 80055f8:	4640      	mov	r0, r8
 80055fa:	47d0      	blx	sl
 80055fc:	3001      	adds	r0, #1
 80055fe:	d0ad      	beq.n	800555c <_printf_i+0x160>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	079b      	lsls	r3, r3, #30
 8005604:	d413      	bmi.n	800562e <_printf_i+0x232>
 8005606:	68e0      	ldr	r0, [r4, #12]
 8005608:	9b03      	ldr	r3, [sp, #12]
 800560a:	4298      	cmp	r0, r3
 800560c:	bfb8      	it	lt
 800560e:	4618      	movlt	r0, r3
 8005610:	e7a6      	b.n	8005560 <_printf_i+0x164>
 8005612:	2301      	movs	r3, #1
 8005614:	4632      	mov	r2, r6
 8005616:	4649      	mov	r1, r9
 8005618:	4640      	mov	r0, r8
 800561a:	47d0      	blx	sl
 800561c:	3001      	adds	r0, #1
 800561e:	d09d      	beq.n	800555c <_printf_i+0x160>
 8005620:	3501      	adds	r5, #1
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	9903      	ldr	r1, [sp, #12]
 8005626:	1a5b      	subs	r3, r3, r1
 8005628:	42ab      	cmp	r3, r5
 800562a:	dcf2      	bgt.n	8005612 <_printf_i+0x216>
 800562c:	e7eb      	b.n	8005606 <_printf_i+0x20a>
 800562e:	2500      	movs	r5, #0
 8005630:	f104 0619 	add.w	r6, r4, #25
 8005634:	e7f5      	b.n	8005622 <_printf_i+0x226>
 8005636:	bf00      	nop
 8005638:	08008a4e 	.word	0x08008a4e
 800563c:	08008a5f 	.word	0x08008a5f

08005640 <std>:
 8005640:	2300      	movs	r3, #0
 8005642:	b510      	push	{r4, lr}
 8005644:	4604      	mov	r4, r0
 8005646:	e9c0 3300 	strd	r3, r3, [r0]
 800564a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800564e:	6083      	str	r3, [r0, #8]
 8005650:	8181      	strh	r1, [r0, #12]
 8005652:	6643      	str	r3, [r0, #100]	; 0x64
 8005654:	81c2      	strh	r2, [r0, #14]
 8005656:	6183      	str	r3, [r0, #24]
 8005658:	4619      	mov	r1, r3
 800565a:	2208      	movs	r2, #8
 800565c:	305c      	adds	r0, #92	; 0x5c
 800565e:	f000 f914 	bl	800588a <memset>
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <std+0x58>)
 8005664:	6263      	str	r3, [r4, #36]	; 0x24
 8005666:	4b0d      	ldr	r3, [pc, #52]	; (800569c <std+0x5c>)
 8005668:	62a3      	str	r3, [r4, #40]	; 0x28
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <std+0x60>)
 800566c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800566e:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <std+0x64>)
 8005670:	6323      	str	r3, [r4, #48]	; 0x30
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <std+0x68>)
 8005674:	6224      	str	r4, [r4, #32]
 8005676:	429c      	cmp	r4, r3
 8005678:	d006      	beq.n	8005688 <std+0x48>
 800567a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800567e:	4294      	cmp	r4, r2
 8005680:	d002      	beq.n	8005688 <std+0x48>
 8005682:	33d0      	adds	r3, #208	; 0xd0
 8005684:	429c      	cmp	r4, r3
 8005686:	d105      	bne.n	8005694 <std+0x54>
 8005688:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800568c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005690:	f000 b978 	b.w	8005984 <__retarget_lock_init_recursive>
 8005694:	bd10      	pop	{r4, pc}
 8005696:	bf00      	nop
 8005698:	08005805 	.word	0x08005805
 800569c:	08005827 	.word	0x08005827
 80056a0:	0800585f 	.word	0x0800585f
 80056a4:	08005883 	.word	0x08005883
 80056a8:	2000031c 	.word	0x2000031c

080056ac <stdio_exit_handler>:
 80056ac:	4a02      	ldr	r2, [pc, #8]	; (80056b8 <stdio_exit_handler+0xc>)
 80056ae:	4903      	ldr	r1, [pc, #12]	; (80056bc <stdio_exit_handler+0x10>)
 80056b0:	4803      	ldr	r0, [pc, #12]	; (80056c0 <stdio_exit_handler+0x14>)
 80056b2:	f000 b869 	b.w	8005788 <_fwalk_sglue>
 80056b6:	bf00      	nop
 80056b8:	2000000c 	.word	0x2000000c
 80056bc:	08007339 	.word	0x08007339
 80056c0:	20000018 	.word	0x20000018

080056c4 <cleanup_stdio>:
 80056c4:	6841      	ldr	r1, [r0, #4]
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <cleanup_stdio+0x34>)
 80056c8:	4299      	cmp	r1, r3
 80056ca:	b510      	push	{r4, lr}
 80056cc:	4604      	mov	r4, r0
 80056ce:	d001      	beq.n	80056d4 <cleanup_stdio+0x10>
 80056d0:	f001 fe32 	bl	8007338 <_fflush_r>
 80056d4:	68a1      	ldr	r1, [r4, #8]
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <cleanup_stdio+0x38>)
 80056d8:	4299      	cmp	r1, r3
 80056da:	d002      	beq.n	80056e2 <cleanup_stdio+0x1e>
 80056dc:	4620      	mov	r0, r4
 80056de:	f001 fe2b 	bl	8007338 <_fflush_r>
 80056e2:	68e1      	ldr	r1, [r4, #12]
 80056e4:	4b06      	ldr	r3, [pc, #24]	; (8005700 <cleanup_stdio+0x3c>)
 80056e6:	4299      	cmp	r1, r3
 80056e8:	d004      	beq.n	80056f4 <cleanup_stdio+0x30>
 80056ea:	4620      	mov	r0, r4
 80056ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f0:	f001 be22 	b.w	8007338 <_fflush_r>
 80056f4:	bd10      	pop	{r4, pc}
 80056f6:	bf00      	nop
 80056f8:	2000031c 	.word	0x2000031c
 80056fc:	20000384 	.word	0x20000384
 8005700:	200003ec 	.word	0x200003ec

08005704 <global_stdio_init.part.0>:
 8005704:	b510      	push	{r4, lr}
 8005706:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <global_stdio_init.part.0+0x30>)
 8005708:	4c0b      	ldr	r4, [pc, #44]	; (8005738 <global_stdio_init.part.0+0x34>)
 800570a:	4a0c      	ldr	r2, [pc, #48]	; (800573c <global_stdio_init.part.0+0x38>)
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	4620      	mov	r0, r4
 8005710:	2200      	movs	r2, #0
 8005712:	2104      	movs	r1, #4
 8005714:	f7ff ff94 	bl	8005640 <std>
 8005718:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800571c:	2201      	movs	r2, #1
 800571e:	2109      	movs	r1, #9
 8005720:	f7ff ff8e 	bl	8005640 <std>
 8005724:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005728:	2202      	movs	r2, #2
 800572a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800572e:	2112      	movs	r1, #18
 8005730:	f7ff bf86 	b.w	8005640 <std>
 8005734:	20000454 	.word	0x20000454
 8005738:	2000031c 	.word	0x2000031c
 800573c:	080056ad 	.word	0x080056ad

08005740 <__sfp_lock_acquire>:
 8005740:	4801      	ldr	r0, [pc, #4]	; (8005748 <__sfp_lock_acquire+0x8>)
 8005742:	f000 b920 	b.w	8005986 <__retarget_lock_acquire_recursive>
 8005746:	bf00      	nop
 8005748:	2000045d 	.word	0x2000045d

0800574c <__sfp_lock_release>:
 800574c:	4801      	ldr	r0, [pc, #4]	; (8005754 <__sfp_lock_release+0x8>)
 800574e:	f000 b91b 	b.w	8005988 <__retarget_lock_release_recursive>
 8005752:	bf00      	nop
 8005754:	2000045d 	.word	0x2000045d

08005758 <__sinit>:
 8005758:	b510      	push	{r4, lr}
 800575a:	4604      	mov	r4, r0
 800575c:	f7ff fff0 	bl	8005740 <__sfp_lock_acquire>
 8005760:	6a23      	ldr	r3, [r4, #32]
 8005762:	b11b      	cbz	r3, 800576c <__sinit+0x14>
 8005764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005768:	f7ff bff0 	b.w	800574c <__sfp_lock_release>
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <__sinit+0x28>)
 800576e:	6223      	str	r3, [r4, #32]
 8005770:	4b04      	ldr	r3, [pc, #16]	; (8005784 <__sinit+0x2c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f5      	bne.n	8005764 <__sinit+0xc>
 8005778:	f7ff ffc4 	bl	8005704 <global_stdio_init.part.0>
 800577c:	e7f2      	b.n	8005764 <__sinit+0xc>
 800577e:	bf00      	nop
 8005780:	080056c5 	.word	0x080056c5
 8005784:	20000454 	.word	0x20000454

08005788 <_fwalk_sglue>:
 8005788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800578c:	4607      	mov	r7, r0
 800578e:	4688      	mov	r8, r1
 8005790:	4614      	mov	r4, r2
 8005792:	2600      	movs	r6, #0
 8005794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005798:	f1b9 0901 	subs.w	r9, r9, #1
 800579c:	d505      	bpl.n	80057aa <_fwalk_sglue+0x22>
 800579e:	6824      	ldr	r4, [r4, #0]
 80057a0:	2c00      	cmp	r4, #0
 80057a2:	d1f7      	bne.n	8005794 <_fwalk_sglue+0xc>
 80057a4:	4630      	mov	r0, r6
 80057a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d907      	bls.n	80057c0 <_fwalk_sglue+0x38>
 80057b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057b4:	3301      	adds	r3, #1
 80057b6:	d003      	beq.n	80057c0 <_fwalk_sglue+0x38>
 80057b8:	4629      	mov	r1, r5
 80057ba:	4638      	mov	r0, r7
 80057bc:	47c0      	blx	r8
 80057be:	4306      	orrs	r6, r0
 80057c0:	3568      	adds	r5, #104	; 0x68
 80057c2:	e7e9      	b.n	8005798 <_fwalk_sglue+0x10>

080057c4 <siprintf>:
 80057c4:	b40e      	push	{r1, r2, r3}
 80057c6:	b500      	push	{lr}
 80057c8:	b09c      	sub	sp, #112	; 0x70
 80057ca:	ab1d      	add	r3, sp, #116	; 0x74
 80057cc:	9002      	str	r0, [sp, #8]
 80057ce:	9006      	str	r0, [sp, #24]
 80057d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057d4:	4809      	ldr	r0, [pc, #36]	; (80057fc <siprintf+0x38>)
 80057d6:	9107      	str	r1, [sp, #28]
 80057d8:	9104      	str	r1, [sp, #16]
 80057da:	4909      	ldr	r1, [pc, #36]	; (8005800 <siprintf+0x3c>)
 80057dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e0:	9105      	str	r1, [sp, #20]
 80057e2:	6800      	ldr	r0, [r0, #0]
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	a902      	add	r1, sp, #8
 80057e8:	f001 fc22 	bl	8007030 <_svfiprintf_r>
 80057ec:	9b02      	ldr	r3, [sp, #8]
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	b01c      	add	sp, #112	; 0x70
 80057f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f8:	b003      	add	sp, #12
 80057fa:	4770      	bx	lr
 80057fc:	20000064 	.word	0x20000064
 8005800:	ffff0208 	.word	0xffff0208

08005804 <__sread>:
 8005804:	b510      	push	{r4, lr}
 8005806:	460c      	mov	r4, r1
 8005808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580c:	f000 f86c 	bl	80058e8 <_read_r>
 8005810:	2800      	cmp	r0, #0
 8005812:	bfab      	itete	ge
 8005814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005816:	89a3      	ldrhlt	r3, [r4, #12]
 8005818:	181b      	addge	r3, r3, r0
 800581a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800581e:	bfac      	ite	ge
 8005820:	6563      	strge	r3, [r4, #84]	; 0x54
 8005822:	81a3      	strhlt	r3, [r4, #12]
 8005824:	bd10      	pop	{r4, pc}

08005826 <__swrite>:
 8005826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582a:	461f      	mov	r7, r3
 800582c:	898b      	ldrh	r3, [r1, #12]
 800582e:	05db      	lsls	r3, r3, #23
 8005830:	4605      	mov	r5, r0
 8005832:	460c      	mov	r4, r1
 8005834:	4616      	mov	r6, r2
 8005836:	d505      	bpl.n	8005844 <__swrite+0x1e>
 8005838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583c:	2302      	movs	r3, #2
 800583e:	2200      	movs	r2, #0
 8005840:	f000 f840 	bl	80058c4 <_lseek_r>
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800584a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800584e:	81a3      	strh	r3, [r4, #12]
 8005850:	4632      	mov	r2, r6
 8005852:	463b      	mov	r3, r7
 8005854:	4628      	mov	r0, r5
 8005856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800585a:	f000 b857 	b.w	800590c <_write_r>

0800585e <__sseek>:
 800585e:	b510      	push	{r4, lr}
 8005860:	460c      	mov	r4, r1
 8005862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005866:	f000 f82d 	bl	80058c4 <_lseek_r>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	bf15      	itete	ne
 8005870:	6560      	strne	r0, [r4, #84]	; 0x54
 8005872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800587a:	81a3      	strheq	r3, [r4, #12]
 800587c:	bf18      	it	ne
 800587e:	81a3      	strhne	r3, [r4, #12]
 8005880:	bd10      	pop	{r4, pc}

08005882 <__sclose>:
 8005882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005886:	f000 b80d 	b.w	80058a4 <_close_r>

0800588a <memset>:
 800588a:	4402      	add	r2, r0
 800588c:	4603      	mov	r3, r0
 800588e:	4293      	cmp	r3, r2
 8005890:	d100      	bne.n	8005894 <memset+0xa>
 8005892:	4770      	bx	lr
 8005894:	f803 1b01 	strb.w	r1, [r3], #1
 8005898:	e7f9      	b.n	800588e <memset+0x4>
	...

0800589c <_localeconv_r>:
 800589c:	4800      	ldr	r0, [pc, #0]	; (80058a0 <_localeconv_r+0x4>)
 800589e:	4770      	bx	lr
 80058a0:	20000158 	.word	0x20000158

080058a4 <_close_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4d06      	ldr	r5, [pc, #24]	; (80058c0 <_close_r+0x1c>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	602b      	str	r3, [r5, #0]
 80058b0:	f7fc fb67 	bl	8001f82 <_close>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_close_r+0x1a>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_close_r+0x1a>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	20000458 	.word	0x20000458

080058c4 <_lseek_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d07      	ldr	r5, [pc, #28]	; (80058e4 <_lseek_r+0x20>)
 80058c8:	4604      	mov	r4, r0
 80058ca:	4608      	mov	r0, r1
 80058cc:	4611      	mov	r1, r2
 80058ce:	2200      	movs	r2, #0
 80058d0:	602a      	str	r2, [r5, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f7fc fb7c 	bl	8001fd0 <_lseek>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_lseek_r+0x1e>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_lseek_r+0x1e>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000458 	.word	0x20000458

080058e8 <_read_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4d07      	ldr	r5, [pc, #28]	; (8005908 <_read_r+0x20>)
 80058ec:	4604      	mov	r4, r0
 80058ee:	4608      	mov	r0, r1
 80058f0:	4611      	mov	r1, r2
 80058f2:	2200      	movs	r2, #0
 80058f4:	602a      	str	r2, [r5, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f7fc fb0a 	bl	8001f10 <_read>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_read_r+0x1e>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_read_r+0x1e>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20000458 	.word	0x20000458

0800590c <_write_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d07      	ldr	r5, [pc, #28]	; (800592c <_write_r+0x20>)
 8005910:	4604      	mov	r4, r0
 8005912:	4608      	mov	r0, r1
 8005914:	4611      	mov	r1, r2
 8005916:	2200      	movs	r2, #0
 8005918:	602a      	str	r2, [r5, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	f7fc fb15 	bl	8001f4a <_write>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	d102      	bne.n	800592a <_write_r+0x1e>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	b103      	cbz	r3, 800592a <_write_r+0x1e>
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	bd38      	pop	{r3, r4, r5, pc}
 800592c:	20000458 	.word	0x20000458

08005930 <__errno>:
 8005930:	4b01      	ldr	r3, [pc, #4]	; (8005938 <__errno+0x8>)
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000064 	.word	0x20000064

0800593c <__libc_init_array>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4d0d      	ldr	r5, [pc, #52]	; (8005974 <__libc_init_array+0x38>)
 8005940:	4c0d      	ldr	r4, [pc, #52]	; (8005978 <__libc_init_array+0x3c>)
 8005942:	1b64      	subs	r4, r4, r5
 8005944:	10a4      	asrs	r4, r4, #2
 8005946:	2600      	movs	r6, #0
 8005948:	42a6      	cmp	r6, r4
 800594a:	d109      	bne.n	8005960 <__libc_init_array+0x24>
 800594c:	4d0b      	ldr	r5, [pc, #44]	; (800597c <__libc_init_array+0x40>)
 800594e:	4c0c      	ldr	r4, [pc, #48]	; (8005980 <__libc_init_array+0x44>)
 8005950:	f002 fffc 	bl	800894c <_init>
 8005954:	1b64      	subs	r4, r4, r5
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	2600      	movs	r6, #0
 800595a:	42a6      	cmp	r6, r4
 800595c:	d105      	bne.n	800596a <__libc_init_array+0x2e>
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	f855 3b04 	ldr.w	r3, [r5], #4
 8005964:	4798      	blx	r3
 8005966:	3601      	adds	r6, #1
 8005968:	e7ee      	b.n	8005948 <__libc_init_array+0xc>
 800596a:	f855 3b04 	ldr.w	r3, [r5], #4
 800596e:	4798      	blx	r3
 8005970:	3601      	adds	r6, #1
 8005972:	e7f2      	b.n	800595a <__libc_init_array+0x1e>
 8005974:	08008de8 	.word	0x08008de8
 8005978:	08008de8 	.word	0x08008de8
 800597c:	08008de8 	.word	0x08008de8
 8005980:	08008dec 	.word	0x08008dec

08005984 <__retarget_lock_init_recursive>:
 8005984:	4770      	bx	lr

08005986 <__retarget_lock_acquire_recursive>:
 8005986:	4770      	bx	lr

08005988 <__retarget_lock_release_recursive>:
 8005988:	4770      	bx	lr

0800598a <quorem>:
 800598a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598e:	6903      	ldr	r3, [r0, #16]
 8005990:	690c      	ldr	r4, [r1, #16]
 8005992:	42a3      	cmp	r3, r4
 8005994:	4607      	mov	r7, r0
 8005996:	db7e      	blt.n	8005a96 <quorem+0x10c>
 8005998:	3c01      	subs	r4, #1
 800599a:	f101 0814 	add.w	r8, r1, #20
 800599e:	f100 0514 	add.w	r5, r0, #20
 80059a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059b0:	3301      	adds	r3, #1
 80059b2:	429a      	cmp	r2, r3
 80059b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80059c0:	d331      	bcc.n	8005a26 <quorem+0x9c>
 80059c2:	f04f 0e00 	mov.w	lr, #0
 80059c6:	4640      	mov	r0, r8
 80059c8:	46ac      	mov	ip, r5
 80059ca:	46f2      	mov	sl, lr
 80059cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80059d0:	b293      	uxth	r3, r2
 80059d2:	fb06 e303 	mla	r3, r6, r3, lr
 80059d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059da:	0c1a      	lsrs	r2, r3, #16
 80059dc:	b29b      	uxth	r3, r3
 80059de:	ebaa 0303 	sub.w	r3, sl, r3
 80059e2:	f8dc a000 	ldr.w	sl, [ip]
 80059e6:	fa13 f38a 	uxtah	r3, r3, sl
 80059ea:	fb06 220e 	mla	r2, r6, lr, r2
 80059ee:	9300      	str	r3, [sp, #0]
 80059f0:	9b00      	ldr	r3, [sp, #0]
 80059f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059f6:	b292      	uxth	r2, r2
 80059f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a00:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a04:	4581      	cmp	r9, r0
 8005a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a0a:	f84c 3b04 	str.w	r3, [ip], #4
 8005a0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a12:	d2db      	bcs.n	80059cc <quorem+0x42>
 8005a14:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a18:	b92b      	cbnz	r3, 8005a26 <quorem+0x9c>
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	3b04      	subs	r3, #4
 8005a1e:	429d      	cmp	r5, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	d32c      	bcc.n	8005a7e <quorem+0xf4>
 8005a24:	613c      	str	r4, [r7, #16]
 8005a26:	4638      	mov	r0, r7
 8005a28:	f001 f9a8 	bl	8006d7c <__mcmp>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	db22      	blt.n	8005a76 <quorem+0xec>
 8005a30:	3601      	adds	r6, #1
 8005a32:	4629      	mov	r1, r5
 8005a34:	2000      	movs	r0, #0
 8005a36:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a3a:	f8d1 c000 	ldr.w	ip, [r1]
 8005a3e:	b293      	uxth	r3, r2
 8005a40:	1ac3      	subs	r3, r0, r3
 8005a42:	0c12      	lsrs	r2, r2, #16
 8005a44:	fa13 f38c 	uxtah	r3, r3, ip
 8005a48:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a56:	45c1      	cmp	r9, r8
 8005a58:	f841 3b04 	str.w	r3, [r1], #4
 8005a5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a60:	d2e9      	bcs.n	8005a36 <quorem+0xac>
 8005a62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a6a:	b922      	cbnz	r2, 8005a76 <quorem+0xec>
 8005a6c:	3b04      	subs	r3, #4
 8005a6e:	429d      	cmp	r5, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	d30a      	bcc.n	8005a8a <quorem+0x100>
 8005a74:	613c      	str	r4, [r7, #16]
 8005a76:	4630      	mov	r0, r6
 8005a78:	b003      	add	sp, #12
 8005a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	3b04      	subs	r3, #4
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	d1ce      	bne.n	8005a24 <quorem+0x9a>
 8005a86:	3c01      	subs	r4, #1
 8005a88:	e7c9      	b.n	8005a1e <quorem+0x94>
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	3b04      	subs	r3, #4
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	d1f0      	bne.n	8005a74 <quorem+0xea>
 8005a92:	3c01      	subs	r4, #1
 8005a94:	e7eb      	b.n	8005a6e <quorem+0xe4>
 8005a96:	2000      	movs	r0, #0
 8005a98:	e7ee      	b.n	8005a78 <quorem+0xee>
 8005a9a:	0000      	movs	r0, r0
 8005a9c:	0000      	movs	r0, r0
	...

08005aa0 <_dtoa_r>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	ed2d 8b04 	vpush	{d8-d9}
 8005aa8:	69c5      	ldr	r5, [r0, #28]
 8005aaa:	b093      	sub	sp, #76	; 0x4c
 8005aac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ab0:	ec57 6b10 	vmov	r6, r7, d0
 8005ab4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ab8:	9107      	str	r1, [sp, #28]
 8005aba:	4604      	mov	r4, r0
 8005abc:	920a      	str	r2, [sp, #40]	; 0x28
 8005abe:	930d      	str	r3, [sp, #52]	; 0x34
 8005ac0:	b975      	cbnz	r5, 8005ae0 <_dtoa_r+0x40>
 8005ac2:	2010      	movs	r0, #16
 8005ac4:	f000 fe2a 	bl	800671c <malloc>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	61e0      	str	r0, [r4, #28]
 8005acc:	b920      	cbnz	r0, 8005ad8 <_dtoa_r+0x38>
 8005ace:	4bae      	ldr	r3, [pc, #696]	; (8005d88 <_dtoa_r+0x2e8>)
 8005ad0:	21ef      	movs	r1, #239	; 0xef
 8005ad2:	48ae      	ldr	r0, [pc, #696]	; (8005d8c <_dtoa_r+0x2ec>)
 8005ad4:	f001 fc90 	bl	80073f8 <__assert_func>
 8005ad8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005adc:	6005      	str	r5, [r0, #0]
 8005ade:	60c5      	str	r5, [r0, #12]
 8005ae0:	69e3      	ldr	r3, [r4, #28]
 8005ae2:	6819      	ldr	r1, [r3, #0]
 8005ae4:	b151      	cbz	r1, 8005afc <_dtoa_r+0x5c>
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	604a      	str	r2, [r1, #4]
 8005aea:	2301      	movs	r3, #1
 8005aec:	4093      	lsls	r3, r2
 8005aee:	608b      	str	r3, [r1, #8]
 8005af0:	4620      	mov	r0, r4
 8005af2:	f000 ff07 	bl	8006904 <_Bfree>
 8005af6:	69e3      	ldr	r3, [r4, #28]
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	1e3b      	subs	r3, r7, #0
 8005afe:	bfbb      	ittet	lt
 8005b00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	9303      	strlt	r3, [sp, #12]
 8005b06:	2300      	movge	r3, #0
 8005b08:	2201      	movlt	r2, #1
 8005b0a:	bfac      	ite	ge
 8005b0c:	f8c8 3000 	strge.w	r3, [r8]
 8005b10:	f8c8 2000 	strlt.w	r2, [r8]
 8005b14:	4b9e      	ldr	r3, [pc, #632]	; (8005d90 <_dtoa_r+0x2f0>)
 8005b16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b1a:	ea33 0308 	bics.w	r3, r3, r8
 8005b1e:	d11b      	bne.n	8005b58 <_dtoa_r+0xb8>
 8005b20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b22:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005b2c:	4333      	orrs	r3, r6
 8005b2e:	f000 8593 	beq.w	8006658 <_dtoa_r+0xbb8>
 8005b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b34:	b963      	cbnz	r3, 8005b50 <_dtoa_r+0xb0>
 8005b36:	4b97      	ldr	r3, [pc, #604]	; (8005d94 <_dtoa_r+0x2f4>)
 8005b38:	e027      	b.n	8005b8a <_dtoa_r+0xea>
 8005b3a:	4b97      	ldr	r3, [pc, #604]	; (8005d98 <_dtoa_r+0x2f8>)
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	9800      	ldr	r0, [sp, #0]
 8005b46:	b013      	add	sp, #76	; 0x4c
 8005b48:	ecbd 8b04 	vpop	{d8-d9}
 8005b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b50:	4b90      	ldr	r3, [pc, #576]	; (8005d94 <_dtoa_r+0x2f4>)
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	3303      	adds	r3, #3
 8005b56:	e7f3      	b.n	8005b40 <_dtoa_r+0xa0>
 8005b58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	ec51 0b17 	vmov	r0, r1, d7
 8005b62:	eeb0 8a47 	vmov.f32	s16, s14
 8005b66:	eef0 8a67 	vmov.f32	s17, s15
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f7fa ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b70:	4681      	mov	r9, r0
 8005b72:	b160      	cbz	r0, 8005b8e <_dtoa_r+0xee>
 8005b74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b76:	2301      	movs	r3, #1
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 8568 	beq.w	8006652 <_dtoa_r+0xbb2>
 8005b82:	4b86      	ldr	r3, [pc, #536]	; (8005d9c <_dtoa_r+0x2fc>)
 8005b84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	e7da      	b.n	8005b44 <_dtoa_r+0xa4>
 8005b8e:	aa10      	add	r2, sp, #64	; 0x40
 8005b90:	a911      	add	r1, sp, #68	; 0x44
 8005b92:	4620      	mov	r0, r4
 8005b94:	eeb0 0a48 	vmov.f32	s0, s16
 8005b98:	eef0 0a68 	vmov.f32	s1, s17
 8005b9c:	f001 f994 	bl	8006ec8 <__d2b>
 8005ba0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ba4:	4682      	mov	sl, r0
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	d07f      	beq.n	8005caa <_dtoa_r+0x20a>
 8005baa:	ee18 3a90 	vmov	r3, s17
 8005bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005bb6:	ec51 0b18 	vmov	r0, r1, d8
 8005bba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005bbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	2200      	movs	r2, #0
 8005bca:	4b75      	ldr	r3, [pc, #468]	; (8005da0 <_dtoa_r+0x300>)
 8005bcc:	f7fa fb64 	bl	8000298 <__aeabi_dsub>
 8005bd0:	a367      	add	r3, pc, #412	; (adr r3, 8005d70 <_dtoa_r+0x2d0>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fd17 	bl	8000608 <__aeabi_dmul>
 8005bda:	a367      	add	r3, pc, #412	; (adr r3, 8005d78 <_dtoa_r+0x2d8>)
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f7fa fb5c 	bl	800029c <__adddf3>
 8005be4:	4606      	mov	r6, r0
 8005be6:	4628      	mov	r0, r5
 8005be8:	460f      	mov	r7, r1
 8005bea:	f7fa fca3 	bl	8000534 <__aeabi_i2d>
 8005bee:	a364      	add	r3, pc, #400	; (adr r3, 8005d80 <_dtoa_r+0x2e0>)
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	f7fa fd08 	bl	8000608 <__aeabi_dmul>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fa fb4c 	bl	800029c <__adddf3>
 8005c04:	4606      	mov	r6, r0
 8005c06:	460f      	mov	r7, r1
 8005c08:	f7fa ffae 	bl	8000b68 <__aeabi_d2iz>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4683      	mov	fp, r0
 8005c10:	2300      	movs	r3, #0
 8005c12:	4630      	mov	r0, r6
 8005c14:	4639      	mov	r1, r7
 8005c16:	f7fa ff69 	bl	8000aec <__aeabi_dcmplt>
 8005c1a:	b148      	cbz	r0, 8005c30 <_dtoa_r+0x190>
 8005c1c:	4658      	mov	r0, fp
 8005c1e:	f7fa fc89 	bl	8000534 <__aeabi_i2d>
 8005c22:	4632      	mov	r2, r6
 8005c24:	463b      	mov	r3, r7
 8005c26:	f7fa ff57 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c2a:	b908      	cbnz	r0, 8005c30 <_dtoa_r+0x190>
 8005c2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c30:	f1bb 0f16 	cmp.w	fp, #22
 8005c34:	d857      	bhi.n	8005ce6 <_dtoa_r+0x246>
 8005c36:	4b5b      	ldr	r3, [pc, #364]	; (8005da4 <_dtoa_r+0x304>)
 8005c38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	ec51 0b18 	vmov	r0, r1, d8
 8005c44:	f7fa ff52 	bl	8000aec <__aeabi_dcmplt>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d04e      	beq.n	8005cea <_dtoa_r+0x24a>
 8005c4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c50:	2300      	movs	r3, #0
 8005c52:	930c      	str	r3, [sp, #48]	; 0x30
 8005c54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c56:	1b5b      	subs	r3, r3, r5
 8005c58:	1e5a      	subs	r2, r3, #1
 8005c5a:	bf45      	ittet	mi
 8005c5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005c60:	9305      	strmi	r3, [sp, #20]
 8005c62:	2300      	movpl	r3, #0
 8005c64:	2300      	movmi	r3, #0
 8005c66:	9206      	str	r2, [sp, #24]
 8005c68:	bf54      	ite	pl
 8005c6a:	9305      	strpl	r3, [sp, #20]
 8005c6c:	9306      	strmi	r3, [sp, #24]
 8005c6e:	f1bb 0f00 	cmp.w	fp, #0
 8005c72:	db3c      	blt.n	8005cee <_dtoa_r+0x24e>
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005c7a:	445b      	add	r3, fp
 8005c7c:	9306      	str	r3, [sp, #24]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	9308      	str	r3, [sp, #32]
 8005c82:	9b07      	ldr	r3, [sp, #28]
 8005c84:	2b09      	cmp	r3, #9
 8005c86:	d868      	bhi.n	8005d5a <_dtoa_r+0x2ba>
 8005c88:	2b05      	cmp	r3, #5
 8005c8a:	bfc4      	itt	gt
 8005c8c:	3b04      	subgt	r3, #4
 8005c8e:	9307      	strgt	r3, [sp, #28]
 8005c90:	9b07      	ldr	r3, [sp, #28]
 8005c92:	f1a3 0302 	sub.w	r3, r3, #2
 8005c96:	bfcc      	ite	gt
 8005c98:	2500      	movgt	r5, #0
 8005c9a:	2501      	movle	r5, #1
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	f200 8085 	bhi.w	8005dac <_dtoa_r+0x30c>
 8005ca2:	e8df f003 	tbb	[pc, r3]
 8005ca6:	3b2e      	.short	0x3b2e
 8005ca8:	5839      	.short	0x5839
 8005caa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005cae:	441d      	add	r5, r3
 8005cb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	bfc1      	itttt	gt
 8005cb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cbc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005cc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005cc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005cc8:	bfd6      	itet	le
 8005cca:	f1c3 0320 	rsble	r3, r3, #32
 8005cce:	ea48 0003 	orrgt.w	r0, r8, r3
 8005cd2:	fa06 f003 	lslle.w	r0, r6, r3
 8005cd6:	f7fa fc1d 	bl	8000514 <__aeabi_ui2d>
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ce0:	3d01      	subs	r5, #1
 8005ce2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ce4:	e76f      	b.n	8005bc6 <_dtoa_r+0x126>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e7b3      	b.n	8005c52 <_dtoa_r+0x1b2>
 8005cea:	900c      	str	r0, [sp, #48]	; 0x30
 8005cec:	e7b2      	b.n	8005c54 <_dtoa_r+0x1b4>
 8005cee:	9b05      	ldr	r3, [sp, #20]
 8005cf0:	eba3 030b 	sub.w	r3, r3, fp
 8005cf4:	9305      	str	r3, [sp, #20]
 8005cf6:	f1cb 0300 	rsb	r3, fp, #0
 8005cfa:	9308      	str	r3, [sp, #32]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d00:	e7bf      	b.n	8005c82 <_dtoa_r+0x1e2>
 8005d02:	2300      	movs	r3, #0
 8005d04:	9309      	str	r3, [sp, #36]	; 0x24
 8005d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	dc52      	bgt.n	8005db2 <_dtoa_r+0x312>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	9301      	str	r3, [sp, #4]
 8005d10:	9304      	str	r3, [sp, #16]
 8005d12:	461a      	mov	r2, r3
 8005d14:	920a      	str	r2, [sp, #40]	; 0x28
 8005d16:	e00b      	b.n	8005d30 <_dtoa_r+0x290>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e7f3      	b.n	8005d04 <_dtoa_r+0x264>
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d22:	445b      	add	r3, fp
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	3301      	adds	r3, #1
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	bfb8      	it	lt
 8005d2e:	2301      	movlt	r3, #1
 8005d30:	69e0      	ldr	r0, [r4, #28]
 8005d32:	2100      	movs	r1, #0
 8005d34:	2204      	movs	r2, #4
 8005d36:	f102 0614 	add.w	r6, r2, #20
 8005d3a:	429e      	cmp	r6, r3
 8005d3c:	d93d      	bls.n	8005dba <_dtoa_r+0x31a>
 8005d3e:	6041      	str	r1, [r0, #4]
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fd9f 	bl	8006884 <_Balloc>
 8005d46:	9000      	str	r0, [sp, #0]
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d139      	bne.n	8005dc0 <_dtoa_r+0x320>
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <_dtoa_r+0x308>)
 8005d4e:	4602      	mov	r2, r0
 8005d50:	f240 11af 	movw	r1, #431	; 0x1af
 8005d54:	e6bd      	b.n	8005ad2 <_dtoa_r+0x32>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e7e1      	b.n	8005d1e <_dtoa_r+0x27e>
 8005d5a:	2501      	movs	r5, #1
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9307      	str	r3, [sp, #28]
 8005d60:	9509      	str	r5, [sp, #36]	; 0x24
 8005d62:	f04f 33ff 	mov.w	r3, #4294967295
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	9304      	str	r3, [sp, #16]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2312      	movs	r3, #18
 8005d6e:	e7d1      	b.n	8005d14 <_dtoa_r+0x274>
 8005d70:	636f4361 	.word	0x636f4361
 8005d74:	3fd287a7 	.word	0x3fd287a7
 8005d78:	8b60c8b3 	.word	0x8b60c8b3
 8005d7c:	3fc68a28 	.word	0x3fc68a28
 8005d80:	509f79fb 	.word	0x509f79fb
 8005d84:	3fd34413 	.word	0x3fd34413
 8005d88:	08008a7d 	.word	0x08008a7d
 8005d8c:	08008a94 	.word	0x08008a94
 8005d90:	7ff00000 	.word	0x7ff00000
 8005d94:	08008a79 	.word	0x08008a79
 8005d98:	08008a70 	.word	0x08008a70
 8005d9c:	08008a4d 	.word	0x08008a4d
 8005da0:	3ff80000 	.word	0x3ff80000
 8005da4:	08008b80 	.word	0x08008b80
 8005da8:	08008aec 	.word	0x08008aec
 8005dac:	2301      	movs	r3, #1
 8005dae:	9309      	str	r3, [sp, #36]	; 0x24
 8005db0:	e7d7      	b.n	8005d62 <_dtoa_r+0x2c2>
 8005db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	9304      	str	r3, [sp, #16]
 8005db8:	e7ba      	b.n	8005d30 <_dtoa_r+0x290>
 8005dba:	3101      	adds	r1, #1
 8005dbc:	0052      	lsls	r2, r2, #1
 8005dbe:	e7ba      	b.n	8005d36 <_dtoa_r+0x296>
 8005dc0:	69e3      	ldr	r3, [r4, #28]
 8005dc2:	9a00      	ldr	r2, [sp, #0]
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	9b04      	ldr	r3, [sp, #16]
 8005dc8:	2b0e      	cmp	r3, #14
 8005dca:	f200 80a8 	bhi.w	8005f1e <_dtoa_r+0x47e>
 8005dce:	2d00      	cmp	r5, #0
 8005dd0:	f000 80a5 	beq.w	8005f1e <_dtoa_r+0x47e>
 8005dd4:	f1bb 0f00 	cmp.w	fp, #0
 8005dd8:	dd38      	ble.n	8005e4c <_dtoa_r+0x3ac>
 8005dda:	4bc0      	ldr	r3, [pc, #768]	; (80060dc <_dtoa_r+0x63c>)
 8005ddc:	f00b 020f 	and.w	r2, fp, #15
 8005de0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005de4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005de8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005dec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005df0:	d019      	beq.n	8005e26 <_dtoa_r+0x386>
 8005df2:	4bbb      	ldr	r3, [pc, #748]	; (80060e0 <_dtoa_r+0x640>)
 8005df4:	ec51 0b18 	vmov	r0, r1, d8
 8005df8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dfc:	f7fa fd2e 	bl	800085c <__aeabi_ddiv>
 8005e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e04:	f008 080f 	and.w	r8, r8, #15
 8005e08:	2503      	movs	r5, #3
 8005e0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80060e0 <_dtoa_r+0x640>
 8005e0e:	f1b8 0f00 	cmp.w	r8, #0
 8005e12:	d10a      	bne.n	8005e2a <_dtoa_r+0x38a>
 8005e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e18:	4632      	mov	r2, r6
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	f7fa fd1e 	bl	800085c <__aeabi_ddiv>
 8005e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e24:	e02b      	b.n	8005e7e <_dtoa_r+0x3de>
 8005e26:	2502      	movs	r5, #2
 8005e28:	e7ef      	b.n	8005e0a <_dtoa_r+0x36a>
 8005e2a:	f018 0f01 	tst.w	r8, #1
 8005e2e:	d008      	beq.n	8005e42 <_dtoa_r+0x3a2>
 8005e30:	4630      	mov	r0, r6
 8005e32:	4639      	mov	r1, r7
 8005e34:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005e38:	f7fa fbe6 	bl	8000608 <__aeabi_dmul>
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	4606      	mov	r6, r0
 8005e40:	460f      	mov	r7, r1
 8005e42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e46:	f109 0908 	add.w	r9, r9, #8
 8005e4a:	e7e0      	b.n	8005e0e <_dtoa_r+0x36e>
 8005e4c:	f000 809f 	beq.w	8005f8e <_dtoa_r+0x4ee>
 8005e50:	f1cb 0600 	rsb	r6, fp, #0
 8005e54:	4ba1      	ldr	r3, [pc, #644]	; (80060dc <_dtoa_r+0x63c>)
 8005e56:	4fa2      	ldr	r7, [pc, #648]	; (80060e0 <_dtoa_r+0x640>)
 8005e58:	f006 020f 	and.w	r2, r6, #15
 8005e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	ec51 0b18 	vmov	r0, r1, d8
 8005e68:	f7fa fbce 	bl	8000608 <__aeabi_dmul>
 8005e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e70:	1136      	asrs	r6, r6, #4
 8005e72:	2300      	movs	r3, #0
 8005e74:	2502      	movs	r5, #2
 8005e76:	2e00      	cmp	r6, #0
 8005e78:	d17e      	bne.n	8005f78 <_dtoa_r+0x4d8>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1d0      	bne.n	8005e20 <_dtoa_r+0x380>
 8005e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8084 	beq.w	8005f92 <_dtoa_r+0x4f2>
 8005e8a:	4b96      	ldr	r3, [pc, #600]	; (80060e4 <_dtoa_r+0x644>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4640      	mov	r0, r8
 8005e90:	4649      	mov	r1, r9
 8005e92:	f7fa fe2b 	bl	8000aec <__aeabi_dcmplt>
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d07b      	beq.n	8005f92 <_dtoa_r+0x4f2>
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d078      	beq.n	8005f92 <_dtoa_r+0x4f2>
 8005ea0:	9b01      	ldr	r3, [sp, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	dd39      	ble.n	8005f1a <_dtoa_r+0x47a>
 8005ea6:	4b90      	ldr	r3, [pc, #576]	; (80060e8 <_dtoa_r+0x648>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4640      	mov	r0, r8
 8005eac:	4649      	mov	r1, r9
 8005eae:	f7fa fbab 	bl	8000608 <__aeabi_dmul>
 8005eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eb6:	9e01      	ldr	r6, [sp, #4]
 8005eb8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005ebc:	3501      	adds	r5, #1
 8005ebe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f7fa fb36 	bl	8000534 <__aeabi_i2d>
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	f7fa fb9c 	bl	8000608 <__aeabi_dmul>
 8005ed0:	4b86      	ldr	r3, [pc, #536]	; (80060ec <_dtoa_r+0x64c>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f7fa f9e2 	bl	800029c <__adddf3>
 8005ed8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	2e00      	cmp	r6, #0
 8005ee4:	d158      	bne.n	8005f98 <_dtoa_r+0x4f8>
 8005ee6:	4b82      	ldr	r3, [pc, #520]	; (80060f0 <_dtoa_r+0x650>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa f9d3 	bl	8000298 <__aeabi_dsub>
 8005ef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ef6:	4680      	mov	r8, r0
 8005ef8:	4689      	mov	r9, r1
 8005efa:	f7fa fe15 	bl	8000b28 <__aeabi_dcmpgt>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	f040 8296 	bne.w	8006430 <_dtoa_r+0x990>
 8005f04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f08:	4640      	mov	r0, r8
 8005f0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f0e:	4649      	mov	r1, r9
 8005f10:	f7fa fdec 	bl	8000aec <__aeabi_dcmplt>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	f040 8289 	bne.w	800642c <_dtoa_r+0x98c>
 8005f1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005f1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f2c0 814e 	blt.w	80061c2 <_dtoa_r+0x722>
 8005f26:	f1bb 0f0e 	cmp.w	fp, #14
 8005f2a:	f300 814a 	bgt.w	80061c2 <_dtoa_r+0x722>
 8005f2e:	4b6b      	ldr	r3, [pc, #428]	; (80060dc <_dtoa_r+0x63c>)
 8005f30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f280 80dc 	bge.w	80060f8 <_dtoa_r+0x658>
 8005f40:	9b04      	ldr	r3, [sp, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f300 80d8 	bgt.w	80060f8 <_dtoa_r+0x658>
 8005f48:	f040 826f 	bne.w	800642a <_dtoa_r+0x98a>
 8005f4c:	4b68      	ldr	r3, [pc, #416]	; (80060f0 <_dtoa_r+0x650>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4640      	mov	r0, r8
 8005f52:	4649      	mov	r1, r9
 8005f54:	f7fa fb58 	bl	8000608 <__aeabi_dmul>
 8005f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f5c:	f7fa fdda 	bl	8000b14 <__aeabi_dcmpge>
 8005f60:	9e04      	ldr	r6, [sp, #16]
 8005f62:	4637      	mov	r7, r6
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f040 8245 	bne.w	80063f4 <_dtoa_r+0x954>
 8005f6a:	9d00      	ldr	r5, [sp, #0]
 8005f6c:	2331      	movs	r3, #49	; 0x31
 8005f6e:	f805 3b01 	strb.w	r3, [r5], #1
 8005f72:	f10b 0b01 	add.w	fp, fp, #1
 8005f76:	e241      	b.n	80063fc <_dtoa_r+0x95c>
 8005f78:	07f2      	lsls	r2, r6, #31
 8005f7a:	d505      	bpl.n	8005f88 <_dtoa_r+0x4e8>
 8005f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f80:	f7fa fb42 	bl	8000608 <__aeabi_dmul>
 8005f84:	3501      	adds	r5, #1
 8005f86:	2301      	movs	r3, #1
 8005f88:	1076      	asrs	r6, r6, #1
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	e773      	b.n	8005e76 <_dtoa_r+0x3d6>
 8005f8e:	2502      	movs	r5, #2
 8005f90:	e775      	b.n	8005e7e <_dtoa_r+0x3de>
 8005f92:	9e04      	ldr	r6, [sp, #16]
 8005f94:	465f      	mov	r7, fp
 8005f96:	e792      	b.n	8005ebe <_dtoa_r+0x41e>
 8005f98:	9900      	ldr	r1, [sp, #0]
 8005f9a:	4b50      	ldr	r3, [pc, #320]	; (80060dc <_dtoa_r+0x63c>)
 8005f9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fa0:	4431      	add	r1, r6
 8005fa2:	9102      	str	r1, [sp, #8]
 8005fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fa6:	eeb0 9a47 	vmov.f32	s18, s14
 8005faa:	eef0 9a67 	vmov.f32	s19, s15
 8005fae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005fb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	d044      	beq.n	8006044 <_dtoa_r+0x5a4>
 8005fba:	494e      	ldr	r1, [pc, #312]	; (80060f4 <_dtoa_r+0x654>)
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f7fa fc4d 	bl	800085c <__aeabi_ddiv>
 8005fc2:	ec53 2b19 	vmov	r2, r3, d9
 8005fc6:	f7fa f967 	bl	8000298 <__aeabi_dsub>
 8005fca:	9d00      	ldr	r5, [sp, #0]
 8005fcc:	ec41 0b19 	vmov	d9, r0, r1
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f7fa fdc8 	bl	8000b68 <__aeabi_d2iz>
 8005fd8:	4606      	mov	r6, r0
 8005fda:	f7fa faab 	bl	8000534 <__aeabi_i2d>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa f957 	bl	8000298 <__aeabi_dsub>
 8005fea:	3630      	adds	r6, #48	; 0x30
 8005fec:	f805 6b01 	strb.w	r6, [r5], #1
 8005ff0:	ec53 2b19 	vmov	r2, r3, d9
 8005ff4:	4680      	mov	r8, r0
 8005ff6:	4689      	mov	r9, r1
 8005ff8:	f7fa fd78 	bl	8000aec <__aeabi_dcmplt>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d164      	bne.n	80060ca <_dtoa_r+0x62a>
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	4937      	ldr	r1, [pc, #220]	; (80060e4 <_dtoa_r+0x644>)
 8006006:	2000      	movs	r0, #0
 8006008:	f7fa f946 	bl	8000298 <__aeabi_dsub>
 800600c:	ec53 2b19 	vmov	r2, r3, d9
 8006010:	f7fa fd6c 	bl	8000aec <__aeabi_dcmplt>
 8006014:	2800      	cmp	r0, #0
 8006016:	f040 80b6 	bne.w	8006186 <_dtoa_r+0x6e6>
 800601a:	9b02      	ldr	r3, [sp, #8]
 800601c:	429d      	cmp	r5, r3
 800601e:	f43f af7c 	beq.w	8005f1a <_dtoa_r+0x47a>
 8006022:	4b31      	ldr	r3, [pc, #196]	; (80060e8 <_dtoa_r+0x648>)
 8006024:	ec51 0b19 	vmov	r0, r1, d9
 8006028:	2200      	movs	r2, #0
 800602a:	f7fa faed 	bl	8000608 <__aeabi_dmul>
 800602e:	4b2e      	ldr	r3, [pc, #184]	; (80060e8 <_dtoa_r+0x648>)
 8006030:	ec41 0b19 	vmov	d9, r0, r1
 8006034:	2200      	movs	r2, #0
 8006036:	4640      	mov	r0, r8
 8006038:	4649      	mov	r1, r9
 800603a:	f7fa fae5 	bl	8000608 <__aeabi_dmul>
 800603e:	4680      	mov	r8, r0
 8006040:	4689      	mov	r9, r1
 8006042:	e7c5      	b.n	8005fd0 <_dtoa_r+0x530>
 8006044:	ec51 0b17 	vmov	r0, r1, d7
 8006048:	f7fa fade 	bl	8000608 <__aeabi_dmul>
 800604c:	9b02      	ldr	r3, [sp, #8]
 800604e:	9d00      	ldr	r5, [sp, #0]
 8006050:	930f      	str	r3, [sp, #60]	; 0x3c
 8006052:	ec41 0b19 	vmov	d9, r0, r1
 8006056:	4649      	mov	r1, r9
 8006058:	4640      	mov	r0, r8
 800605a:	f7fa fd85 	bl	8000b68 <__aeabi_d2iz>
 800605e:	4606      	mov	r6, r0
 8006060:	f7fa fa68 	bl	8000534 <__aeabi_i2d>
 8006064:	3630      	adds	r6, #48	; 0x30
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4640      	mov	r0, r8
 800606c:	4649      	mov	r1, r9
 800606e:	f7fa f913 	bl	8000298 <__aeabi_dsub>
 8006072:	f805 6b01 	strb.w	r6, [r5], #1
 8006076:	9b02      	ldr	r3, [sp, #8]
 8006078:	429d      	cmp	r5, r3
 800607a:	4680      	mov	r8, r0
 800607c:	4689      	mov	r9, r1
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	d124      	bne.n	80060ce <_dtoa_r+0x62e>
 8006084:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <_dtoa_r+0x654>)
 8006086:	ec51 0b19 	vmov	r0, r1, d9
 800608a:	f7fa f907 	bl	800029c <__adddf3>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4640      	mov	r0, r8
 8006094:	4649      	mov	r1, r9
 8006096:	f7fa fd47 	bl	8000b28 <__aeabi_dcmpgt>
 800609a:	2800      	cmp	r0, #0
 800609c:	d173      	bne.n	8006186 <_dtoa_r+0x6e6>
 800609e:	ec53 2b19 	vmov	r2, r3, d9
 80060a2:	4914      	ldr	r1, [pc, #80]	; (80060f4 <_dtoa_r+0x654>)
 80060a4:	2000      	movs	r0, #0
 80060a6:	f7fa f8f7 	bl	8000298 <__aeabi_dsub>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f7fa fd1b 	bl	8000aec <__aeabi_dcmplt>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f43f af2f 	beq.w	8005f1a <_dtoa_r+0x47a>
 80060bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80060be:	1e6b      	subs	r3, r5, #1
 80060c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060c6:	2b30      	cmp	r3, #48	; 0x30
 80060c8:	d0f8      	beq.n	80060bc <_dtoa_r+0x61c>
 80060ca:	46bb      	mov	fp, r7
 80060cc:	e04a      	b.n	8006164 <_dtoa_r+0x6c4>
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <_dtoa_r+0x648>)
 80060d0:	f7fa fa9a 	bl	8000608 <__aeabi_dmul>
 80060d4:	4680      	mov	r8, r0
 80060d6:	4689      	mov	r9, r1
 80060d8:	e7bd      	b.n	8006056 <_dtoa_r+0x5b6>
 80060da:	bf00      	nop
 80060dc:	08008b80 	.word	0x08008b80
 80060e0:	08008b58 	.word	0x08008b58
 80060e4:	3ff00000 	.word	0x3ff00000
 80060e8:	40240000 	.word	0x40240000
 80060ec:	401c0000 	.word	0x401c0000
 80060f0:	40140000 	.word	0x40140000
 80060f4:	3fe00000 	.word	0x3fe00000
 80060f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060fc:	9d00      	ldr	r5, [sp, #0]
 80060fe:	4642      	mov	r2, r8
 8006100:	464b      	mov	r3, r9
 8006102:	4630      	mov	r0, r6
 8006104:	4639      	mov	r1, r7
 8006106:	f7fa fba9 	bl	800085c <__aeabi_ddiv>
 800610a:	f7fa fd2d 	bl	8000b68 <__aeabi_d2iz>
 800610e:	9001      	str	r0, [sp, #4]
 8006110:	f7fa fa10 	bl	8000534 <__aeabi_i2d>
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	f7fa fa76 	bl	8000608 <__aeabi_dmul>
 800611c:	4602      	mov	r2, r0
 800611e:	460b      	mov	r3, r1
 8006120:	4630      	mov	r0, r6
 8006122:	4639      	mov	r1, r7
 8006124:	f7fa f8b8 	bl	8000298 <__aeabi_dsub>
 8006128:	9e01      	ldr	r6, [sp, #4]
 800612a:	9f04      	ldr	r7, [sp, #16]
 800612c:	3630      	adds	r6, #48	; 0x30
 800612e:	f805 6b01 	strb.w	r6, [r5], #1
 8006132:	9e00      	ldr	r6, [sp, #0]
 8006134:	1bae      	subs	r6, r5, r6
 8006136:	42b7      	cmp	r7, r6
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	d134      	bne.n	80061a8 <_dtoa_r+0x708>
 800613e:	f7fa f8ad 	bl	800029c <__adddf3>
 8006142:	4642      	mov	r2, r8
 8006144:	464b      	mov	r3, r9
 8006146:	4606      	mov	r6, r0
 8006148:	460f      	mov	r7, r1
 800614a:	f7fa fced 	bl	8000b28 <__aeabi_dcmpgt>
 800614e:	b9c8      	cbnz	r0, 8006184 <_dtoa_r+0x6e4>
 8006150:	4642      	mov	r2, r8
 8006152:	464b      	mov	r3, r9
 8006154:	4630      	mov	r0, r6
 8006156:	4639      	mov	r1, r7
 8006158:	f7fa fcbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800615c:	b110      	cbz	r0, 8006164 <_dtoa_r+0x6c4>
 800615e:	9b01      	ldr	r3, [sp, #4]
 8006160:	07db      	lsls	r3, r3, #31
 8006162:	d40f      	bmi.n	8006184 <_dtoa_r+0x6e4>
 8006164:	4651      	mov	r1, sl
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fbcc 	bl	8006904 <_Bfree>
 800616c:	2300      	movs	r3, #0
 800616e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006170:	702b      	strb	r3, [r5, #0]
 8006172:	f10b 0301 	add.w	r3, fp, #1
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800617a:	2b00      	cmp	r3, #0
 800617c:	f43f ace2 	beq.w	8005b44 <_dtoa_r+0xa4>
 8006180:	601d      	str	r5, [r3, #0]
 8006182:	e4df      	b.n	8005b44 <_dtoa_r+0xa4>
 8006184:	465f      	mov	r7, fp
 8006186:	462b      	mov	r3, r5
 8006188:	461d      	mov	r5, r3
 800618a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800618e:	2a39      	cmp	r2, #57	; 0x39
 8006190:	d106      	bne.n	80061a0 <_dtoa_r+0x700>
 8006192:	9a00      	ldr	r2, [sp, #0]
 8006194:	429a      	cmp	r2, r3
 8006196:	d1f7      	bne.n	8006188 <_dtoa_r+0x6e8>
 8006198:	9900      	ldr	r1, [sp, #0]
 800619a:	2230      	movs	r2, #48	; 0x30
 800619c:	3701      	adds	r7, #1
 800619e:	700a      	strb	r2, [r1, #0]
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	3201      	adds	r2, #1
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	e790      	b.n	80060ca <_dtoa_r+0x62a>
 80061a8:	4ba3      	ldr	r3, [pc, #652]	; (8006438 <_dtoa_r+0x998>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	f7fa fa2c 	bl	8000608 <__aeabi_dmul>
 80061b0:	2200      	movs	r2, #0
 80061b2:	2300      	movs	r3, #0
 80061b4:	4606      	mov	r6, r0
 80061b6:	460f      	mov	r7, r1
 80061b8:	f7fa fc8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80061bc:	2800      	cmp	r0, #0
 80061be:	d09e      	beq.n	80060fe <_dtoa_r+0x65e>
 80061c0:	e7d0      	b.n	8006164 <_dtoa_r+0x6c4>
 80061c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061c4:	2a00      	cmp	r2, #0
 80061c6:	f000 80ca 	beq.w	800635e <_dtoa_r+0x8be>
 80061ca:	9a07      	ldr	r2, [sp, #28]
 80061cc:	2a01      	cmp	r2, #1
 80061ce:	f300 80ad 	bgt.w	800632c <_dtoa_r+0x88c>
 80061d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	f000 80a5 	beq.w	8006324 <_dtoa_r+0x884>
 80061da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061de:	9e08      	ldr	r6, [sp, #32]
 80061e0:	9d05      	ldr	r5, [sp, #20]
 80061e2:	9a05      	ldr	r2, [sp, #20]
 80061e4:	441a      	add	r2, r3
 80061e6:	9205      	str	r2, [sp, #20]
 80061e8:	9a06      	ldr	r2, [sp, #24]
 80061ea:	2101      	movs	r1, #1
 80061ec:	441a      	add	r2, r3
 80061ee:	4620      	mov	r0, r4
 80061f0:	9206      	str	r2, [sp, #24]
 80061f2:	f000 fc3d 	bl	8006a70 <__i2b>
 80061f6:	4607      	mov	r7, r0
 80061f8:	b165      	cbz	r5, 8006214 <_dtoa_r+0x774>
 80061fa:	9b06      	ldr	r3, [sp, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dd09      	ble.n	8006214 <_dtoa_r+0x774>
 8006200:	42ab      	cmp	r3, r5
 8006202:	9a05      	ldr	r2, [sp, #20]
 8006204:	bfa8      	it	ge
 8006206:	462b      	movge	r3, r5
 8006208:	1ad2      	subs	r2, r2, r3
 800620a:	9205      	str	r2, [sp, #20]
 800620c:	9a06      	ldr	r2, [sp, #24]
 800620e:	1aed      	subs	r5, r5, r3
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	9306      	str	r3, [sp, #24]
 8006214:	9b08      	ldr	r3, [sp, #32]
 8006216:	b1f3      	cbz	r3, 8006256 <_dtoa_r+0x7b6>
 8006218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 80a3 	beq.w	8006366 <_dtoa_r+0x8c6>
 8006220:	2e00      	cmp	r6, #0
 8006222:	dd10      	ble.n	8006246 <_dtoa_r+0x7a6>
 8006224:	4639      	mov	r1, r7
 8006226:	4632      	mov	r2, r6
 8006228:	4620      	mov	r0, r4
 800622a:	f000 fce1 	bl	8006bf0 <__pow5mult>
 800622e:	4652      	mov	r2, sl
 8006230:	4601      	mov	r1, r0
 8006232:	4607      	mov	r7, r0
 8006234:	4620      	mov	r0, r4
 8006236:	f000 fc31 	bl	8006a9c <__multiply>
 800623a:	4651      	mov	r1, sl
 800623c:	4680      	mov	r8, r0
 800623e:	4620      	mov	r0, r4
 8006240:	f000 fb60 	bl	8006904 <_Bfree>
 8006244:	46c2      	mov	sl, r8
 8006246:	9b08      	ldr	r3, [sp, #32]
 8006248:	1b9a      	subs	r2, r3, r6
 800624a:	d004      	beq.n	8006256 <_dtoa_r+0x7b6>
 800624c:	4651      	mov	r1, sl
 800624e:	4620      	mov	r0, r4
 8006250:	f000 fcce 	bl	8006bf0 <__pow5mult>
 8006254:	4682      	mov	sl, r0
 8006256:	2101      	movs	r1, #1
 8006258:	4620      	mov	r0, r4
 800625a:	f000 fc09 	bl	8006a70 <__i2b>
 800625e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006260:	2b00      	cmp	r3, #0
 8006262:	4606      	mov	r6, r0
 8006264:	f340 8081 	ble.w	800636a <_dtoa_r+0x8ca>
 8006268:	461a      	mov	r2, r3
 800626a:	4601      	mov	r1, r0
 800626c:	4620      	mov	r0, r4
 800626e:	f000 fcbf 	bl	8006bf0 <__pow5mult>
 8006272:	9b07      	ldr	r3, [sp, #28]
 8006274:	2b01      	cmp	r3, #1
 8006276:	4606      	mov	r6, r0
 8006278:	dd7a      	ble.n	8006370 <_dtoa_r+0x8d0>
 800627a:	f04f 0800 	mov.w	r8, #0
 800627e:	6933      	ldr	r3, [r6, #16]
 8006280:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006284:	6918      	ldr	r0, [r3, #16]
 8006286:	f000 fba5 	bl	80069d4 <__hi0bits>
 800628a:	f1c0 0020 	rsb	r0, r0, #32
 800628e:	9b06      	ldr	r3, [sp, #24]
 8006290:	4418      	add	r0, r3
 8006292:	f010 001f 	ands.w	r0, r0, #31
 8006296:	f000 8094 	beq.w	80063c2 <_dtoa_r+0x922>
 800629a:	f1c0 0320 	rsb	r3, r0, #32
 800629e:	2b04      	cmp	r3, #4
 80062a0:	f340 8085 	ble.w	80063ae <_dtoa_r+0x90e>
 80062a4:	9b05      	ldr	r3, [sp, #20]
 80062a6:	f1c0 001c 	rsb	r0, r0, #28
 80062aa:	4403      	add	r3, r0
 80062ac:	9305      	str	r3, [sp, #20]
 80062ae:	9b06      	ldr	r3, [sp, #24]
 80062b0:	4403      	add	r3, r0
 80062b2:	4405      	add	r5, r0
 80062b4:	9306      	str	r3, [sp, #24]
 80062b6:	9b05      	ldr	r3, [sp, #20]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	dd05      	ble.n	80062c8 <_dtoa_r+0x828>
 80062bc:	4651      	mov	r1, sl
 80062be:	461a      	mov	r2, r3
 80062c0:	4620      	mov	r0, r4
 80062c2:	f000 fcef 	bl	8006ca4 <__lshift>
 80062c6:	4682      	mov	sl, r0
 80062c8:	9b06      	ldr	r3, [sp, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dd05      	ble.n	80062da <_dtoa_r+0x83a>
 80062ce:	4631      	mov	r1, r6
 80062d0:	461a      	mov	r2, r3
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 fce6 	bl	8006ca4 <__lshift>
 80062d8:	4606      	mov	r6, r0
 80062da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d072      	beq.n	80063c6 <_dtoa_r+0x926>
 80062e0:	4631      	mov	r1, r6
 80062e2:	4650      	mov	r0, sl
 80062e4:	f000 fd4a 	bl	8006d7c <__mcmp>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	da6c      	bge.n	80063c6 <_dtoa_r+0x926>
 80062ec:	2300      	movs	r3, #0
 80062ee:	4651      	mov	r1, sl
 80062f0:	220a      	movs	r2, #10
 80062f2:	4620      	mov	r0, r4
 80062f4:	f000 fb28 	bl	8006948 <__multadd>
 80062f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062fe:	4682      	mov	sl, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 81b0 	beq.w	8006666 <_dtoa_r+0xbc6>
 8006306:	2300      	movs	r3, #0
 8006308:	4639      	mov	r1, r7
 800630a:	220a      	movs	r2, #10
 800630c:	4620      	mov	r0, r4
 800630e:	f000 fb1b 	bl	8006948 <__multadd>
 8006312:	9b01      	ldr	r3, [sp, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	4607      	mov	r7, r0
 8006318:	f300 8096 	bgt.w	8006448 <_dtoa_r+0x9a8>
 800631c:	9b07      	ldr	r3, [sp, #28]
 800631e:	2b02      	cmp	r3, #2
 8006320:	dc59      	bgt.n	80063d6 <_dtoa_r+0x936>
 8006322:	e091      	b.n	8006448 <_dtoa_r+0x9a8>
 8006324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006326:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800632a:	e758      	b.n	80061de <_dtoa_r+0x73e>
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	1e5e      	subs	r6, r3, #1
 8006330:	9b08      	ldr	r3, [sp, #32]
 8006332:	42b3      	cmp	r3, r6
 8006334:	bfbf      	itttt	lt
 8006336:	9b08      	ldrlt	r3, [sp, #32]
 8006338:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800633a:	9608      	strlt	r6, [sp, #32]
 800633c:	1af3      	sublt	r3, r6, r3
 800633e:	bfb4      	ite	lt
 8006340:	18d2      	addlt	r2, r2, r3
 8006342:	1b9e      	subge	r6, r3, r6
 8006344:	9b04      	ldr	r3, [sp, #16]
 8006346:	bfbc      	itt	lt
 8006348:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800634a:	2600      	movlt	r6, #0
 800634c:	2b00      	cmp	r3, #0
 800634e:	bfb7      	itett	lt
 8006350:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006354:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006358:	1a9d      	sublt	r5, r3, r2
 800635a:	2300      	movlt	r3, #0
 800635c:	e741      	b.n	80061e2 <_dtoa_r+0x742>
 800635e:	9e08      	ldr	r6, [sp, #32]
 8006360:	9d05      	ldr	r5, [sp, #20]
 8006362:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006364:	e748      	b.n	80061f8 <_dtoa_r+0x758>
 8006366:	9a08      	ldr	r2, [sp, #32]
 8006368:	e770      	b.n	800624c <_dtoa_r+0x7ac>
 800636a:	9b07      	ldr	r3, [sp, #28]
 800636c:	2b01      	cmp	r3, #1
 800636e:	dc19      	bgt.n	80063a4 <_dtoa_r+0x904>
 8006370:	9b02      	ldr	r3, [sp, #8]
 8006372:	b9bb      	cbnz	r3, 80063a4 <_dtoa_r+0x904>
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800637a:	b99b      	cbnz	r3, 80063a4 <_dtoa_r+0x904>
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006382:	0d1b      	lsrs	r3, r3, #20
 8006384:	051b      	lsls	r3, r3, #20
 8006386:	b183      	cbz	r3, 80063aa <_dtoa_r+0x90a>
 8006388:	9b05      	ldr	r3, [sp, #20]
 800638a:	3301      	adds	r3, #1
 800638c:	9305      	str	r3, [sp, #20]
 800638e:	9b06      	ldr	r3, [sp, #24]
 8006390:	3301      	adds	r3, #1
 8006392:	9306      	str	r3, [sp, #24]
 8006394:	f04f 0801 	mov.w	r8, #1
 8006398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800639a:	2b00      	cmp	r3, #0
 800639c:	f47f af6f 	bne.w	800627e <_dtoa_r+0x7de>
 80063a0:	2001      	movs	r0, #1
 80063a2:	e774      	b.n	800628e <_dtoa_r+0x7ee>
 80063a4:	f04f 0800 	mov.w	r8, #0
 80063a8:	e7f6      	b.n	8006398 <_dtoa_r+0x8f8>
 80063aa:	4698      	mov	r8, r3
 80063ac:	e7f4      	b.n	8006398 <_dtoa_r+0x8f8>
 80063ae:	d082      	beq.n	80062b6 <_dtoa_r+0x816>
 80063b0:	9a05      	ldr	r2, [sp, #20]
 80063b2:	331c      	adds	r3, #28
 80063b4:	441a      	add	r2, r3
 80063b6:	9205      	str	r2, [sp, #20]
 80063b8:	9a06      	ldr	r2, [sp, #24]
 80063ba:	441a      	add	r2, r3
 80063bc:	441d      	add	r5, r3
 80063be:	9206      	str	r2, [sp, #24]
 80063c0:	e779      	b.n	80062b6 <_dtoa_r+0x816>
 80063c2:	4603      	mov	r3, r0
 80063c4:	e7f4      	b.n	80063b0 <_dtoa_r+0x910>
 80063c6:	9b04      	ldr	r3, [sp, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dc37      	bgt.n	800643c <_dtoa_r+0x99c>
 80063cc:	9b07      	ldr	r3, [sp, #28]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	dd34      	ble.n	800643c <_dtoa_r+0x99c>
 80063d2:	9b04      	ldr	r3, [sp, #16]
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	9b01      	ldr	r3, [sp, #4]
 80063d8:	b963      	cbnz	r3, 80063f4 <_dtoa_r+0x954>
 80063da:	4631      	mov	r1, r6
 80063dc:	2205      	movs	r2, #5
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 fab2 	bl	8006948 <__multadd>
 80063e4:	4601      	mov	r1, r0
 80063e6:	4606      	mov	r6, r0
 80063e8:	4650      	mov	r0, sl
 80063ea:	f000 fcc7 	bl	8006d7c <__mcmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	f73f adbb 	bgt.w	8005f6a <_dtoa_r+0x4ca>
 80063f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063f6:	9d00      	ldr	r5, [sp, #0]
 80063f8:	ea6f 0b03 	mvn.w	fp, r3
 80063fc:	f04f 0800 	mov.w	r8, #0
 8006400:	4631      	mov	r1, r6
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fa7e 	bl	8006904 <_Bfree>
 8006408:	2f00      	cmp	r7, #0
 800640a:	f43f aeab 	beq.w	8006164 <_dtoa_r+0x6c4>
 800640e:	f1b8 0f00 	cmp.w	r8, #0
 8006412:	d005      	beq.n	8006420 <_dtoa_r+0x980>
 8006414:	45b8      	cmp	r8, r7
 8006416:	d003      	beq.n	8006420 <_dtoa_r+0x980>
 8006418:	4641      	mov	r1, r8
 800641a:	4620      	mov	r0, r4
 800641c:	f000 fa72 	bl	8006904 <_Bfree>
 8006420:	4639      	mov	r1, r7
 8006422:	4620      	mov	r0, r4
 8006424:	f000 fa6e 	bl	8006904 <_Bfree>
 8006428:	e69c      	b.n	8006164 <_dtoa_r+0x6c4>
 800642a:	2600      	movs	r6, #0
 800642c:	4637      	mov	r7, r6
 800642e:	e7e1      	b.n	80063f4 <_dtoa_r+0x954>
 8006430:	46bb      	mov	fp, r7
 8006432:	4637      	mov	r7, r6
 8006434:	e599      	b.n	8005f6a <_dtoa_r+0x4ca>
 8006436:	bf00      	nop
 8006438:	40240000 	.word	0x40240000
 800643c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80c8 	beq.w	80065d4 <_dtoa_r+0xb34>
 8006444:	9b04      	ldr	r3, [sp, #16]
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	2d00      	cmp	r5, #0
 800644a:	dd05      	ble.n	8006458 <_dtoa_r+0x9b8>
 800644c:	4639      	mov	r1, r7
 800644e:	462a      	mov	r2, r5
 8006450:	4620      	mov	r0, r4
 8006452:	f000 fc27 	bl	8006ca4 <__lshift>
 8006456:	4607      	mov	r7, r0
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	d05b      	beq.n	8006516 <_dtoa_r+0xa76>
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fa0f 	bl	8006884 <_Balloc>
 8006466:	4605      	mov	r5, r0
 8006468:	b928      	cbnz	r0, 8006476 <_dtoa_r+0x9d6>
 800646a:	4b83      	ldr	r3, [pc, #524]	; (8006678 <_dtoa_r+0xbd8>)
 800646c:	4602      	mov	r2, r0
 800646e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006472:	f7ff bb2e 	b.w	8005ad2 <_dtoa_r+0x32>
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	3202      	adds	r2, #2
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	f107 010c 	add.w	r1, r7, #12
 8006480:	300c      	adds	r0, #12
 8006482:	f000 ffab 	bl	80073dc <memcpy>
 8006486:	2201      	movs	r2, #1
 8006488:	4629      	mov	r1, r5
 800648a:	4620      	mov	r0, r4
 800648c:	f000 fc0a 	bl	8006ca4 <__lshift>
 8006490:	9b00      	ldr	r3, [sp, #0]
 8006492:	3301      	adds	r3, #1
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800649a:	4413      	add	r3, r2
 800649c:	9308      	str	r3, [sp, #32]
 800649e:	9b02      	ldr	r3, [sp, #8]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	46b8      	mov	r8, r7
 80064a6:	9306      	str	r3, [sp, #24]
 80064a8:	4607      	mov	r7, r0
 80064aa:	9b04      	ldr	r3, [sp, #16]
 80064ac:	4631      	mov	r1, r6
 80064ae:	3b01      	subs	r3, #1
 80064b0:	4650      	mov	r0, sl
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	f7ff fa69 	bl	800598a <quorem>
 80064b8:	4641      	mov	r1, r8
 80064ba:	9002      	str	r0, [sp, #8]
 80064bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80064c0:	4650      	mov	r0, sl
 80064c2:	f000 fc5b 	bl	8006d7c <__mcmp>
 80064c6:	463a      	mov	r2, r7
 80064c8:	9005      	str	r0, [sp, #20]
 80064ca:	4631      	mov	r1, r6
 80064cc:	4620      	mov	r0, r4
 80064ce:	f000 fc71 	bl	8006db4 <__mdiff>
 80064d2:	68c2      	ldr	r2, [r0, #12]
 80064d4:	4605      	mov	r5, r0
 80064d6:	bb02      	cbnz	r2, 800651a <_dtoa_r+0xa7a>
 80064d8:	4601      	mov	r1, r0
 80064da:	4650      	mov	r0, sl
 80064dc:	f000 fc4e 	bl	8006d7c <__mcmp>
 80064e0:	4602      	mov	r2, r0
 80064e2:	4629      	mov	r1, r5
 80064e4:	4620      	mov	r0, r4
 80064e6:	9209      	str	r2, [sp, #36]	; 0x24
 80064e8:	f000 fa0c 	bl	8006904 <_Bfree>
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f0:	9d04      	ldr	r5, [sp, #16]
 80064f2:	ea43 0102 	orr.w	r1, r3, r2
 80064f6:	9b06      	ldr	r3, [sp, #24]
 80064f8:	4319      	orrs	r1, r3
 80064fa:	d110      	bne.n	800651e <_dtoa_r+0xa7e>
 80064fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006500:	d029      	beq.n	8006556 <_dtoa_r+0xab6>
 8006502:	9b05      	ldr	r3, [sp, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	dd02      	ble.n	800650e <_dtoa_r+0xa6e>
 8006508:	9b02      	ldr	r3, [sp, #8]
 800650a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	f883 9000 	strb.w	r9, [r3]
 8006514:	e774      	b.n	8006400 <_dtoa_r+0x960>
 8006516:	4638      	mov	r0, r7
 8006518:	e7ba      	b.n	8006490 <_dtoa_r+0x9f0>
 800651a:	2201      	movs	r2, #1
 800651c:	e7e1      	b.n	80064e2 <_dtoa_r+0xa42>
 800651e:	9b05      	ldr	r3, [sp, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	db04      	blt.n	800652e <_dtoa_r+0xa8e>
 8006524:	9907      	ldr	r1, [sp, #28]
 8006526:	430b      	orrs	r3, r1
 8006528:	9906      	ldr	r1, [sp, #24]
 800652a:	430b      	orrs	r3, r1
 800652c:	d120      	bne.n	8006570 <_dtoa_r+0xad0>
 800652e:	2a00      	cmp	r2, #0
 8006530:	dded      	ble.n	800650e <_dtoa_r+0xa6e>
 8006532:	4651      	mov	r1, sl
 8006534:	2201      	movs	r2, #1
 8006536:	4620      	mov	r0, r4
 8006538:	f000 fbb4 	bl	8006ca4 <__lshift>
 800653c:	4631      	mov	r1, r6
 800653e:	4682      	mov	sl, r0
 8006540:	f000 fc1c 	bl	8006d7c <__mcmp>
 8006544:	2800      	cmp	r0, #0
 8006546:	dc03      	bgt.n	8006550 <_dtoa_r+0xab0>
 8006548:	d1e1      	bne.n	800650e <_dtoa_r+0xa6e>
 800654a:	f019 0f01 	tst.w	r9, #1
 800654e:	d0de      	beq.n	800650e <_dtoa_r+0xa6e>
 8006550:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006554:	d1d8      	bne.n	8006508 <_dtoa_r+0xa68>
 8006556:	9a01      	ldr	r2, [sp, #4]
 8006558:	2339      	movs	r3, #57	; 0x39
 800655a:	7013      	strb	r3, [r2, #0]
 800655c:	462b      	mov	r3, r5
 800655e:	461d      	mov	r5, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006566:	2a39      	cmp	r2, #57	; 0x39
 8006568:	d06c      	beq.n	8006644 <_dtoa_r+0xba4>
 800656a:	3201      	adds	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	e747      	b.n	8006400 <_dtoa_r+0x960>
 8006570:	2a00      	cmp	r2, #0
 8006572:	dd07      	ble.n	8006584 <_dtoa_r+0xae4>
 8006574:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006578:	d0ed      	beq.n	8006556 <_dtoa_r+0xab6>
 800657a:	9a01      	ldr	r2, [sp, #4]
 800657c:	f109 0301 	add.w	r3, r9, #1
 8006580:	7013      	strb	r3, [r2, #0]
 8006582:	e73d      	b.n	8006400 <_dtoa_r+0x960>
 8006584:	9b04      	ldr	r3, [sp, #16]
 8006586:	9a08      	ldr	r2, [sp, #32]
 8006588:	f803 9c01 	strb.w	r9, [r3, #-1]
 800658c:	4293      	cmp	r3, r2
 800658e:	d043      	beq.n	8006618 <_dtoa_r+0xb78>
 8006590:	4651      	mov	r1, sl
 8006592:	2300      	movs	r3, #0
 8006594:	220a      	movs	r2, #10
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f9d6 	bl	8006948 <__multadd>
 800659c:	45b8      	cmp	r8, r7
 800659e:	4682      	mov	sl, r0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	f04f 020a 	mov.w	r2, #10
 80065a8:	4641      	mov	r1, r8
 80065aa:	4620      	mov	r0, r4
 80065ac:	d107      	bne.n	80065be <_dtoa_r+0xb1e>
 80065ae:	f000 f9cb 	bl	8006948 <__multadd>
 80065b2:	4680      	mov	r8, r0
 80065b4:	4607      	mov	r7, r0
 80065b6:	9b04      	ldr	r3, [sp, #16]
 80065b8:	3301      	adds	r3, #1
 80065ba:	9304      	str	r3, [sp, #16]
 80065bc:	e775      	b.n	80064aa <_dtoa_r+0xa0a>
 80065be:	f000 f9c3 	bl	8006948 <__multadd>
 80065c2:	4639      	mov	r1, r7
 80065c4:	4680      	mov	r8, r0
 80065c6:	2300      	movs	r3, #0
 80065c8:	220a      	movs	r2, #10
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f9bc 	bl	8006948 <__multadd>
 80065d0:	4607      	mov	r7, r0
 80065d2:	e7f0      	b.n	80065b6 <_dtoa_r+0xb16>
 80065d4:	9b04      	ldr	r3, [sp, #16]
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	9d00      	ldr	r5, [sp, #0]
 80065da:	4631      	mov	r1, r6
 80065dc:	4650      	mov	r0, sl
 80065de:	f7ff f9d4 	bl	800598a <quorem>
 80065e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	f805 9b01 	strb.w	r9, [r5], #1
 80065ec:	1aea      	subs	r2, r5, r3
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	4293      	cmp	r3, r2
 80065f2:	dd07      	ble.n	8006604 <_dtoa_r+0xb64>
 80065f4:	4651      	mov	r1, sl
 80065f6:	2300      	movs	r3, #0
 80065f8:	220a      	movs	r2, #10
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 f9a4 	bl	8006948 <__multadd>
 8006600:	4682      	mov	sl, r0
 8006602:	e7ea      	b.n	80065da <_dtoa_r+0xb3a>
 8006604:	9b01      	ldr	r3, [sp, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	bfc8      	it	gt
 800660a:	461d      	movgt	r5, r3
 800660c:	9b00      	ldr	r3, [sp, #0]
 800660e:	bfd8      	it	le
 8006610:	2501      	movle	r5, #1
 8006612:	441d      	add	r5, r3
 8006614:	f04f 0800 	mov.w	r8, #0
 8006618:	4651      	mov	r1, sl
 800661a:	2201      	movs	r2, #1
 800661c:	4620      	mov	r0, r4
 800661e:	f000 fb41 	bl	8006ca4 <__lshift>
 8006622:	4631      	mov	r1, r6
 8006624:	4682      	mov	sl, r0
 8006626:	f000 fba9 	bl	8006d7c <__mcmp>
 800662a:	2800      	cmp	r0, #0
 800662c:	dc96      	bgt.n	800655c <_dtoa_r+0xabc>
 800662e:	d102      	bne.n	8006636 <_dtoa_r+0xb96>
 8006630:	f019 0f01 	tst.w	r9, #1
 8006634:	d192      	bne.n	800655c <_dtoa_r+0xabc>
 8006636:	462b      	mov	r3, r5
 8006638:	461d      	mov	r5, r3
 800663a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800663e:	2a30      	cmp	r2, #48	; 0x30
 8006640:	d0fa      	beq.n	8006638 <_dtoa_r+0xb98>
 8006642:	e6dd      	b.n	8006400 <_dtoa_r+0x960>
 8006644:	9a00      	ldr	r2, [sp, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d189      	bne.n	800655e <_dtoa_r+0xabe>
 800664a:	f10b 0b01 	add.w	fp, fp, #1
 800664e:	2331      	movs	r3, #49	; 0x31
 8006650:	e796      	b.n	8006580 <_dtoa_r+0xae0>
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <_dtoa_r+0xbdc>)
 8006654:	f7ff ba99 	b.w	8005b8a <_dtoa_r+0xea>
 8006658:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800665a:	2b00      	cmp	r3, #0
 800665c:	f47f aa6d 	bne.w	8005b3a <_dtoa_r+0x9a>
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <_dtoa_r+0xbe0>)
 8006662:	f7ff ba92 	b.w	8005b8a <_dtoa_r+0xea>
 8006666:	9b01      	ldr	r3, [sp, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	dcb5      	bgt.n	80065d8 <_dtoa_r+0xb38>
 800666c:	9b07      	ldr	r3, [sp, #28]
 800666e:	2b02      	cmp	r3, #2
 8006670:	f73f aeb1 	bgt.w	80063d6 <_dtoa_r+0x936>
 8006674:	e7b0      	b.n	80065d8 <_dtoa_r+0xb38>
 8006676:	bf00      	nop
 8006678:	08008aec 	.word	0x08008aec
 800667c:	08008a4c 	.word	0x08008a4c
 8006680:	08008a70 	.word	0x08008a70

08006684 <_free_r>:
 8006684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006686:	2900      	cmp	r1, #0
 8006688:	d044      	beq.n	8006714 <_free_r+0x90>
 800668a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800668e:	9001      	str	r0, [sp, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f1a1 0404 	sub.w	r4, r1, #4
 8006696:	bfb8      	it	lt
 8006698:	18e4      	addlt	r4, r4, r3
 800669a:	f000 f8e7 	bl	800686c <__malloc_lock>
 800669e:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <_free_r+0x94>)
 80066a0:	9801      	ldr	r0, [sp, #4]
 80066a2:	6813      	ldr	r3, [r2, #0]
 80066a4:	b933      	cbnz	r3, 80066b4 <_free_r+0x30>
 80066a6:	6063      	str	r3, [r4, #4]
 80066a8:	6014      	str	r4, [r2, #0]
 80066aa:	b003      	add	sp, #12
 80066ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066b0:	f000 b8e2 	b.w	8006878 <__malloc_unlock>
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	d908      	bls.n	80066ca <_free_r+0x46>
 80066b8:	6825      	ldr	r5, [r4, #0]
 80066ba:	1961      	adds	r1, r4, r5
 80066bc:	428b      	cmp	r3, r1
 80066be:	bf01      	itttt	eq
 80066c0:	6819      	ldreq	r1, [r3, #0]
 80066c2:	685b      	ldreq	r3, [r3, #4]
 80066c4:	1949      	addeq	r1, r1, r5
 80066c6:	6021      	streq	r1, [r4, #0]
 80066c8:	e7ed      	b.n	80066a6 <_free_r+0x22>
 80066ca:	461a      	mov	r2, r3
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	b10b      	cbz	r3, 80066d4 <_free_r+0x50>
 80066d0:	42a3      	cmp	r3, r4
 80066d2:	d9fa      	bls.n	80066ca <_free_r+0x46>
 80066d4:	6811      	ldr	r1, [r2, #0]
 80066d6:	1855      	adds	r5, r2, r1
 80066d8:	42a5      	cmp	r5, r4
 80066da:	d10b      	bne.n	80066f4 <_free_r+0x70>
 80066dc:	6824      	ldr	r4, [r4, #0]
 80066de:	4421      	add	r1, r4
 80066e0:	1854      	adds	r4, r2, r1
 80066e2:	42a3      	cmp	r3, r4
 80066e4:	6011      	str	r1, [r2, #0]
 80066e6:	d1e0      	bne.n	80066aa <_free_r+0x26>
 80066e8:	681c      	ldr	r4, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	6053      	str	r3, [r2, #4]
 80066ee:	440c      	add	r4, r1
 80066f0:	6014      	str	r4, [r2, #0]
 80066f2:	e7da      	b.n	80066aa <_free_r+0x26>
 80066f4:	d902      	bls.n	80066fc <_free_r+0x78>
 80066f6:	230c      	movs	r3, #12
 80066f8:	6003      	str	r3, [r0, #0]
 80066fa:	e7d6      	b.n	80066aa <_free_r+0x26>
 80066fc:	6825      	ldr	r5, [r4, #0]
 80066fe:	1961      	adds	r1, r4, r5
 8006700:	428b      	cmp	r3, r1
 8006702:	bf04      	itt	eq
 8006704:	6819      	ldreq	r1, [r3, #0]
 8006706:	685b      	ldreq	r3, [r3, #4]
 8006708:	6063      	str	r3, [r4, #4]
 800670a:	bf04      	itt	eq
 800670c:	1949      	addeq	r1, r1, r5
 800670e:	6021      	streq	r1, [r4, #0]
 8006710:	6054      	str	r4, [r2, #4]
 8006712:	e7ca      	b.n	80066aa <_free_r+0x26>
 8006714:	b003      	add	sp, #12
 8006716:	bd30      	pop	{r4, r5, pc}
 8006718:	20000460 	.word	0x20000460

0800671c <malloc>:
 800671c:	4b02      	ldr	r3, [pc, #8]	; (8006728 <malloc+0xc>)
 800671e:	4601      	mov	r1, r0
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	f000 b823 	b.w	800676c <_malloc_r>
 8006726:	bf00      	nop
 8006728:	20000064 	.word	0x20000064

0800672c <sbrk_aligned>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	4e0e      	ldr	r6, [pc, #56]	; (8006768 <sbrk_aligned+0x3c>)
 8006730:	460c      	mov	r4, r1
 8006732:	6831      	ldr	r1, [r6, #0]
 8006734:	4605      	mov	r5, r0
 8006736:	b911      	cbnz	r1, 800673e <sbrk_aligned+0x12>
 8006738:	f000 fe40 	bl	80073bc <_sbrk_r>
 800673c:	6030      	str	r0, [r6, #0]
 800673e:	4621      	mov	r1, r4
 8006740:	4628      	mov	r0, r5
 8006742:	f000 fe3b 	bl	80073bc <_sbrk_r>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d00a      	beq.n	8006760 <sbrk_aligned+0x34>
 800674a:	1cc4      	adds	r4, r0, #3
 800674c:	f024 0403 	bic.w	r4, r4, #3
 8006750:	42a0      	cmp	r0, r4
 8006752:	d007      	beq.n	8006764 <sbrk_aligned+0x38>
 8006754:	1a21      	subs	r1, r4, r0
 8006756:	4628      	mov	r0, r5
 8006758:	f000 fe30 	bl	80073bc <_sbrk_r>
 800675c:	3001      	adds	r0, #1
 800675e:	d101      	bne.n	8006764 <sbrk_aligned+0x38>
 8006760:	f04f 34ff 	mov.w	r4, #4294967295
 8006764:	4620      	mov	r0, r4
 8006766:	bd70      	pop	{r4, r5, r6, pc}
 8006768:	20000464 	.word	0x20000464

0800676c <_malloc_r>:
 800676c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006770:	1ccd      	adds	r5, r1, #3
 8006772:	f025 0503 	bic.w	r5, r5, #3
 8006776:	3508      	adds	r5, #8
 8006778:	2d0c      	cmp	r5, #12
 800677a:	bf38      	it	cc
 800677c:	250c      	movcc	r5, #12
 800677e:	2d00      	cmp	r5, #0
 8006780:	4607      	mov	r7, r0
 8006782:	db01      	blt.n	8006788 <_malloc_r+0x1c>
 8006784:	42a9      	cmp	r1, r5
 8006786:	d905      	bls.n	8006794 <_malloc_r+0x28>
 8006788:	230c      	movs	r3, #12
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	2600      	movs	r6, #0
 800678e:	4630      	mov	r0, r6
 8006790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006794:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006868 <_malloc_r+0xfc>
 8006798:	f000 f868 	bl	800686c <__malloc_lock>
 800679c:	f8d8 3000 	ldr.w	r3, [r8]
 80067a0:	461c      	mov	r4, r3
 80067a2:	bb5c      	cbnz	r4, 80067fc <_malloc_r+0x90>
 80067a4:	4629      	mov	r1, r5
 80067a6:	4638      	mov	r0, r7
 80067a8:	f7ff ffc0 	bl	800672c <sbrk_aligned>
 80067ac:	1c43      	adds	r3, r0, #1
 80067ae:	4604      	mov	r4, r0
 80067b0:	d155      	bne.n	800685e <_malloc_r+0xf2>
 80067b2:	f8d8 4000 	ldr.w	r4, [r8]
 80067b6:	4626      	mov	r6, r4
 80067b8:	2e00      	cmp	r6, #0
 80067ba:	d145      	bne.n	8006848 <_malloc_r+0xdc>
 80067bc:	2c00      	cmp	r4, #0
 80067be:	d048      	beq.n	8006852 <_malloc_r+0xe6>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	4631      	mov	r1, r6
 80067c4:	4638      	mov	r0, r7
 80067c6:	eb04 0903 	add.w	r9, r4, r3
 80067ca:	f000 fdf7 	bl	80073bc <_sbrk_r>
 80067ce:	4581      	cmp	r9, r0
 80067d0:	d13f      	bne.n	8006852 <_malloc_r+0xe6>
 80067d2:	6821      	ldr	r1, [r4, #0]
 80067d4:	1a6d      	subs	r5, r5, r1
 80067d6:	4629      	mov	r1, r5
 80067d8:	4638      	mov	r0, r7
 80067da:	f7ff ffa7 	bl	800672c <sbrk_aligned>
 80067de:	3001      	adds	r0, #1
 80067e0:	d037      	beq.n	8006852 <_malloc_r+0xe6>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	442b      	add	r3, r5
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	f8d8 3000 	ldr.w	r3, [r8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d038      	beq.n	8006862 <_malloc_r+0xf6>
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	42a2      	cmp	r2, r4
 80067f4:	d12b      	bne.n	800684e <_malloc_r+0xe2>
 80067f6:	2200      	movs	r2, #0
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	e00f      	b.n	800681c <_malloc_r+0xb0>
 80067fc:	6822      	ldr	r2, [r4, #0]
 80067fe:	1b52      	subs	r2, r2, r5
 8006800:	d41f      	bmi.n	8006842 <_malloc_r+0xd6>
 8006802:	2a0b      	cmp	r2, #11
 8006804:	d917      	bls.n	8006836 <_malloc_r+0xca>
 8006806:	1961      	adds	r1, r4, r5
 8006808:	42a3      	cmp	r3, r4
 800680a:	6025      	str	r5, [r4, #0]
 800680c:	bf18      	it	ne
 800680e:	6059      	strne	r1, [r3, #4]
 8006810:	6863      	ldr	r3, [r4, #4]
 8006812:	bf08      	it	eq
 8006814:	f8c8 1000 	streq.w	r1, [r8]
 8006818:	5162      	str	r2, [r4, r5]
 800681a:	604b      	str	r3, [r1, #4]
 800681c:	4638      	mov	r0, r7
 800681e:	f104 060b 	add.w	r6, r4, #11
 8006822:	f000 f829 	bl	8006878 <__malloc_unlock>
 8006826:	f026 0607 	bic.w	r6, r6, #7
 800682a:	1d23      	adds	r3, r4, #4
 800682c:	1af2      	subs	r2, r6, r3
 800682e:	d0ae      	beq.n	800678e <_malloc_r+0x22>
 8006830:	1b9b      	subs	r3, r3, r6
 8006832:	50a3      	str	r3, [r4, r2]
 8006834:	e7ab      	b.n	800678e <_malloc_r+0x22>
 8006836:	42a3      	cmp	r3, r4
 8006838:	6862      	ldr	r2, [r4, #4]
 800683a:	d1dd      	bne.n	80067f8 <_malloc_r+0x8c>
 800683c:	f8c8 2000 	str.w	r2, [r8]
 8006840:	e7ec      	b.n	800681c <_malloc_r+0xb0>
 8006842:	4623      	mov	r3, r4
 8006844:	6864      	ldr	r4, [r4, #4]
 8006846:	e7ac      	b.n	80067a2 <_malloc_r+0x36>
 8006848:	4634      	mov	r4, r6
 800684a:	6876      	ldr	r6, [r6, #4]
 800684c:	e7b4      	b.n	80067b8 <_malloc_r+0x4c>
 800684e:	4613      	mov	r3, r2
 8006850:	e7cc      	b.n	80067ec <_malloc_r+0x80>
 8006852:	230c      	movs	r3, #12
 8006854:	603b      	str	r3, [r7, #0]
 8006856:	4638      	mov	r0, r7
 8006858:	f000 f80e 	bl	8006878 <__malloc_unlock>
 800685c:	e797      	b.n	800678e <_malloc_r+0x22>
 800685e:	6025      	str	r5, [r4, #0]
 8006860:	e7dc      	b.n	800681c <_malloc_r+0xb0>
 8006862:	605b      	str	r3, [r3, #4]
 8006864:	deff      	udf	#255	; 0xff
 8006866:	bf00      	nop
 8006868:	20000460 	.word	0x20000460

0800686c <__malloc_lock>:
 800686c:	4801      	ldr	r0, [pc, #4]	; (8006874 <__malloc_lock+0x8>)
 800686e:	f7ff b88a 	b.w	8005986 <__retarget_lock_acquire_recursive>
 8006872:	bf00      	nop
 8006874:	2000045c 	.word	0x2000045c

08006878 <__malloc_unlock>:
 8006878:	4801      	ldr	r0, [pc, #4]	; (8006880 <__malloc_unlock+0x8>)
 800687a:	f7ff b885 	b.w	8005988 <__retarget_lock_release_recursive>
 800687e:	bf00      	nop
 8006880:	2000045c 	.word	0x2000045c

08006884 <_Balloc>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	69c6      	ldr	r6, [r0, #28]
 8006888:	4604      	mov	r4, r0
 800688a:	460d      	mov	r5, r1
 800688c:	b976      	cbnz	r6, 80068ac <_Balloc+0x28>
 800688e:	2010      	movs	r0, #16
 8006890:	f7ff ff44 	bl	800671c <malloc>
 8006894:	4602      	mov	r2, r0
 8006896:	61e0      	str	r0, [r4, #28]
 8006898:	b920      	cbnz	r0, 80068a4 <_Balloc+0x20>
 800689a:	4b18      	ldr	r3, [pc, #96]	; (80068fc <_Balloc+0x78>)
 800689c:	4818      	ldr	r0, [pc, #96]	; (8006900 <_Balloc+0x7c>)
 800689e:	216b      	movs	r1, #107	; 0x6b
 80068a0:	f000 fdaa 	bl	80073f8 <__assert_func>
 80068a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068a8:	6006      	str	r6, [r0, #0]
 80068aa:	60c6      	str	r6, [r0, #12]
 80068ac:	69e6      	ldr	r6, [r4, #28]
 80068ae:	68f3      	ldr	r3, [r6, #12]
 80068b0:	b183      	cbz	r3, 80068d4 <_Balloc+0x50>
 80068b2:	69e3      	ldr	r3, [r4, #28]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068ba:	b9b8      	cbnz	r0, 80068ec <_Balloc+0x68>
 80068bc:	2101      	movs	r1, #1
 80068be:	fa01 f605 	lsl.w	r6, r1, r5
 80068c2:	1d72      	adds	r2, r6, #5
 80068c4:	0092      	lsls	r2, r2, #2
 80068c6:	4620      	mov	r0, r4
 80068c8:	f000 fdb4 	bl	8007434 <_calloc_r>
 80068cc:	b160      	cbz	r0, 80068e8 <_Balloc+0x64>
 80068ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068d2:	e00e      	b.n	80068f2 <_Balloc+0x6e>
 80068d4:	2221      	movs	r2, #33	; 0x21
 80068d6:	2104      	movs	r1, #4
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 fdab 	bl	8007434 <_calloc_r>
 80068de:	69e3      	ldr	r3, [r4, #28]
 80068e0:	60f0      	str	r0, [r6, #12]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e4      	bne.n	80068b2 <_Balloc+0x2e>
 80068e8:	2000      	movs	r0, #0
 80068ea:	bd70      	pop	{r4, r5, r6, pc}
 80068ec:	6802      	ldr	r2, [r0, #0]
 80068ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068f2:	2300      	movs	r3, #0
 80068f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068f8:	e7f7      	b.n	80068ea <_Balloc+0x66>
 80068fa:	bf00      	nop
 80068fc:	08008a7d 	.word	0x08008a7d
 8006900:	08008afd 	.word	0x08008afd

08006904 <_Bfree>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	69c6      	ldr	r6, [r0, #28]
 8006908:	4605      	mov	r5, r0
 800690a:	460c      	mov	r4, r1
 800690c:	b976      	cbnz	r6, 800692c <_Bfree+0x28>
 800690e:	2010      	movs	r0, #16
 8006910:	f7ff ff04 	bl	800671c <malloc>
 8006914:	4602      	mov	r2, r0
 8006916:	61e8      	str	r0, [r5, #28]
 8006918:	b920      	cbnz	r0, 8006924 <_Bfree+0x20>
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <_Bfree+0x3c>)
 800691c:	4809      	ldr	r0, [pc, #36]	; (8006944 <_Bfree+0x40>)
 800691e:	218f      	movs	r1, #143	; 0x8f
 8006920:	f000 fd6a 	bl	80073f8 <__assert_func>
 8006924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006928:	6006      	str	r6, [r0, #0]
 800692a:	60c6      	str	r6, [r0, #12]
 800692c:	b13c      	cbz	r4, 800693e <_Bfree+0x3a>
 800692e:	69eb      	ldr	r3, [r5, #28]
 8006930:	6862      	ldr	r2, [r4, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006938:	6021      	str	r1, [r4, #0]
 800693a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	08008a7d 	.word	0x08008a7d
 8006944:	08008afd 	.word	0x08008afd

08006948 <__multadd>:
 8006948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800694c:	690d      	ldr	r5, [r1, #16]
 800694e:	4607      	mov	r7, r0
 8006950:	460c      	mov	r4, r1
 8006952:	461e      	mov	r6, r3
 8006954:	f101 0c14 	add.w	ip, r1, #20
 8006958:	2000      	movs	r0, #0
 800695a:	f8dc 3000 	ldr.w	r3, [ip]
 800695e:	b299      	uxth	r1, r3
 8006960:	fb02 6101 	mla	r1, r2, r1, r6
 8006964:	0c1e      	lsrs	r6, r3, #16
 8006966:	0c0b      	lsrs	r3, r1, #16
 8006968:	fb02 3306 	mla	r3, r2, r6, r3
 800696c:	b289      	uxth	r1, r1
 800696e:	3001      	adds	r0, #1
 8006970:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006974:	4285      	cmp	r5, r0
 8006976:	f84c 1b04 	str.w	r1, [ip], #4
 800697a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800697e:	dcec      	bgt.n	800695a <__multadd+0x12>
 8006980:	b30e      	cbz	r6, 80069c6 <__multadd+0x7e>
 8006982:	68a3      	ldr	r3, [r4, #8]
 8006984:	42ab      	cmp	r3, r5
 8006986:	dc19      	bgt.n	80069bc <__multadd+0x74>
 8006988:	6861      	ldr	r1, [r4, #4]
 800698a:	4638      	mov	r0, r7
 800698c:	3101      	adds	r1, #1
 800698e:	f7ff ff79 	bl	8006884 <_Balloc>
 8006992:	4680      	mov	r8, r0
 8006994:	b928      	cbnz	r0, 80069a2 <__multadd+0x5a>
 8006996:	4602      	mov	r2, r0
 8006998:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <__multadd+0x84>)
 800699a:	480d      	ldr	r0, [pc, #52]	; (80069d0 <__multadd+0x88>)
 800699c:	21ba      	movs	r1, #186	; 0xba
 800699e:	f000 fd2b 	bl	80073f8 <__assert_func>
 80069a2:	6922      	ldr	r2, [r4, #16]
 80069a4:	3202      	adds	r2, #2
 80069a6:	f104 010c 	add.w	r1, r4, #12
 80069aa:	0092      	lsls	r2, r2, #2
 80069ac:	300c      	adds	r0, #12
 80069ae:	f000 fd15 	bl	80073dc <memcpy>
 80069b2:	4621      	mov	r1, r4
 80069b4:	4638      	mov	r0, r7
 80069b6:	f7ff ffa5 	bl	8006904 <_Bfree>
 80069ba:	4644      	mov	r4, r8
 80069bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069c0:	3501      	adds	r5, #1
 80069c2:	615e      	str	r6, [r3, #20]
 80069c4:	6125      	str	r5, [r4, #16]
 80069c6:	4620      	mov	r0, r4
 80069c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069cc:	08008aec 	.word	0x08008aec
 80069d0:	08008afd 	.word	0x08008afd

080069d4 <__hi0bits>:
 80069d4:	0c03      	lsrs	r3, r0, #16
 80069d6:	041b      	lsls	r3, r3, #16
 80069d8:	b9d3      	cbnz	r3, 8006a10 <__hi0bits+0x3c>
 80069da:	0400      	lsls	r0, r0, #16
 80069dc:	2310      	movs	r3, #16
 80069de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069e2:	bf04      	itt	eq
 80069e4:	0200      	lsleq	r0, r0, #8
 80069e6:	3308      	addeq	r3, #8
 80069e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069ec:	bf04      	itt	eq
 80069ee:	0100      	lsleq	r0, r0, #4
 80069f0:	3304      	addeq	r3, #4
 80069f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069f6:	bf04      	itt	eq
 80069f8:	0080      	lsleq	r0, r0, #2
 80069fa:	3302      	addeq	r3, #2
 80069fc:	2800      	cmp	r0, #0
 80069fe:	db05      	blt.n	8006a0c <__hi0bits+0x38>
 8006a00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a04:	f103 0301 	add.w	r3, r3, #1
 8006a08:	bf08      	it	eq
 8006a0a:	2320      	moveq	r3, #32
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	4770      	bx	lr
 8006a10:	2300      	movs	r3, #0
 8006a12:	e7e4      	b.n	80069de <__hi0bits+0xa>

08006a14 <__lo0bits>:
 8006a14:	6803      	ldr	r3, [r0, #0]
 8006a16:	f013 0207 	ands.w	r2, r3, #7
 8006a1a:	d00c      	beq.n	8006a36 <__lo0bits+0x22>
 8006a1c:	07d9      	lsls	r1, r3, #31
 8006a1e:	d422      	bmi.n	8006a66 <__lo0bits+0x52>
 8006a20:	079a      	lsls	r2, r3, #30
 8006a22:	bf49      	itett	mi
 8006a24:	085b      	lsrmi	r3, r3, #1
 8006a26:	089b      	lsrpl	r3, r3, #2
 8006a28:	6003      	strmi	r3, [r0, #0]
 8006a2a:	2201      	movmi	r2, #1
 8006a2c:	bf5c      	itt	pl
 8006a2e:	6003      	strpl	r3, [r0, #0]
 8006a30:	2202      	movpl	r2, #2
 8006a32:	4610      	mov	r0, r2
 8006a34:	4770      	bx	lr
 8006a36:	b299      	uxth	r1, r3
 8006a38:	b909      	cbnz	r1, 8006a3e <__lo0bits+0x2a>
 8006a3a:	0c1b      	lsrs	r3, r3, #16
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	b2d9      	uxtb	r1, r3
 8006a40:	b909      	cbnz	r1, 8006a46 <__lo0bits+0x32>
 8006a42:	3208      	adds	r2, #8
 8006a44:	0a1b      	lsrs	r3, r3, #8
 8006a46:	0719      	lsls	r1, r3, #28
 8006a48:	bf04      	itt	eq
 8006a4a:	091b      	lsreq	r3, r3, #4
 8006a4c:	3204      	addeq	r2, #4
 8006a4e:	0799      	lsls	r1, r3, #30
 8006a50:	bf04      	itt	eq
 8006a52:	089b      	lsreq	r3, r3, #2
 8006a54:	3202      	addeq	r2, #2
 8006a56:	07d9      	lsls	r1, r3, #31
 8006a58:	d403      	bmi.n	8006a62 <__lo0bits+0x4e>
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	f102 0201 	add.w	r2, r2, #1
 8006a60:	d003      	beq.n	8006a6a <__lo0bits+0x56>
 8006a62:	6003      	str	r3, [r0, #0]
 8006a64:	e7e5      	b.n	8006a32 <__lo0bits+0x1e>
 8006a66:	2200      	movs	r2, #0
 8006a68:	e7e3      	b.n	8006a32 <__lo0bits+0x1e>
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	e7e1      	b.n	8006a32 <__lo0bits+0x1e>
	...

08006a70 <__i2b>:
 8006a70:	b510      	push	{r4, lr}
 8006a72:	460c      	mov	r4, r1
 8006a74:	2101      	movs	r1, #1
 8006a76:	f7ff ff05 	bl	8006884 <_Balloc>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	b928      	cbnz	r0, 8006a8a <__i2b+0x1a>
 8006a7e:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <__i2b+0x24>)
 8006a80:	4805      	ldr	r0, [pc, #20]	; (8006a98 <__i2b+0x28>)
 8006a82:	f240 1145 	movw	r1, #325	; 0x145
 8006a86:	f000 fcb7 	bl	80073f8 <__assert_func>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	6144      	str	r4, [r0, #20]
 8006a8e:	6103      	str	r3, [r0, #16]
 8006a90:	bd10      	pop	{r4, pc}
 8006a92:	bf00      	nop
 8006a94:	08008aec 	.word	0x08008aec
 8006a98:	08008afd 	.word	0x08008afd

08006a9c <__multiply>:
 8006a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa0:	4691      	mov	r9, r2
 8006aa2:	690a      	ldr	r2, [r1, #16]
 8006aa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	bfb8      	it	lt
 8006aac:	460b      	movlt	r3, r1
 8006aae:	460c      	mov	r4, r1
 8006ab0:	bfbc      	itt	lt
 8006ab2:	464c      	movlt	r4, r9
 8006ab4:	4699      	movlt	r9, r3
 8006ab6:	6927      	ldr	r7, [r4, #16]
 8006ab8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006abc:	68a3      	ldr	r3, [r4, #8]
 8006abe:	6861      	ldr	r1, [r4, #4]
 8006ac0:	eb07 060a 	add.w	r6, r7, sl
 8006ac4:	42b3      	cmp	r3, r6
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	bfb8      	it	lt
 8006aca:	3101      	addlt	r1, #1
 8006acc:	f7ff feda 	bl	8006884 <_Balloc>
 8006ad0:	b930      	cbnz	r0, 8006ae0 <__multiply+0x44>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	4b44      	ldr	r3, [pc, #272]	; (8006be8 <__multiply+0x14c>)
 8006ad6:	4845      	ldr	r0, [pc, #276]	; (8006bec <__multiply+0x150>)
 8006ad8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006adc:	f000 fc8c 	bl	80073f8 <__assert_func>
 8006ae0:	f100 0514 	add.w	r5, r0, #20
 8006ae4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ae8:	462b      	mov	r3, r5
 8006aea:	2200      	movs	r2, #0
 8006aec:	4543      	cmp	r3, r8
 8006aee:	d321      	bcc.n	8006b34 <__multiply+0x98>
 8006af0:	f104 0314 	add.w	r3, r4, #20
 8006af4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006af8:	f109 0314 	add.w	r3, r9, #20
 8006afc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b00:	9202      	str	r2, [sp, #8]
 8006b02:	1b3a      	subs	r2, r7, r4
 8006b04:	3a15      	subs	r2, #21
 8006b06:	f022 0203 	bic.w	r2, r2, #3
 8006b0a:	3204      	adds	r2, #4
 8006b0c:	f104 0115 	add.w	r1, r4, #21
 8006b10:	428f      	cmp	r7, r1
 8006b12:	bf38      	it	cc
 8006b14:	2204      	movcc	r2, #4
 8006b16:	9201      	str	r2, [sp, #4]
 8006b18:	9a02      	ldr	r2, [sp, #8]
 8006b1a:	9303      	str	r3, [sp, #12]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d80c      	bhi.n	8006b3a <__multiply+0x9e>
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	dd03      	ble.n	8006b2c <__multiply+0x90>
 8006b24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d05b      	beq.n	8006be4 <__multiply+0x148>
 8006b2c:	6106      	str	r6, [r0, #16]
 8006b2e:	b005      	add	sp, #20
 8006b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b34:	f843 2b04 	str.w	r2, [r3], #4
 8006b38:	e7d8      	b.n	8006aec <__multiply+0x50>
 8006b3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b3e:	f1ba 0f00 	cmp.w	sl, #0
 8006b42:	d024      	beq.n	8006b8e <__multiply+0xf2>
 8006b44:	f104 0e14 	add.w	lr, r4, #20
 8006b48:	46a9      	mov	r9, r5
 8006b4a:	f04f 0c00 	mov.w	ip, #0
 8006b4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b52:	f8d9 1000 	ldr.w	r1, [r9]
 8006b56:	fa1f fb82 	uxth.w	fp, r2
 8006b5a:	b289      	uxth	r1, r1
 8006b5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b64:	f8d9 2000 	ldr.w	r2, [r9]
 8006b68:	4461      	add	r1, ip
 8006b6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b76:	b289      	uxth	r1, r1
 8006b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b7c:	4577      	cmp	r7, lr
 8006b7e:	f849 1b04 	str.w	r1, [r9], #4
 8006b82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b86:	d8e2      	bhi.n	8006b4e <__multiply+0xb2>
 8006b88:	9a01      	ldr	r2, [sp, #4]
 8006b8a:	f845 c002 	str.w	ip, [r5, r2]
 8006b8e:	9a03      	ldr	r2, [sp, #12]
 8006b90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b94:	3304      	adds	r3, #4
 8006b96:	f1b9 0f00 	cmp.w	r9, #0
 8006b9a:	d021      	beq.n	8006be0 <__multiply+0x144>
 8006b9c:	6829      	ldr	r1, [r5, #0]
 8006b9e:	f104 0c14 	add.w	ip, r4, #20
 8006ba2:	46ae      	mov	lr, r5
 8006ba4:	f04f 0a00 	mov.w	sl, #0
 8006ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8006bac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006bb0:	fb09 220b 	mla	r2, r9, fp, r2
 8006bb4:	4452      	add	r2, sl
 8006bb6:	b289      	uxth	r1, r1
 8006bb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bbc:	f84e 1b04 	str.w	r1, [lr], #4
 8006bc0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006bc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bc8:	f8be 1000 	ldrh.w	r1, [lr]
 8006bcc:	fb09 110a 	mla	r1, r9, sl, r1
 8006bd0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006bd4:	4567      	cmp	r7, ip
 8006bd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bda:	d8e5      	bhi.n	8006ba8 <__multiply+0x10c>
 8006bdc:	9a01      	ldr	r2, [sp, #4]
 8006bde:	50a9      	str	r1, [r5, r2]
 8006be0:	3504      	adds	r5, #4
 8006be2:	e799      	b.n	8006b18 <__multiply+0x7c>
 8006be4:	3e01      	subs	r6, #1
 8006be6:	e79b      	b.n	8006b20 <__multiply+0x84>
 8006be8:	08008aec 	.word	0x08008aec
 8006bec:	08008afd 	.word	0x08008afd

08006bf0 <__pow5mult>:
 8006bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf4:	4615      	mov	r5, r2
 8006bf6:	f012 0203 	ands.w	r2, r2, #3
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	d007      	beq.n	8006c10 <__pow5mult+0x20>
 8006c00:	4c25      	ldr	r4, [pc, #148]	; (8006c98 <__pow5mult+0xa8>)
 8006c02:	3a01      	subs	r2, #1
 8006c04:	2300      	movs	r3, #0
 8006c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c0a:	f7ff fe9d 	bl	8006948 <__multadd>
 8006c0e:	4607      	mov	r7, r0
 8006c10:	10ad      	asrs	r5, r5, #2
 8006c12:	d03d      	beq.n	8006c90 <__pow5mult+0xa0>
 8006c14:	69f4      	ldr	r4, [r6, #28]
 8006c16:	b97c      	cbnz	r4, 8006c38 <__pow5mult+0x48>
 8006c18:	2010      	movs	r0, #16
 8006c1a:	f7ff fd7f 	bl	800671c <malloc>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	61f0      	str	r0, [r6, #28]
 8006c22:	b928      	cbnz	r0, 8006c30 <__pow5mult+0x40>
 8006c24:	4b1d      	ldr	r3, [pc, #116]	; (8006c9c <__pow5mult+0xac>)
 8006c26:	481e      	ldr	r0, [pc, #120]	; (8006ca0 <__pow5mult+0xb0>)
 8006c28:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c2c:	f000 fbe4 	bl	80073f8 <__assert_func>
 8006c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c34:	6004      	str	r4, [r0, #0]
 8006c36:	60c4      	str	r4, [r0, #12]
 8006c38:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c40:	b94c      	cbnz	r4, 8006c56 <__pow5mult+0x66>
 8006c42:	f240 2171 	movw	r1, #625	; 0x271
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7ff ff12 	bl	8006a70 <__i2b>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c52:	4604      	mov	r4, r0
 8006c54:	6003      	str	r3, [r0, #0]
 8006c56:	f04f 0900 	mov.w	r9, #0
 8006c5a:	07eb      	lsls	r3, r5, #31
 8006c5c:	d50a      	bpl.n	8006c74 <__pow5mult+0x84>
 8006c5e:	4639      	mov	r1, r7
 8006c60:	4622      	mov	r2, r4
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff ff1a 	bl	8006a9c <__multiply>
 8006c68:	4639      	mov	r1, r7
 8006c6a:	4680      	mov	r8, r0
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7ff fe49 	bl	8006904 <_Bfree>
 8006c72:	4647      	mov	r7, r8
 8006c74:	106d      	asrs	r5, r5, #1
 8006c76:	d00b      	beq.n	8006c90 <__pow5mult+0xa0>
 8006c78:	6820      	ldr	r0, [r4, #0]
 8006c7a:	b938      	cbnz	r0, 8006c8c <__pow5mult+0x9c>
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff ff0b 	bl	8006a9c <__multiply>
 8006c86:	6020      	str	r0, [r4, #0]
 8006c88:	f8c0 9000 	str.w	r9, [r0]
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	e7e4      	b.n	8006c5a <__pow5mult+0x6a>
 8006c90:	4638      	mov	r0, r7
 8006c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c96:	bf00      	nop
 8006c98:	08008c48 	.word	0x08008c48
 8006c9c:	08008a7d 	.word	0x08008a7d
 8006ca0:	08008afd 	.word	0x08008afd

08006ca4 <__lshift>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	460c      	mov	r4, r1
 8006caa:	6849      	ldr	r1, [r1, #4]
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cb2:	68a3      	ldr	r3, [r4, #8]
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	4691      	mov	r9, r2
 8006cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cbc:	f108 0601 	add.w	r6, r8, #1
 8006cc0:	42b3      	cmp	r3, r6
 8006cc2:	db0b      	blt.n	8006cdc <__lshift+0x38>
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7ff fddd 	bl	8006884 <_Balloc>
 8006cca:	4605      	mov	r5, r0
 8006ccc:	b948      	cbnz	r0, 8006ce2 <__lshift+0x3e>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <__lshift+0xd0>)
 8006cd2:	4829      	ldr	r0, [pc, #164]	; (8006d78 <__lshift+0xd4>)
 8006cd4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006cd8:	f000 fb8e 	bl	80073f8 <__assert_func>
 8006cdc:	3101      	adds	r1, #1
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	e7ee      	b.n	8006cc0 <__lshift+0x1c>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f100 0114 	add.w	r1, r0, #20
 8006ce8:	f100 0210 	add.w	r2, r0, #16
 8006cec:	4618      	mov	r0, r3
 8006cee:	4553      	cmp	r3, sl
 8006cf0:	db33      	blt.n	8006d5a <__lshift+0xb6>
 8006cf2:	6920      	ldr	r0, [r4, #16]
 8006cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cf8:	f104 0314 	add.w	r3, r4, #20
 8006cfc:	f019 091f 	ands.w	r9, r9, #31
 8006d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d08:	d02b      	beq.n	8006d62 <__lshift+0xbe>
 8006d0a:	f1c9 0e20 	rsb	lr, r9, #32
 8006d0e:	468a      	mov	sl, r1
 8006d10:	2200      	movs	r2, #0
 8006d12:	6818      	ldr	r0, [r3, #0]
 8006d14:	fa00 f009 	lsl.w	r0, r0, r9
 8006d18:	4310      	orrs	r0, r2
 8006d1a:	f84a 0b04 	str.w	r0, [sl], #4
 8006d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d22:	459c      	cmp	ip, r3
 8006d24:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d28:	d8f3      	bhi.n	8006d12 <__lshift+0x6e>
 8006d2a:	ebac 0304 	sub.w	r3, ip, r4
 8006d2e:	3b15      	subs	r3, #21
 8006d30:	f023 0303 	bic.w	r3, r3, #3
 8006d34:	3304      	adds	r3, #4
 8006d36:	f104 0015 	add.w	r0, r4, #21
 8006d3a:	4584      	cmp	ip, r0
 8006d3c:	bf38      	it	cc
 8006d3e:	2304      	movcc	r3, #4
 8006d40:	50ca      	str	r2, [r1, r3]
 8006d42:	b10a      	cbz	r2, 8006d48 <__lshift+0xa4>
 8006d44:	f108 0602 	add.w	r6, r8, #2
 8006d48:	3e01      	subs	r6, #1
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	612e      	str	r6, [r5, #16]
 8006d4e:	4621      	mov	r1, r4
 8006d50:	f7ff fdd8 	bl	8006904 <_Bfree>
 8006d54:	4628      	mov	r0, r5
 8006d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d5e:	3301      	adds	r3, #1
 8006d60:	e7c5      	b.n	8006cee <__lshift+0x4a>
 8006d62:	3904      	subs	r1, #4
 8006d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d68:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d6c:	459c      	cmp	ip, r3
 8006d6e:	d8f9      	bhi.n	8006d64 <__lshift+0xc0>
 8006d70:	e7ea      	b.n	8006d48 <__lshift+0xa4>
 8006d72:	bf00      	nop
 8006d74:	08008aec 	.word	0x08008aec
 8006d78:	08008afd 	.word	0x08008afd

08006d7c <__mcmp>:
 8006d7c:	b530      	push	{r4, r5, lr}
 8006d7e:	6902      	ldr	r2, [r0, #16]
 8006d80:	690c      	ldr	r4, [r1, #16]
 8006d82:	1b12      	subs	r2, r2, r4
 8006d84:	d10e      	bne.n	8006da4 <__mcmp+0x28>
 8006d86:	f100 0314 	add.w	r3, r0, #20
 8006d8a:	3114      	adds	r1, #20
 8006d8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d9c:	42a5      	cmp	r5, r4
 8006d9e:	d003      	beq.n	8006da8 <__mcmp+0x2c>
 8006da0:	d305      	bcc.n	8006dae <__mcmp+0x32>
 8006da2:	2201      	movs	r2, #1
 8006da4:	4610      	mov	r0, r2
 8006da6:	bd30      	pop	{r4, r5, pc}
 8006da8:	4283      	cmp	r3, r0
 8006daa:	d3f3      	bcc.n	8006d94 <__mcmp+0x18>
 8006dac:	e7fa      	b.n	8006da4 <__mcmp+0x28>
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	e7f7      	b.n	8006da4 <__mcmp+0x28>

08006db4 <__mdiff>:
 8006db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db8:	460c      	mov	r4, r1
 8006dba:	4606      	mov	r6, r0
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4690      	mov	r8, r2
 8006dc2:	f7ff ffdb 	bl	8006d7c <__mcmp>
 8006dc6:	1e05      	subs	r5, r0, #0
 8006dc8:	d110      	bne.n	8006dec <__mdiff+0x38>
 8006dca:	4629      	mov	r1, r5
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f7ff fd59 	bl	8006884 <_Balloc>
 8006dd2:	b930      	cbnz	r0, 8006de2 <__mdiff+0x2e>
 8006dd4:	4b3a      	ldr	r3, [pc, #232]	; (8006ec0 <__mdiff+0x10c>)
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	f240 2137 	movw	r1, #567	; 0x237
 8006ddc:	4839      	ldr	r0, [pc, #228]	; (8006ec4 <__mdiff+0x110>)
 8006dde:	f000 fb0b 	bl	80073f8 <__assert_func>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006de8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dec:	bfa4      	itt	ge
 8006dee:	4643      	movge	r3, r8
 8006df0:	46a0      	movge	r8, r4
 8006df2:	4630      	mov	r0, r6
 8006df4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006df8:	bfa6      	itte	ge
 8006dfa:	461c      	movge	r4, r3
 8006dfc:	2500      	movge	r5, #0
 8006dfe:	2501      	movlt	r5, #1
 8006e00:	f7ff fd40 	bl	8006884 <_Balloc>
 8006e04:	b920      	cbnz	r0, 8006e10 <__mdiff+0x5c>
 8006e06:	4b2e      	ldr	r3, [pc, #184]	; (8006ec0 <__mdiff+0x10c>)
 8006e08:	4602      	mov	r2, r0
 8006e0a:	f240 2145 	movw	r1, #581	; 0x245
 8006e0e:	e7e5      	b.n	8006ddc <__mdiff+0x28>
 8006e10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e14:	6926      	ldr	r6, [r4, #16]
 8006e16:	60c5      	str	r5, [r0, #12]
 8006e18:	f104 0914 	add.w	r9, r4, #20
 8006e1c:	f108 0514 	add.w	r5, r8, #20
 8006e20:	f100 0e14 	add.w	lr, r0, #20
 8006e24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e2c:	f108 0210 	add.w	r2, r8, #16
 8006e30:	46f2      	mov	sl, lr
 8006e32:	2100      	movs	r1, #0
 8006e34:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e3c:	fa11 f88b 	uxtah	r8, r1, fp
 8006e40:	b299      	uxth	r1, r3
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	eba8 0801 	sub.w	r8, r8, r1
 8006e48:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e4c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e50:	fa1f f888 	uxth.w	r8, r8
 8006e54:	1419      	asrs	r1, r3, #16
 8006e56:	454e      	cmp	r6, r9
 8006e58:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e5c:	f84a 3b04 	str.w	r3, [sl], #4
 8006e60:	d8e8      	bhi.n	8006e34 <__mdiff+0x80>
 8006e62:	1b33      	subs	r3, r6, r4
 8006e64:	3b15      	subs	r3, #21
 8006e66:	f023 0303 	bic.w	r3, r3, #3
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	3415      	adds	r4, #21
 8006e6e:	42a6      	cmp	r6, r4
 8006e70:	bf38      	it	cc
 8006e72:	2304      	movcc	r3, #4
 8006e74:	441d      	add	r5, r3
 8006e76:	4473      	add	r3, lr
 8006e78:	469e      	mov	lr, r3
 8006e7a:	462e      	mov	r6, r5
 8006e7c:	4566      	cmp	r6, ip
 8006e7e:	d30e      	bcc.n	8006e9e <__mdiff+0xea>
 8006e80:	f10c 0203 	add.w	r2, ip, #3
 8006e84:	1b52      	subs	r2, r2, r5
 8006e86:	f022 0203 	bic.w	r2, r2, #3
 8006e8a:	3d03      	subs	r5, #3
 8006e8c:	45ac      	cmp	ip, r5
 8006e8e:	bf38      	it	cc
 8006e90:	2200      	movcc	r2, #0
 8006e92:	4413      	add	r3, r2
 8006e94:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e98:	b17a      	cbz	r2, 8006eba <__mdiff+0x106>
 8006e9a:	6107      	str	r7, [r0, #16]
 8006e9c:	e7a4      	b.n	8006de8 <__mdiff+0x34>
 8006e9e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ea2:	fa11 f288 	uxtah	r2, r1, r8
 8006ea6:	1414      	asrs	r4, r2, #16
 8006ea8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006eac:	b292      	uxth	r2, r2
 8006eae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006eb2:	f84e 2b04 	str.w	r2, [lr], #4
 8006eb6:	1421      	asrs	r1, r4, #16
 8006eb8:	e7e0      	b.n	8006e7c <__mdiff+0xc8>
 8006eba:	3f01      	subs	r7, #1
 8006ebc:	e7ea      	b.n	8006e94 <__mdiff+0xe0>
 8006ebe:	bf00      	nop
 8006ec0:	08008aec 	.word	0x08008aec
 8006ec4:	08008afd 	.word	0x08008afd

08006ec8 <__d2b>:
 8006ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ecc:	460f      	mov	r7, r1
 8006ece:	2101      	movs	r1, #1
 8006ed0:	ec59 8b10 	vmov	r8, r9, d0
 8006ed4:	4616      	mov	r6, r2
 8006ed6:	f7ff fcd5 	bl	8006884 <_Balloc>
 8006eda:	4604      	mov	r4, r0
 8006edc:	b930      	cbnz	r0, 8006eec <__d2b+0x24>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	4b24      	ldr	r3, [pc, #144]	; (8006f74 <__d2b+0xac>)
 8006ee2:	4825      	ldr	r0, [pc, #148]	; (8006f78 <__d2b+0xb0>)
 8006ee4:	f240 310f 	movw	r1, #783	; 0x30f
 8006ee8:	f000 fa86 	bl	80073f8 <__assert_func>
 8006eec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ef4:	bb2d      	cbnz	r5, 8006f42 <__d2b+0x7a>
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	f1b8 0300 	subs.w	r3, r8, #0
 8006efc:	d026      	beq.n	8006f4c <__d2b+0x84>
 8006efe:	4668      	mov	r0, sp
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	f7ff fd87 	bl	8006a14 <__lo0bits>
 8006f06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f0a:	b1e8      	cbz	r0, 8006f48 <__d2b+0x80>
 8006f0c:	f1c0 0320 	rsb	r3, r0, #32
 8006f10:	fa02 f303 	lsl.w	r3, r2, r3
 8006f14:	430b      	orrs	r3, r1
 8006f16:	40c2      	lsrs	r2, r0
 8006f18:	6163      	str	r3, [r4, #20]
 8006f1a:	9201      	str	r2, [sp, #4]
 8006f1c:	9b01      	ldr	r3, [sp, #4]
 8006f1e:	61a3      	str	r3, [r4, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf14      	ite	ne
 8006f24:	2202      	movne	r2, #2
 8006f26:	2201      	moveq	r2, #1
 8006f28:	6122      	str	r2, [r4, #16]
 8006f2a:	b1bd      	cbz	r5, 8006f5c <__d2b+0x94>
 8006f2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f30:	4405      	add	r5, r0
 8006f32:	603d      	str	r5, [r7, #0]
 8006f34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f38:	6030      	str	r0, [r6, #0]
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	b003      	add	sp, #12
 8006f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f46:	e7d6      	b.n	8006ef6 <__d2b+0x2e>
 8006f48:	6161      	str	r1, [r4, #20]
 8006f4a:	e7e7      	b.n	8006f1c <__d2b+0x54>
 8006f4c:	a801      	add	r0, sp, #4
 8006f4e:	f7ff fd61 	bl	8006a14 <__lo0bits>
 8006f52:	9b01      	ldr	r3, [sp, #4]
 8006f54:	6163      	str	r3, [r4, #20]
 8006f56:	3020      	adds	r0, #32
 8006f58:	2201      	movs	r2, #1
 8006f5a:	e7e5      	b.n	8006f28 <__d2b+0x60>
 8006f5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f64:	6038      	str	r0, [r7, #0]
 8006f66:	6918      	ldr	r0, [r3, #16]
 8006f68:	f7ff fd34 	bl	80069d4 <__hi0bits>
 8006f6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f70:	e7e2      	b.n	8006f38 <__d2b+0x70>
 8006f72:	bf00      	nop
 8006f74:	08008aec 	.word	0x08008aec
 8006f78:	08008afd 	.word	0x08008afd

08006f7c <__ssputs_r>:
 8006f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f80:	688e      	ldr	r6, [r1, #8]
 8006f82:	461f      	mov	r7, r3
 8006f84:	42be      	cmp	r6, r7
 8006f86:	680b      	ldr	r3, [r1, #0]
 8006f88:	4682      	mov	sl, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	4690      	mov	r8, r2
 8006f8e:	d82c      	bhi.n	8006fea <__ssputs_r+0x6e>
 8006f90:	898a      	ldrh	r2, [r1, #12]
 8006f92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f96:	d026      	beq.n	8006fe6 <__ssputs_r+0x6a>
 8006f98:	6965      	ldr	r5, [r4, #20]
 8006f9a:	6909      	ldr	r1, [r1, #16]
 8006f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fa0:	eba3 0901 	sub.w	r9, r3, r1
 8006fa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fa8:	1c7b      	adds	r3, r7, #1
 8006faa:	444b      	add	r3, r9
 8006fac:	106d      	asrs	r5, r5, #1
 8006fae:	429d      	cmp	r5, r3
 8006fb0:	bf38      	it	cc
 8006fb2:	461d      	movcc	r5, r3
 8006fb4:	0553      	lsls	r3, r2, #21
 8006fb6:	d527      	bpl.n	8007008 <__ssputs_r+0x8c>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f7ff fbd7 	bl	800676c <_malloc_r>
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	b360      	cbz	r0, 800701c <__ssputs_r+0xa0>
 8006fc2:	6921      	ldr	r1, [r4, #16]
 8006fc4:	464a      	mov	r2, r9
 8006fc6:	f000 fa09 	bl	80073dc <memcpy>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	6126      	str	r6, [r4, #16]
 8006fd8:	6165      	str	r5, [r4, #20]
 8006fda:	444e      	add	r6, r9
 8006fdc:	eba5 0509 	sub.w	r5, r5, r9
 8006fe0:	6026      	str	r6, [r4, #0]
 8006fe2:	60a5      	str	r5, [r4, #8]
 8006fe4:	463e      	mov	r6, r7
 8006fe6:	42be      	cmp	r6, r7
 8006fe8:	d900      	bls.n	8006fec <__ssputs_r+0x70>
 8006fea:	463e      	mov	r6, r7
 8006fec:	6820      	ldr	r0, [r4, #0]
 8006fee:	4632      	mov	r2, r6
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	f000 f9c9 	bl	8007388 <memmove>
 8006ff6:	68a3      	ldr	r3, [r4, #8]
 8006ff8:	1b9b      	subs	r3, r3, r6
 8006ffa:	60a3      	str	r3, [r4, #8]
 8006ffc:	6823      	ldr	r3, [r4, #0]
 8006ffe:	4433      	add	r3, r6
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	2000      	movs	r0, #0
 8007004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007008:	462a      	mov	r2, r5
 800700a:	f000 fa3b 	bl	8007484 <_realloc_r>
 800700e:	4606      	mov	r6, r0
 8007010:	2800      	cmp	r0, #0
 8007012:	d1e0      	bne.n	8006fd6 <__ssputs_r+0x5a>
 8007014:	6921      	ldr	r1, [r4, #16]
 8007016:	4650      	mov	r0, sl
 8007018:	f7ff fb34 	bl	8006684 <_free_r>
 800701c:	230c      	movs	r3, #12
 800701e:	f8ca 3000 	str.w	r3, [sl]
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007028:	81a3      	strh	r3, [r4, #12]
 800702a:	f04f 30ff 	mov.w	r0, #4294967295
 800702e:	e7e9      	b.n	8007004 <__ssputs_r+0x88>

08007030 <_svfiprintf_r>:
 8007030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007034:	4698      	mov	r8, r3
 8007036:	898b      	ldrh	r3, [r1, #12]
 8007038:	061b      	lsls	r3, r3, #24
 800703a:	b09d      	sub	sp, #116	; 0x74
 800703c:	4607      	mov	r7, r0
 800703e:	460d      	mov	r5, r1
 8007040:	4614      	mov	r4, r2
 8007042:	d50e      	bpl.n	8007062 <_svfiprintf_r+0x32>
 8007044:	690b      	ldr	r3, [r1, #16]
 8007046:	b963      	cbnz	r3, 8007062 <_svfiprintf_r+0x32>
 8007048:	2140      	movs	r1, #64	; 0x40
 800704a:	f7ff fb8f 	bl	800676c <_malloc_r>
 800704e:	6028      	str	r0, [r5, #0]
 8007050:	6128      	str	r0, [r5, #16]
 8007052:	b920      	cbnz	r0, 800705e <_svfiprintf_r+0x2e>
 8007054:	230c      	movs	r3, #12
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	f04f 30ff 	mov.w	r0, #4294967295
 800705c:	e0d0      	b.n	8007200 <_svfiprintf_r+0x1d0>
 800705e:	2340      	movs	r3, #64	; 0x40
 8007060:	616b      	str	r3, [r5, #20]
 8007062:	2300      	movs	r3, #0
 8007064:	9309      	str	r3, [sp, #36]	; 0x24
 8007066:	2320      	movs	r3, #32
 8007068:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800706c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007070:	2330      	movs	r3, #48	; 0x30
 8007072:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007218 <_svfiprintf_r+0x1e8>
 8007076:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800707a:	f04f 0901 	mov.w	r9, #1
 800707e:	4623      	mov	r3, r4
 8007080:	469a      	mov	sl, r3
 8007082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007086:	b10a      	cbz	r2, 800708c <_svfiprintf_r+0x5c>
 8007088:	2a25      	cmp	r2, #37	; 0x25
 800708a:	d1f9      	bne.n	8007080 <_svfiprintf_r+0x50>
 800708c:	ebba 0b04 	subs.w	fp, sl, r4
 8007090:	d00b      	beq.n	80070aa <_svfiprintf_r+0x7a>
 8007092:	465b      	mov	r3, fp
 8007094:	4622      	mov	r2, r4
 8007096:	4629      	mov	r1, r5
 8007098:	4638      	mov	r0, r7
 800709a:	f7ff ff6f 	bl	8006f7c <__ssputs_r>
 800709e:	3001      	adds	r0, #1
 80070a0:	f000 80a9 	beq.w	80071f6 <_svfiprintf_r+0x1c6>
 80070a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a6:	445a      	add	r2, fp
 80070a8:	9209      	str	r2, [sp, #36]	; 0x24
 80070aa:	f89a 3000 	ldrb.w	r3, [sl]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 80a1 	beq.w	80071f6 <_svfiprintf_r+0x1c6>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070be:	f10a 0a01 	add.w	sl, sl, #1
 80070c2:	9304      	str	r3, [sp, #16]
 80070c4:	9307      	str	r3, [sp, #28]
 80070c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ca:	931a      	str	r3, [sp, #104]	; 0x68
 80070cc:	4654      	mov	r4, sl
 80070ce:	2205      	movs	r2, #5
 80070d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d4:	4850      	ldr	r0, [pc, #320]	; (8007218 <_svfiprintf_r+0x1e8>)
 80070d6:	f7f9 f883 	bl	80001e0 <memchr>
 80070da:	9a04      	ldr	r2, [sp, #16]
 80070dc:	b9d8      	cbnz	r0, 8007116 <_svfiprintf_r+0xe6>
 80070de:	06d0      	lsls	r0, r2, #27
 80070e0:	bf44      	itt	mi
 80070e2:	2320      	movmi	r3, #32
 80070e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e8:	0711      	lsls	r1, r2, #28
 80070ea:	bf44      	itt	mi
 80070ec:	232b      	movmi	r3, #43	; 0x2b
 80070ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f2:	f89a 3000 	ldrb.w	r3, [sl]
 80070f6:	2b2a      	cmp	r3, #42	; 0x2a
 80070f8:	d015      	beq.n	8007126 <_svfiprintf_r+0xf6>
 80070fa:	9a07      	ldr	r2, [sp, #28]
 80070fc:	4654      	mov	r4, sl
 80070fe:	2000      	movs	r0, #0
 8007100:	f04f 0c0a 	mov.w	ip, #10
 8007104:	4621      	mov	r1, r4
 8007106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710a:	3b30      	subs	r3, #48	; 0x30
 800710c:	2b09      	cmp	r3, #9
 800710e:	d94d      	bls.n	80071ac <_svfiprintf_r+0x17c>
 8007110:	b1b0      	cbz	r0, 8007140 <_svfiprintf_r+0x110>
 8007112:	9207      	str	r2, [sp, #28]
 8007114:	e014      	b.n	8007140 <_svfiprintf_r+0x110>
 8007116:	eba0 0308 	sub.w	r3, r0, r8
 800711a:	fa09 f303 	lsl.w	r3, r9, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	9304      	str	r3, [sp, #16]
 8007122:	46a2      	mov	sl, r4
 8007124:	e7d2      	b.n	80070cc <_svfiprintf_r+0x9c>
 8007126:	9b03      	ldr	r3, [sp, #12]
 8007128:	1d19      	adds	r1, r3, #4
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	9103      	str	r1, [sp, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	bfbb      	ittet	lt
 8007132:	425b      	neglt	r3, r3
 8007134:	f042 0202 	orrlt.w	r2, r2, #2
 8007138:	9307      	strge	r3, [sp, #28]
 800713a:	9307      	strlt	r3, [sp, #28]
 800713c:	bfb8      	it	lt
 800713e:	9204      	strlt	r2, [sp, #16]
 8007140:	7823      	ldrb	r3, [r4, #0]
 8007142:	2b2e      	cmp	r3, #46	; 0x2e
 8007144:	d10c      	bne.n	8007160 <_svfiprintf_r+0x130>
 8007146:	7863      	ldrb	r3, [r4, #1]
 8007148:	2b2a      	cmp	r3, #42	; 0x2a
 800714a:	d134      	bne.n	80071b6 <_svfiprintf_r+0x186>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	1d1a      	adds	r2, r3, #4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	9203      	str	r2, [sp, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	bfb8      	it	lt
 8007158:	f04f 33ff 	movlt.w	r3, #4294967295
 800715c:	3402      	adds	r4, #2
 800715e:	9305      	str	r3, [sp, #20]
 8007160:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007228 <_svfiprintf_r+0x1f8>
 8007164:	7821      	ldrb	r1, [r4, #0]
 8007166:	2203      	movs	r2, #3
 8007168:	4650      	mov	r0, sl
 800716a:	f7f9 f839 	bl	80001e0 <memchr>
 800716e:	b138      	cbz	r0, 8007180 <_svfiprintf_r+0x150>
 8007170:	9b04      	ldr	r3, [sp, #16]
 8007172:	eba0 000a 	sub.w	r0, r0, sl
 8007176:	2240      	movs	r2, #64	; 0x40
 8007178:	4082      	lsls	r2, r0
 800717a:	4313      	orrs	r3, r2
 800717c:	3401      	adds	r4, #1
 800717e:	9304      	str	r3, [sp, #16]
 8007180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007184:	4825      	ldr	r0, [pc, #148]	; (800721c <_svfiprintf_r+0x1ec>)
 8007186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800718a:	2206      	movs	r2, #6
 800718c:	f7f9 f828 	bl	80001e0 <memchr>
 8007190:	2800      	cmp	r0, #0
 8007192:	d038      	beq.n	8007206 <_svfiprintf_r+0x1d6>
 8007194:	4b22      	ldr	r3, [pc, #136]	; (8007220 <_svfiprintf_r+0x1f0>)
 8007196:	bb1b      	cbnz	r3, 80071e0 <_svfiprintf_r+0x1b0>
 8007198:	9b03      	ldr	r3, [sp, #12]
 800719a:	3307      	adds	r3, #7
 800719c:	f023 0307 	bic.w	r3, r3, #7
 80071a0:	3308      	adds	r3, #8
 80071a2:	9303      	str	r3, [sp, #12]
 80071a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a6:	4433      	add	r3, r6
 80071a8:	9309      	str	r3, [sp, #36]	; 0x24
 80071aa:	e768      	b.n	800707e <_svfiprintf_r+0x4e>
 80071ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b0:	460c      	mov	r4, r1
 80071b2:	2001      	movs	r0, #1
 80071b4:	e7a6      	b.n	8007104 <_svfiprintf_r+0xd4>
 80071b6:	2300      	movs	r3, #0
 80071b8:	3401      	adds	r4, #1
 80071ba:	9305      	str	r3, [sp, #20]
 80071bc:	4619      	mov	r1, r3
 80071be:	f04f 0c0a 	mov.w	ip, #10
 80071c2:	4620      	mov	r0, r4
 80071c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c8:	3a30      	subs	r2, #48	; 0x30
 80071ca:	2a09      	cmp	r2, #9
 80071cc:	d903      	bls.n	80071d6 <_svfiprintf_r+0x1a6>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0c6      	beq.n	8007160 <_svfiprintf_r+0x130>
 80071d2:	9105      	str	r1, [sp, #20]
 80071d4:	e7c4      	b.n	8007160 <_svfiprintf_r+0x130>
 80071d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071da:	4604      	mov	r4, r0
 80071dc:	2301      	movs	r3, #1
 80071de:	e7f0      	b.n	80071c2 <_svfiprintf_r+0x192>
 80071e0:	ab03      	add	r3, sp, #12
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	462a      	mov	r2, r5
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <_svfiprintf_r+0x1f4>)
 80071e8:	a904      	add	r1, sp, #16
 80071ea:	4638      	mov	r0, r7
 80071ec:	f7fd fe62 	bl	8004eb4 <_printf_float>
 80071f0:	1c42      	adds	r2, r0, #1
 80071f2:	4606      	mov	r6, r0
 80071f4:	d1d6      	bne.n	80071a4 <_svfiprintf_r+0x174>
 80071f6:	89ab      	ldrh	r3, [r5, #12]
 80071f8:	065b      	lsls	r3, r3, #25
 80071fa:	f53f af2d 	bmi.w	8007058 <_svfiprintf_r+0x28>
 80071fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007200:	b01d      	add	sp, #116	; 0x74
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	ab03      	add	r3, sp, #12
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	462a      	mov	r2, r5
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <_svfiprintf_r+0x1f4>)
 800720e:	a904      	add	r1, sp, #16
 8007210:	4638      	mov	r0, r7
 8007212:	f7fe f8f3 	bl	80053fc <_printf_i>
 8007216:	e7eb      	b.n	80071f0 <_svfiprintf_r+0x1c0>
 8007218:	08008c54 	.word	0x08008c54
 800721c:	08008c5e 	.word	0x08008c5e
 8007220:	08004eb5 	.word	0x08004eb5
 8007224:	08006f7d 	.word	0x08006f7d
 8007228:	08008c5a 	.word	0x08008c5a

0800722c <__sflush_r>:
 800722c:	898a      	ldrh	r2, [r1, #12]
 800722e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007232:	4605      	mov	r5, r0
 8007234:	0710      	lsls	r0, r2, #28
 8007236:	460c      	mov	r4, r1
 8007238:	d458      	bmi.n	80072ec <__sflush_r+0xc0>
 800723a:	684b      	ldr	r3, [r1, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	dc05      	bgt.n	800724c <__sflush_r+0x20>
 8007240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	dc02      	bgt.n	800724c <__sflush_r+0x20>
 8007246:	2000      	movs	r0, #0
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800724e:	2e00      	cmp	r6, #0
 8007250:	d0f9      	beq.n	8007246 <__sflush_r+0x1a>
 8007252:	2300      	movs	r3, #0
 8007254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007258:	682f      	ldr	r7, [r5, #0]
 800725a:	6a21      	ldr	r1, [r4, #32]
 800725c:	602b      	str	r3, [r5, #0]
 800725e:	d032      	beq.n	80072c6 <__sflush_r+0x9a>
 8007260:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	075a      	lsls	r2, r3, #29
 8007266:	d505      	bpl.n	8007274 <__sflush_r+0x48>
 8007268:	6863      	ldr	r3, [r4, #4]
 800726a:	1ac0      	subs	r0, r0, r3
 800726c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800726e:	b10b      	cbz	r3, 8007274 <__sflush_r+0x48>
 8007270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007272:	1ac0      	subs	r0, r0, r3
 8007274:	2300      	movs	r3, #0
 8007276:	4602      	mov	r2, r0
 8007278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800727a:	6a21      	ldr	r1, [r4, #32]
 800727c:	4628      	mov	r0, r5
 800727e:	47b0      	blx	r6
 8007280:	1c43      	adds	r3, r0, #1
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	d106      	bne.n	8007294 <__sflush_r+0x68>
 8007286:	6829      	ldr	r1, [r5, #0]
 8007288:	291d      	cmp	r1, #29
 800728a:	d82b      	bhi.n	80072e4 <__sflush_r+0xb8>
 800728c:	4a29      	ldr	r2, [pc, #164]	; (8007334 <__sflush_r+0x108>)
 800728e:	410a      	asrs	r2, r1
 8007290:	07d6      	lsls	r6, r2, #31
 8007292:	d427      	bmi.n	80072e4 <__sflush_r+0xb8>
 8007294:	2200      	movs	r2, #0
 8007296:	6062      	str	r2, [r4, #4]
 8007298:	04d9      	lsls	r1, r3, #19
 800729a:	6922      	ldr	r2, [r4, #16]
 800729c:	6022      	str	r2, [r4, #0]
 800729e:	d504      	bpl.n	80072aa <__sflush_r+0x7e>
 80072a0:	1c42      	adds	r2, r0, #1
 80072a2:	d101      	bne.n	80072a8 <__sflush_r+0x7c>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b903      	cbnz	r3, 80072aa <__sflush_r+0x7e>
 80072a8:	6560      	str	r0, [r4, #84]	; 0x54
 80072aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ac:	602f      	str	r7, [r5, #0]
 80072ae:	2900      	cmp	r1, #0
 80072b0:	d0c9      	beq.n	8007246 <__sflush_r+0x1a>
 80072b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072b6:	4299      	cmp	r1, r3
 80072b8:	d002      	beq.n	80072c0 <__sflush_r+0x94>
 80072ba:	4628      	mov	r0, r5
 80072bc:	f7ff f9e2 	bl	8006684 <_free_r>
 80072c0:	2000      	movs	r0, #0
 80072c2:	6360      	str	r0, [r4, #52]	; 0x34
 80072c4:	e7c0      	b.n	8007248 <__sflush_r+0x1c>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4628      	mov	r0, r5
 80072ca:	47b0      	blx	r6
 80072cc:	1c41      	adds	r1, r0, #1
 80072ce:	d1c8      	bne.n	8007262 <__sflush_r+0x36>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0c5      	beq.n	8007262 <__sflush_r+0x36>
 80072d6:	2b1d      	cmp	r3, #29
 80072d8:	d001      	beq.n	80072de <__sflush_r+0xb2>
 80072da:	2b16      	cmp	r3, #22
 80072dc:	d101      	bne.n	80072e2 <__sflush_r+0xb6>
 80072de:	602f      	str	r7, [r5, #0]
 80072e0:	e7b1      	b.n	8007246 <__sflush_r+0x1a>
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e8:	81a3      	strh	r3, [r4, #12]
 80072ea:	e7ad      	b.n	8007248 <__sflush_r+0x1c>
 80072ec:	690f      	ldr	r7, [r1, #16]
 80072ee:	2f00      	cmp	r7, #0
 80072f0:	d0a9      	beq.n	8007246 <__sflush_r+0x1a>
 80072f2:	0793      	lsls	r3, r2, #30
 80072f4:	680e      	ldr	r6, [r1, #0]
 80072f6:	bf08      	it	eq
 80072f8:	694b      	ldreq	r3, [r1, #20]
 80072fa:	600f      	str	r7, [r1, #0]
 80072fc:	bf18      	it	ne
 80072fe:	2300      	movne	r3, #0
 8007300:	eba6 0807 	sub.w	r8, r6, r7
 8007304:	608b      	str	r3, [r1, #8]
 8007306:	f1b8 0f00 	cmp.w	r8, #0
 800730a:	dd9c      	ble.n	8007246 <__sflush_r+0x1a>
 800730c:	6a21      	ldr	r1, [r4, #32]
 800730e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007310:	4643      	mov	r3, r8
 8007312:	463a      	mov	r2, r7
 8007314:	4628      	mov	r0, r5
 8007316:	47b0      	blx	r6
 8007318:	2800      	cmp	r0, #0
 800731a:	dc06      	bgt.n	800732a <__sflush_r+0xfe>
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007322:	81a3      	strh	r3, [r4, #12]
 8007324:	f04f 30ff 	mov.w	r0, #4294967295
 8007328:	e78e      	b.n	8007248 <__sflush_r+0x1c>
 800732a:	4407      	add	r7, r0
 800732c:	eba8 0800 	sub.w	r8, r8, r0
 8007330:	e7e9      	b.n	8007306 <__sflush_r+0xda>
 8007332:	bf00      	nop
 8007334:	dfbffffe 	.word	0xdfbffffe

08007338 <_fflush_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	690b      	ldr	r3, [r1, #16]
 800733c:	4605      	mov	r5, r0
 800733e:	460c      	mov	r4, r1
 8007340:	b913      	cbnz	r3, 8007348 <_fflush_r+0x10>
 8007342:	2500      	movs	r5, #0
 8007344:	4628      	mov	r0, r5
 8007346:	bd38      	pop	{r3, r4, r5, pc}
 8007348:	b118      	cbz	r0, 8007352 <_fflush_r+0x1a>
 800734a:	6a03      	ldr	r3, [r0, #32]
 800734c:	b90b      	cbnz	r3, 8007352 <_fflush_r+0x1a>
 800734e:	f7fe fa03 	bl	8005758 <__sinit>
 8007352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0f3      	beq.n	8007342 <_fflush_r+0xa>
 800735a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800735c:	07d0      	lsls	r0, r2, #31
 800735e:	d404      	bmi.n	800736a <_fflush_r+0x32>
 8007360:	0599      	lsls	r1, r3, #22
 8007362:	d402      	bmi.n	800736a <_fflush_r+0x32>
 8007364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007366:	f7fe fb0e 	bl	8005986 <__retarget_lock_acquire_recursive>
 800736a:	4628      	mov	r0, r5
 800736c:	4621      	mov	r1, r4
 800736e:	f7ff ff5d 	bl	800722c <__sflush_r>
 8007372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007374:	07da      	lsls	r2, r3, #31
 8007376:	4605      	mov	r5, r0
 8007378:	d4e4      	bmi.n	8007344 <_fflush_r+0xc>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	059b      	lsls	r3, r3, #22
 800737e:	d4e1      	bmi.n	8007344 <_fflush_r+0xc>
 8007380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007382:	f7fe fb01 	bl	8005988 <__retarget_lock_release_recursive>
 8007386:	e7dd      	b.n	8007344 <_fflush_r+0xc>

08007388 <memmove>:
 8007388:	4288      	cmp	r0, r1
 800738a:	b510      	push	{r4, lr}
 800738c:	eb01 0402 	add.w	r4, r1, r2
 8007390:	d902      	bls.n	8007398 <memmove+0x10>
 8007392:	4284      	cmp	r4, r0
 8007394:	4623      	mov	r3, r4
 8007396:	d807      	bhi.n	80073a8 <memmove+0x20>
 8007398:	1e43      	subs	r3, r0, #1
 800739a:	42a1      	cmp	r1, r4
 800739c:	d008      	beq.n	80073b0 <memmove+0x28>
 800739e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073a6:	e7f8      	b.n	800739a <memmove+0x12>
 80073a8:	4402      	add	r2, r0
 80073aa:	4601      	mov	r1, r0
 80073ac:	428a      	cmp	r2, r1
 80073ae:	d100      	bne.n	80073b2 <memmove+0x2a>
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ba:	e7f7      	b.n	80073ac <memmove+0x24>

080073bc <_sbrk_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_sbrk_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fa fe10 	bl	8001fec <_sbrk>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_sbrk_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_sbrk_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	20000458 	.word	0x20000458

080073dc <memcpy>:
 80073dc:	440a      	add	r2, r1
 80073de:	4291      	cmp	r1, r2
 80073e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e4:	d100      	bne.n	80073e8 <memcpy+0xc>
 80073e6:	4770      	bx	lr
 80073e8:	b510      	push	{r4, lr}
 80073ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073f2:	4291      	cmp	r1, r2
 80073f4:	d1f9      	bne.n	80073ea <memcpy+0xe>
 80073f6:	bd10      	pop	{r4, pc}

080073f8 <__assert_func>:
 80073f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073fa:	4614      	mov	r4, r2
 80073fc:	461a      	mov	r2, r3
 80073fe:	4b09      	ldr	r3, [pc, #36]	; (8007424 <__assert_func+0x2c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4605      	mov	r5, r0
 8007404:	68d8      	ldr	r0, [r3, #12]
 8007406:	b14c      	cbz	r4, 800741c <__assert_func+0x24>
 8007408:	4b07      	ldr	r3, [pc, #28]	; (8007428 <__assert_func+0x30>)
 800740a:	9100      	str	r1, [sp, #0]
 800740c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007410:	4906      	ldr	r1, [pc, #24]	; (800742c <__assert_func+0x34>)
 8007412:	462b      	mov	r3, r5
 8007414:	f000 f872 	bl	80074fc <fiprintf>
 8007418:	f000 f882 	bl	8007520 <abort>
 800741c:	4b04      	ldr	r3, [pc, #16]	; (8007430 <__assert_func+0x38>)
 800741e:	461c      	mov	r4, r3
 8007420:	e7f3      	b.n	800740a <__assert_func+0x12>
 8007422:	bf00      	nop
 8007424:	20000064 	.word	0x20000064
 8007428:	08008c6f 	.word	0x08008c6f
 800742c:	08008c7c 	.word	0x08008c7c
 8007430:	08008caa 	.word	0x08008caa

08007434 <_calloc_r>:
 8007434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007436:	fba1 2402 	umull	r2, r4, r1, r2
 800743a:	b94c      	cbnz	r4, 8007450 <_calloc_r+0x1c>
 800743c:	4611      	mov	r1, r2
 800743e:	9201      	str	r2, [sp, #4]
 8007440:	f7ff f994 	bl	800676c <_malloc_r>
 8007444:	9a01      	ldr	r2, [sp, #4]
 8007446:	4605      	mov	r5, r0
 8007448:	b930      	cbnz	r0, 8007458 <_calloc_r+0x24>
 800744a:	4628      	mov	r0, r5
 800744c:	b003      	add	sp, #12
 800744e:	bd30      	pop	{r4, r5, pc}
 8007450:	220c      	movs	r2, #12
 8007452:	6002      	str	r2, [r0, #0]
 8007454:	2500      	movs	r5, #0
 8007456:	e7f8      	b.n	800744a <_calloc_r+0x16>
 8007458:	4621      	mov	r1, r4
 800745a:	f7fe fa16 	bl	800588a <memset>
 800745e:	e7f4      	b.n	800744a <_calloc_r+0x16>

08007460 <__ascii_mbtowc>:
 8007460:	b082      	sub	sp, #8
 8007462:	b901      	cbnz	r1, 8007466 <__ascii_mbtowc+0x6>
 8007464:	a901      	add	r1, sp, #4
 8007466:	b142      	cbz	r2, 800747a <__ascii_mbtowc+0x1a>
 8007468:	b14b      	cbz	r3, 800747e <__ascii_mbtowc+0x1e>
 800746a:	7813      	ldrb	r3, [r2, #0]
 800746c:	600b      	str	r3, [r1, #0]
 800746e:	7812      	ldrb	r2, [r2, #0]
 8007470:	1e10      	subs	r0, r2, #0
 8007472:	bf18      	it	ne
 8007474:	2001      	movne	r0, #1
 8007476:	b002      	add	sp, #8
 8007478:	4770      	bx	lr
 800747a:	4610      	mov	r0, r2
 800747c:	e7fb      	b.n	8007476 <__ascii_mbtowc+0x16>
 800747e:	f06f 0001 	mvn.w	r0, #1
 8007482:	e7f8      	b.n	8007476 <__ascii_mbtowc+0x16>

08007484 <_realloc_r>:
 8007484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007488:	4680      	mov	r8, r0
 800748a:	4614      	mov	r4, r2
 800748c:	460e      	mov	r6, r1
 800748e:	b921      	cbnz	r1, 800749a <_realloc_r+0x16>
 8007490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007494:	4611      	mov	r1, r2
 8007496:	f7ff b969 	b.w	800676c <_malloc_r>
 800749a:	b92a      	cbnz	r2, 80074a8 <_realloc_r+0x24>
 800749c:	f7ff f8f2 	bl	8006684 <_free_r>
 80074a0:	4625      	mov	r5, r4
 80074a2:	4628      	mov	r0, r5
 80074a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a8:	f000 f841 	bl	800752e <_malloc_usable_size_r>
 80074ac:	4284      	cmp	r4, r0
 80074ae:	4607      	mov	r7, r0
 80074b0:	d802      	bhi.n	80074b8 <_realloc_r+0x34>
 80074b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074b6:	d812      	bhi.n	80074de <_realloc_r+0x5a>
 80074b8:	4621      	mov	r1, r4
 80074ba:	4640      	mov	r0, r8
 80074bc:	f7ff f956 	bl	800676c <_malloc_r>
 80074c0:	4605      	mov	r5, r0
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d0ed      	beq.n	80074a2 <_realloc_r+0x1e>
 80074c6:	42bc      	cmp	r4, r7
 80074c8:	4622      	mov	r2, r4
 80074ca:	4631      	mov	r1, r6
 80074cc:	bf28      	it	cs
 80074ce:	463a      	movcs	r2, r7
 80074d0:	f7ff ff84 	bl	80073dc <memcpy>
 80074d4:	4631      	mov	r1, r6
 80074d6:	4640      	mov	r0, r8
 80074d8:	f7ff f8d4 	bl	8006684 <_free_r>
 80074dc:	e7e1      	b.n	80074a2 <_realloc_r+0x1e>
 80074de:	4635      	mov	r5, r6
 80074e0:	e7df      	b.n	80074a2 <_realloc_r+0x1e>

080074e2 <__ascii_wctomb>:
 80074e2:	b149      	cbz	r1, 80074f8 <__ascii_wctomb+0x16>
 80074e4:	2aff      	cmp	r2, #255	; 0xff
 80074e6:	bf85      	ittet	hi
 80074e8:	238a      	movhi	r3, #138	; 0x8a
 80074ea:	6003      	strhi	r3, [r0, #0]
 80074ec:	700a      	strbls	r2, [r1, #0]
 80074ee:	f04f 30ff 	movhi.w	r0, #4294967295
 80074f2:	bf98      	it	ls
 80074f4:	2001      	movls	r0, #1
 80074f6:	4770      	bx	lr
 80074f8:	4608      	mov	r0, r1
 80074fa:	4770      	bx	lr

080074fc <fiprintf>:
 80074fc:	b40e      	push	{r1, r2, r3}
 80074fe:	b503      	push	{r0, r1, lr}
 8007500:	4601      	mov	r1, r0
 8007502:	ab03      	add	r3, sp, #12
 8007504:	4805      	ldr	r0, [pc, #20]	; (800751c <fiprintf+0x20>)
 8007506:	f853 2b04 	ldr.w	r2, [r3], #4
 800750a:	6800      	ldr	r0, [r0, #0]
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	f000 f83f 	bl	8007590 <_vfiprintf_r>
 8007512:	b002      	add	sp, #8
 8007514:	f85d eb04 	ldr.w	lr, [sp], #4
 8007518:	b003      	add	sp, #12
 800751a:	4770      	bx	lr
 800751c:	20000064 	.word	0x20000064

08007520 <abort>:
 8007520:	b508      	push	{r3, lr}
 8007522:	2006      	movs	r0, #6
 8007524:	f000 fa0c 	bl	8007940 <raise>
 8007528:	2001      	movs	r0, #1
 800752a:	f7fa fce7 	bl	8001efc <_exit>

0800752e <_malloc_usable_size_r>:
 800752e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007532:	1f18      	subs	r0, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	bfbc      	itt	lt
 8007538:	580b      	ldrlt	r3, [r1, r0]
 800753a:	18c0      	addlt	r0, r0, r3
 800753c:	4770      	bx	lr

0800753e <__sfputc_r>:
 800753e:	6893      	ldr	r3, [r2, #8]
 8007540:	3b01      	subs	r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	b410      	push	{r4}
 8007546:	6093      	str	r3, [r2, #8]
 8007548:	da08      	bge.n	800755c <__sfputc_r+0x1e>
 800754a:	6994      	ldr	r4, [r2, #24]
 800754c:	42a3      	cmp	r3, r4
 800754e:	db01      	blt.n	8007554 <__sfputc_r+0x16>
 8007550:	290a      	cmp	r1, #10
 8007552:	d103      	bne.n	800755c <__sfputc_r+0x1e>
 8007554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007558:	f000 b934 	b.w	80077c4 <__swbuf_r>
 800755c:	6813      	ldr	r3, [r2, #0]
 800755e:	1c58      	adds	r0, r3, #1
 8007560:	6010      	str	r0, [r2, #0]
 8007562:	7019      	strb	r1, [r3, #0]
 8007564:	4608      	mov	r0, r1
 8007566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800756a:	4770      	bx	lr

0800756c <__sfputs_r>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	4606      	mov	r6, r0
 8007570:	460f      	mov	r7, r1
 8007572:	4614      	mov	r4, r2
 8007574:	18d5      	adds	r5, r2, r3
 8007576:	42ac      	cmp	r4, r5
 8007578:	d101      	bne.n	800757e <__sfputs_r+0x12>
 800757a:	2000      	movs	r0, #0
 800757c:	e007      	b.n	800758e <__sfputs_r+0x22>
 800757e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007582:	463a      	mov	r2, r7
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff ffda 	bl	800753e <__sfputc_r>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	d1f3      	bne.n	8007576 <__sfputs_r+0xa>
 800758e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007590 <_vfiprintf_r>:
 8007590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007594:	460d      	mov	r5, r1
 8007596:	b09d      	sub	sp, #116	; 0x74
 8007598:	4614      	mov	r4, r2
 800759a:	4698      	mov	r8, r3
 800759c:	4606      	mov	r6, r0
 800759e:	b118      	cbz	r0, 80075a8 <_vfiprintf_r+0x18>
 80075a0:	6a03      	ldr	r3, [r0, #32]
 80075a2:	b90b      	cbnz	r3, 80075a8 <_vfiprintf_r+0x18>
 80075a4:	f7fe f8d8 	bl	8005758 <__sinit>
 80075a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075aa:	07d9      	lsls	r1, r3, #31
 80075ac:	d405      	bmi.n	80075ba <_vfiprintf_r+0x2a>
 80075ae:	89ab      	ldrh	r3, [r5, #12]
 80075b0:	059a      	lsls	r2, r3, #22
 80075b2:	d402      	bmi.n	80075ba <_vfiprintf_r+0x2a>
 80075b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075b6:	f7fe f9e6 	bl	8005986 <__retarget_lock_acquire_recursive>
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	071b      	lsls	r3, r3, #28
 80075be:	d501      	bpl.n	80075c4 <_vfiprintf_r+0x34>
 80075c0:	692b      	ldr	r3, [r5, #16]
 80075c2:	b99b      	cbnz	r3, 80075ec <_vfiprintf_r+0x5c>
 80075c4:	4629      	mov	r1, r5
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 f93a 	bl	8007840 <__swsetup_r>
 80075cc:	b170      	cbz	r0, 80075ec <_vfiprintf_r+0x5c>
 80075ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075d0:	07dc      	lsls	r4, r3, #31
 80075d2:	d504      	bpl.n	80075de <_vfiprintf_r+0x4e>
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295
 80075d8:	b01d      	add	sp, #116	; 0x74
 80075da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075de:	89ab      	ldrh	r3, [r5, #12]
 80075e0:	0598      	lsls	r0, r3, #22
 80075e2:	d4f7      	bmi.n	80075d4 <_vfiprintf_r+0x44>
 80075e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075e6:	f7fe f9cf 	bl	8005988 <__retarget_lock_release_recursive>
 80075ea:	e7f3      	b.n	80075d4 <_vfiprintf_r+0x44>
 80075ec:	2300      	movs	r3, #0
 80075ee:	9309      	str	r3, [sp, #36]	; 0x24
 80075f0:	2320      	movs	r3, #32
 80075f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80075fa:	2330      	movs	r3, #48	; 0x30
 80075fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80077b0 <_vfiprintf_r+0x220>
 8007600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007604:	f04f 0901 	mov.w	r9, #1
 8007608:	4623      	mov	r3, r4
 800760a:	469a      	mov	sl, r3
 800760c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007610:	b10a      	cbz	r2, 8007616 <_vfiprintf_r+0x86>
 8007612:	2a25      	cmp	r2, #37	; 0x25
 8007614:	d1f9      	bne.n	800760a <_vfiprintf_r+0x7a>
 8007616:	ebba 0b04 	subs.w	fp, sl, r4
 800761a:	d00b      	beq.n	8007634 <_vfiprintf_r+0xa4>
 800761c:	465b      	mov	r3, fp
 800761e:	4622      	mov	r2, r4
 8007620:	4629      	mov	r1, r5
 8007622:	4630      	mov	r0, r6
 8007624:	f7ff ffa2 	bl	800756c <__sfputs_r>
 8007628:	3001      	adds	r0, #1
 800762a:	f000 80a9 	beq.w	8007780 <_vfiprintf_r+0x1f0>
 800762e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007630:	445a      	add	r2, fp
 8007632:	9209      	str	r2, [sp, #36]	; 0x24
 8007634:	f89a 3000 	ldrb.w	r3, [sl]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 80a1 	beq.w	8007780 <_vfiprintf_r+0x1f0>
 800763e:	2300      	movs	r3, #0
 8007640:	f04f 32ff 	mov.w	r2, #4294967295
 8007644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007648:	f10a 0a01 	add.w	sl, sl, #1
 800764c:	9304      	str	r3, [sp, #16]
 800764e:	9307      	str	r3, [sp, #28]
 8007650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007654:	931a      	str	r3, [sp, #104]	; 0x68
 8007656:	4654      	mov	r4, sl
 8007658:	2205      	movs	r2, #5
 800765a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765e:	4854      	ldr	r0, [pc, #336]	; (80077b0 <_vfiprintf_r+0x220>)
 8007660:	f7f8 fdbe 	bl	80001e0 <memchr>
 8007664:	9a04      	ldr	r2, [sp, #16]
 8007666:	b9d8      	cbnz	r0, 80076a0 <_vfiprintf_r+0x110>
 8007668:	06d1      	lsls	r1, r2, #27
 800766a:	bf44      	itt	mi
 800766c:	2320      	movmi	r3, #32
 800766e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007672:	0713      	lsls	r3, r2, #28
 8007674:	bf44      	itt	mi
 8007676:	232b      	movmi	r3, #43	; 0x2b
 8007678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800767c:	f89a 3000 	ldrb.w	r3, [sl]
 8007680:	2b2a      	cmp	r3, #42	; 0x2a
 8007682:	d015      	beq.n	80076b0 <_vfiprintf_r+0x120>
 8007684:	9a07      	ldr	r2, [sp, #28]
 8007686:	4654      	mov	r4, sl
 8007688:	2000      	movs	r0, #0
 800768a:	f04f 0c0a 	mov.w	ip, #10
 800768e:	4621      	mov	r1, r4
 8007690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007694:	3b30      	subs	r3, #48	; 0x30
 8007696:	2b09      	cmp	r3, #9
 8007698:	d94d      	bls.n	8007736 <_vfiprintf_r+0x1a6>
 800769a:	b1b0      	cbz	r0, 80076ca <_vfiprintf_r+0x13a>
 800769c:	9207      	str	r2, [sp, #28]
 800769e:	e014      	b.n	80076ca <_vfiprintf_r+0x13a>
 80076a0:	eba0 0308 	sub.w	r3, r0, r8
 80076a4:	fa09 f303 	lsl.w	r3, r9, r3
 80076a8:	4313      	orrs	r3, r2
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	46a2      	mov	sl, r4
 80076ae:	e7d2      	b.n	8007656 <_vfiprintf_r+0xc6>
 80076b0:	9b03      	ldr	r3, [sp, #12]
 80076b2:	1d19      	adds	r1, r3, #4
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	9103      	str	r1, [sp, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	bfbb      	ittet	lt
 80076bc:	425b      	neglt	r3, r3
 80076be:	f042 0202 	orrlt.w	r2, r2, #2
 80076c2:	9307      	strge	r3, [sp, #28]
 80076c4:	9307      	strlt	r3, [sp, #28]
 80076c6:	bfb8      	it	lt
 80076c8:	9204      	strlt	r2, [sp, #16]
 80076ca:	7823      	ldrb	r3, [r4, #0]
 80076cc:	2b2e      	cmp	r3, #46	; 0x2e
 80076ce:	d10c      	bne.n	80076ea <_vfiprintf_r+0x15a>
 80076d0:	7863      	ldrb	r3, [r4, #1]
 80076d2:	2b2a      	cmp	r3, #42	; 0x2a
 80076d4:	d134      	bne.n	8007740 <_vfiprintf_r+0x1b0>
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	1d1a      	adds	r2, r3, #4
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	9203      	str	r2, [sp, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfb8      	it	lt
 80076e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80076e6:	3402      	adds	r4, #2
 80076e8:	9305      	str	r3, [sp, #20]
 80076ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80077c0 <_vfiprintf_r+0x230>
 80076ee:	7821      	ldrb	r1, [r4, #0]
 80076f0:	2203      	movs	r2, #3
 80076f2:	4650      	mov	r0, sl
 80076f4:	f7f8 fd74 	bl	80001e0 <memchr>
 80076f8:	b138      	cbz	r0, 800770a <_vfiprintf_r+0x17a>
 80076fa:	9b04      	ldr	r3, [sp, #16]
 80076fc:	eba0 000a 	sub.w	r0, r0, sl
 8007700:	2240      	movs	r2, #64	; 0x40
 8007702:	4082      	lsls	r2, r0
 8007704:	4313      	orrs	r3, r2
 8007706:	3401      	adds	r4, #1
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800770e:	4829      	ldr	r0, [pc, #164]	; (80077b4 <_vfiprintf_r+0x224>)
 8007710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007714:	2206      	movs	r2, #6
 8007716:	f7f8 fd63 	bl	80001e0 <memchr>
 800771a:	2800      	cmp	r0, #0
 800771c:	d03f      	beq.n	800779e <_vfiprintf_r+0x20e>
 800771e:	4b26      	ldr	r3, [pc, #152]	; (80077b8 <_vfiprintf_r+0x228>)
 8007720:	bb1b      	cbnz	r3, 800776a <_vfiprintf_r+0x1da>
 8007722:	9b03      	ldr	r3, [sp, #12]
 8007724:	3307      	adds	r3, #7
 8007726:	f023 0307 	bic.w	r3, r3, #7
 800772a:	3308      	adds	r3, #8
 800772c:	9303      	str	r3, [sp, #12]
 800772e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007730:	443b      	add	r3, r7
 8007732:	9309      	str	r3, [sp, #36]	; 0x24
 8007734:	e768      	b.n	8007608 <_vfiprintf_r+0x78>
 8007736:	fb0c 3202 	mla	r2, ip, r2, r3
 800773a:	460c      	mov	r4, r1
 800773c:	2001      	movs	r0, #1
 800773e:	e7a6      	b.n	800768e <_vfiprintf_r+0xfe>
 8007740:	2300      	movs	r3, #0
 8007742:	3401      	adds	r4, #1
 8007744:	9305      	str	r3, [sp, #20]
 8007746:	4619      	mov	r1, r3
 8007748:	f04f 0c0a 	mov.w	ip, #10
 800774c:	4620      	mov	r0, r4
 800774e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007752:	3a30      	subs	r2, #48	; 0x30
 8007754:	2a09      	cmp	r2, #9
 8007756:	d903      	bls.n	8007760 <_vfiprintf_r+0x1d0>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d0c6      	beq.n	80076ea <_vfiprintf_r+0x15a>
 800775c:	9105      	str	r1, [sp, #20]
 800775e:	e7c4      	b.n	80076ea <_vfiprintf_r+0x15a>
 8007760:	fb0c 2101 	mla	r1, ip, r1, r2
 8007764:	4604      	mov	r4, r0
 8007766:	2301      	movs	r3, #1
 8007768:	e7f0      	b.n	800774c <_vfiprintf_r+0x1bc>
 800776a:	ab03      	add	r3, sp, #12
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	462a      	mov	r2, r5
 8007770:	4b12      	ldr	r3, [pc, #72]	; (80077bc <_vfiprintf_r+0x22c>)
 8007772:	a904      	add	r1, sp, #16
 8007774:	4630      	mov	r0, r6
 8007776:	f7fd fb9d 	bl	8004eb4 <_printf_float>
 800777a:	4607      	mov	r7, r0
 800777c:	1c78      	adds	r0, r7, #1
 800777e:	d1d6      	bne.n	800772e <_vfiprintf_r+0x19e>
 8007780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007782:	07d9      	lsls	r1, r3, #31
 8007784:	d405      	bmi.n	8007792 <_vfiprintf_r+0x202>
 8007786:	89ab      	ldrh	r3, [r5, #12]
 8007788:	059a      	lsls	r2, r3, #22
 800778a:	d402      	bmi.n	8007792 <_vfiprintf_r+0x202>
 800778c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800778e:	f7fe f8fb 	bl	8005988 <__retarget_lock_release_recursive>
 8007792:	89ab      	ldrh	r3, [r5, #12]
 8007794:	065b      	lsls	r3, r3, #25
 8007796:	f53f af1d 	bmi.w	80075d4 <_vfiprintf_r+0x44>
 800779a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800779c:	e71c      	b.n	80075d8 <_vfiprintf_r+0x48>
 800779e:	ab03      	add	r3, sp, #12
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	462a      	mov	r2, r5
 80077a4:	4b05      	ldr	r3, [pc, #20]	; (80077bc <_vfiprintf_r+0x22c>)
 80077a6:	a904      	add	r1, sp, #16
 80077a8:	4630      	mov	r0, r6
 80077aa:	f7fd fe27 	bl	80053fc <_printf_i>
 80077ae:	e7e4      	b.n	800777a <_vfiprintf_r+0x1ea>
 80077b0:	08008c54 	.word	0x08008c54
 80077b4:	08008c5e 	.word	0x08008c5e
 80077b8:	08004eb5 	.word	0x08004eb5
 80077bc:	0800756d 	.word	0x0800756d
 80077c0:	08008c5a 	.word	0x08008c5a

080077c4 <__swbuf_r>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	460e      	mov	r6, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	4605      	mov	r5, r0
 80077cc:	b118      	cbz	r0, 80077d6 <__swbuf_r+0x12>
 80077ce:	6a03      	ldr	r3, [r0, #32]
 80077d0:	b90b      	cbnz	r3, 80077d6 <__swbuf_r+0x12>
 80077d2:	f7fd ffc1 	bl	8005758 <__sinit>
 80077d6:	69a3      	ldr	r3, [r4, #24]
 80077d8:	60a3      	str	r3, [r4, #8]
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	071a      	lsls	r2, r3, #28
 80077de:	d525      	bpl.n	800782c <__swbuf_r+0x68>
 80077e0:	6923      	ldr	r3, [r4, #16]
 80077e2:	b31b      	cbz	r3, 800782c <__swbuf_r+0x68>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	6922      	ldr	r2, [r4, #16]
 80077e8:	1a98      	subs	r0, r3, r2
 80077ea:	6963      	ldr	r3, [r4, #20]
 80077ec:	b2f6      	uxtb	r6, r6
 80077ee:	4283      	cmp	r3, r0
 80077f0:	4637      	mov	r7, r6
 80077f2:	dc04      	bgt.n	80077fe <__swbuf_r+0x3a>
 80077f4:	4621      	mov	r1, r4
 80077f6:	4628      	mov	r0, r5
 80077f8:	f7ff fd9e 	bl	8007338 <_fflush_r>
 80077fc:	b9e0      	cbnz	r0, 8007838 <__swbuf_r+0x74>
 80077fe:	68a3      	ldr	r3, [r4, #8]
 8007800:	3b01      	subs	r3, #1
 8007802:	60a3      	str	r3, [r4, #8]
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	6022      	str	r2, [r4, #0]
 800780a:	701e      	strb	r6, [r3, #0]
 800780c:	6962      	ldr	r2, [r4, #20]
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	429a      	cmp	r2, r3
 8007812:	d004      	beq.n	800781e <__swbuf_r+0x5a>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	07db      	lsls	r3, r3, #31
 8007818:	d506      	bpl.n	8007828 <__swbuf_r+0x64>
 800781a:	2e0a      	cmp	r6, #10
 800781c:	d104      	bne.n	8007828 <__swbuf_r+0x64>
 800781e:	4621      	mov	r1, r4
 8007820:	4628      	mov	r0, r5
 8007822:	f7ff fd89 	bl	8007338 <_fflush_r>
 8007826:	b938      	cbnz	r0, 8007838 <__swbuf_r+0x74>
 8007828:	4638      	mov	r0, r7
 800782a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782c:	4621      	mov	r1, r4
 800782e:	4628      	mov	r0, r5
 8007830:	f000 f806 	bl	8007840 <__swsetup_r>
 8007834:	2800      	cmp	r0, #0
 8007836:	d0d5      	beq.n	80077e4 <__swbuf_r+0x20>
 8007838:	f04f 37ff 	mov.w	r7, #4294967295
 800783c:	e7f4      	b.n	8007828 <__swbuf_r+0x64>
	...

08007840 <__swsetup_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4b2a      	ldr	r3, [pc, #168]	; (80078ec <__swsetup_r+0xac>)
 8007844:	4605      	mov	r5, r0
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	460c      	mov	r4, r1
 800784a:	b118      	cbz	r0, 8007854 <__swsetup_r+0x14>
 800784c:	6a03      	ldr	r3, [r0, #32]
 800784e:	b90b      	cbnz	r3, 8007854 <__swsetup_r+0x14>
 8007850:	f7fd ff82 	bl	8005758 <__sinit>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800785a:	0718      	lsls	r0, r3, #28
 800785c:	d422      	bmi.n	80078a4 <__swsetup_r+0x64>
 800785e:	06d9      	lsls	r1, r3, #27
 8007860:	d407      	bmi.n	8007872 <__swsetup_r+0x32>
 8007862:	2309      	movs	r3, #9
 8007864:	602b      	str	r3, [r5, #0]
 8007866:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	f04f 30ff 	mov.w	r0, #4294967295
 8007870:	e034      	b.n	80078dc <__swsetup_r+0x9c>
 8007872:	0758      	lsls	r0, r3, #29
 8007874:	d512      	bpl.n	800789c <__swsetup_r+0x5c>
 8007876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007878:	b141      	cbz	r1, 800788c <__swsetup_r+0x4c>
 800787a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800787e:	4299      	cmp	r1, r3
 8007880:	d002      	beq.n	8007888 <__swsetup_r+0x48>
 8007882:	4628      	mov	r0, r5
 8007884:	f7fe fefe 	bl	8006684 <_free_r>
 8007888:	2300      	movs	r3, #0
 800788a:	6363      	str	r3, [r4, #52]	; 0x34
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007892:	81a3      	strh	r3, [r4, #12]
 8007894:	2300      	movs	r3, #0
 8007896:	6063      	str	r3, [r4, #4]
 8007898:	6923      	ldr	r3, [r4, #16]
 800789a:	6023      	str	r3, [r4, #0]
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f043 0308 	orr.w	r3, r3, #8
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	b94b      	cbnz	r3, 80078bc <__swsetup_r+0x7c>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078b2:	d003      	beq.n	80078bc <__swsetup_r+0x7c>
 80078b4:	4621      	mov	r1, r4
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 f884 	bl	80079c4 <__smakebuf_r>
 80078bc:	89a0      	ldrh	r0, [r4, #12]
 80078be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078c2:	f010 0301 	ands.w	r3, r0, #1
 80078c6:	d00a      	beq.n	80078de <__swsetup_r+0x9e>
 80078c8:	2300      	movs	r3, #0
 80078ca:	60a3      	str	r3, [r4, #8]
 80078cc:	6963      	ldr	r3, [r4, #20]
 80078ce:	425b      	negs	r3, r3
 80078d0:	61a3      	str	r3, [r4, #24]
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	b943      	cbnz	r3, 80078e8 <__swsetup_r+0xa8>
 80078d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078da:	d1c4      	bne.n	8007866 <__swsetup_r+0x26>
 80078dc:	bd38      	pop	{r3, r4, r5, pc}
 80078de:	0781      	lsls	r1, r0, #30
 80078e0:	bf58      	it	pl
 80078e2:	6963      	ldrpl	r3, [r4, #20]
 80078e4:	60a3      	str	r3, [r4, #8]
 80078e6:	e7f4      	b.n	80078d2 <__swsetup_r+0x92>
 80078e8:	2000      	movs	r0, #0
 80078ea:	e7f7      	b.n	80078dc <__swsetup_r+0x9c>
 80078ec:	20000064 	.word	0x20000064

080078f0 <_raise_r>:
 80078f0:	291f      	cmp	r1, #31
 80078f2:	b538      	push	{r3, r4, r5, lr}
 80078f4:	4604      	mov	r4, r0
 80078f6:	460d      	mov	r5, r1
 80078f8:	d904      	bls.n	8007904 <_raise_r+0x14>
 80078fa:	2316      	movs	r3, #22
 80078fc:	6003      	str	r3, [r0, #0]
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007906:	b112      	cbz	r2, 800790e <_raise_r+0x1e>
 8007908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800790c:	b94b      	cbnz	r3, 8007922 <_raise_r+0x32>
 800790e:	4620      	mov	r0, r4
 8007910:	f000 f830 	bl	8007974 <_getpid_r>
 8007914:	462a      	mov	r2, r5
 8007916:	4601      	mov	r1, r0
 8007918:	4620      	mov	r0, r4
 800791a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800791e:	f000 b817 	b.w	8007950 <_kill_r>
 8007922:	2b01      	cmp	r3, #1
 8007924:	d00a      	beq.n	800793c <_raise_r+0x4c>
 8007926:	1c59      	adds	r1, r3, #1
 8007928:	d103      	bne.n	8007932 <_raise_r+0x42>
 800792a:	2316      	movs	r3, #22
 800792c:	6003      	str	r3, [r0, #0]
 800792e:	2001      	movs	r0, #1
 8007930:	e7e7      	b.n	8007902 <_raise_r+0x12>
 8007932:	2400      	movs	r4, #0
 8007934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007938:	4628      	mov	r0, r5
 800793a:	4798      	blx	r3
 800793c:	2000      	movs	r0, #0
 800793e:	e7e0      	b.n	8007902 <_raise_r+0x12>

08007940 <raise>:
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <raise+0xc>)
 8007942:	4601      	mov	r1, r0
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	f7ff bfd3 	b.w	80078f0 <_raise_r>
 800794a:	bf00      	nop
 800794c:	20000064 	.word	0x20000064

08007950 <_kill_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d07      	ldr	r5, [pc, #28]	; (8007970 <_kill_r+0x20>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	602b      	str	r3, [r5, #0]
 800795e:	f7fa fabd 	bl	8001edc <_kill>
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d102      	bne.n	800796c <_kill_r+0x1c>
 8007966:	682b      	ldr	r3, [r5, #0]
 8007968:	b103      	cbz	r3, 800796c <_kill_r+0x1c>
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	bd38      	pop	{r3, r4, r5, pc}
 800796e:	bf00      	nop
 8007970:	20000458 	.word	0x20000458

08007974 <_getpid_r>:
 8007974:	f7fa baaa 	b.w	8001ecc <_getpid>

08007978 <__swhatbuf_r>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	460c      	mov	r4, r1
 800797c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007980:	2900      	cmp	r1, #0
 8007982:	b096      	sub	sp, #88	; 0x58
 8007984:	4615      	mov	r5, r2
 8007986:	461e      	mov	r6, r3
 8007988:	da0d      	bge.n	80079a6 <__swhatbuf_r+0x2e>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007990:	f04f 0100 	mov.w	r1, #0
 8007994:	bf0c      	ite	eq
 8007996:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800799a:	2340      	movne	r3, #64	; 0x40
 800799c:	2000      	movs	r0, #0
 800799e:	6031      	str	r1, [r6, #0]
 80079a0:	602b      	str	r3, [r5, #0]
 80079a2:	b016      	add	sp, #88	; 0x58
 80079a4:	bd70      	pop	{r4, r5, r6, pc}
 80079a6:	466a      	mov	r2, sp
 80079a8:	f000 f848 	bl	8007a3c <_fstat_r>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	dbec      	blt.n	800798a <__swhatbuf_r+0x12>
 80079b0:	9901      	ldr	r1, [sp, #4]
 80079b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80079ba:	4259      	negs	r1, r3
 80079bc:	4159      	adcs	r1, r3
 80079be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079c2:	e7eb      	b.n	800799c <__swhatbuf_r+0x24>

080079c4 <__smakebuf_r>:
 80079c4:	898b      	ldrh	r3, [r1, #12]
 80079c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079c8:	079d      	lsls	r5, r3, #30
 80079ca:	4606      	mov	r6, r0
 80079cc:	460c      	mov	r4, r1
 80079ce:	d507      	bpl.n	80079e0 <__smakebuf_r+0x1c>
 80079d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	6123      	str	r3, [r4, #16]
 80079d8:	2301      	movs	r3, #1
 80079da:	6163      	str	r3, [r4, #20]
 80079dc:	b002      	add	sp, #8
 80079de:	bd70      	pop	{r4, r5, r6, pc}
 80079e0:	ab01      	add	r3, sp, #4
 80079e2:	466a      	mov	r2, sp
 80079e4:	f7ff ffc8 	bl	8007978 <__swhatbuf_r>
 80079e8:	9900      	ldr	r1, [sp, #0]
 80079ea:	4605      	mov	r5, r0
 80079ec:	4630      	mov	r0, r6
 80079ee:	f7fe febd 	bl	800676c <_malloc_r>
 80079f2:	b948      	cbnz	r0, 8007a08 <__smakebuf_r+0x44>
 80079f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f8:	059a      	lsls	r2, r3, #22
 80079fa:	d4ef      	bmi.n	80079dc <__smakebuf_r+0x18>
 80079fc:	f023 0303 	bic.w	r3, r3, #3
 8007a00:	f043 0302 	orr.w	r3, r3, #2
 8007a04:	81a3      	strh	r3, [r4, #12]
 8007a06:	e7e3      	b.n	80079d0 <__smakebuf_r+0xc>
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	6020      	str	r0, [r4, #0]
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a10:	81a3      	strh	r3, [r4, #12]
 8007a12:	9b00      	ldr	r3, [sp, #0]
 8007a14:	6163      	str	r3, [r4, #20]
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	6120      	str	r0, [r4, #16]
 8007a1a:	b15b      	cbz	r3, 8007a34 <__smakebuf_r+0x70>
 8007a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a20:	4630      	mov	r0, r6
 8007a22:	f000 f81d 	bl	8007a60 <_isatty_r>
 8007a26:	b128      	cbz	r0, 8007a34 <__smakebuf_r+0x70>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	f043 0301 	orr.w	r3, r3, #1
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	431d      	orrs	r5, r3
 8007a38:	81a5      	strh	r5, [r4, #12]
 8007a3a:	e7cf      	b.n	80079dc <__smakebuf_r+0x18>

08007a3c <_fstat_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d07      	ldr	r5, [pc, #28]	; (8007a5c <_fstat_r+0x20>)
 8007a40:	2300      	movs	r3, #0
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	4611      	mov	r1, r2
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	f7fa faa6 	bl	8001f9a <_fstat>
 8007a4e:	1c43      	adds	r3, r0, #1
 8007a50:	d102      	bne.n	8007a58 <_fstat_r+0x1c>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	b103      	cbz	r3, 8007a58 <_fstat_r+0x1c>
 8007a56:	6023      	str	r3, [r4, #0]
 8007a58:	bd38      	pop	{r3, r4, r5, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20000458 	.word	0x20000458

08007a60 <_isatty_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d06      	ldr	r5, [pc, #24]	; (8007a7c <_isatty_r+0x1c>)
 8007a64:	2300      	movs	r3, #0
 8007a66:	4604      	mov	r4, r0
 8007a68:	4608      	mov	r0, r1
 8007a6a:	602b      	str	r3, [r5, #0]
 8007a6c:	f7fa faa5 	bl	8001fba <_isatty>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_isatty_r+0x1a>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_isatty_r+0x1a>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	20000458 	.word	0x20000458

08007a80 <pow>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	ed2d 8b02 	vpush	{d8}
 8007a86:	eeb0 8a40 	vmov.f32	s16, s0
 8007a8a:	eef0 8a60 	vmov.f32	s17, s1
 8007a8e:	ec55 4b11 	vmov	r4, r5, d1
 8007a92:	f000 f979 	bl	8007d88 <__ieee754_pow>
 8007a96:	4622      	mov	r2, r4
 8007a98:	462b      	mov	r3, r5
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	ec57 6b10 	vmov	r6, r7, d0
 8007aa2:	f7f9 f84b 	bl	8000b3c <__aeabi_dcmpun>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d13b      	bne.n	8007b22 <pow+0xa2>
 8007aaa:	ec51 0b18 	vmov	r0, r1, d8
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f7f9 f811 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ab6:	b1b8      	cbz	r0, 8007ae8 <pow+0x68>
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2300      	movs	r3, #0
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f9 f80a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d146      	bne.n	8007b56 <pow+0xd6>
 8007ac8:	ec45 4b10 	vmov	d0, r4, r5
 8007acc:	f000 f874 	bl	8007bb8 <finite>
 8007ad0:	b338      	cbz	r0, 8007b22 <pow+0xa2>
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f9 f807 	bl	8000aec <__aeabi_dcmplt>
 8007ade:	b300      	cbz	r0, 8007b22 <pow+0xa2>
 8007ae0:	f7fd ff26 	bl	8005930 <__errno>
 8007ae4:	2322      	movs	r3, #34	; 0x22
 8007ae6:	e01b      	b.n	8007b20 <pow+0xa0>
 8007ae8:	ec47 6b10 	vmov	d0, r6, r7
 8007aec:	f000 f864 	bl	8007bb8 <finite>
 8007af0:	b9e0      	cbnz	r0, 8007b2c <pow+0xac>
 8007af2:	eeb0 0a48 	vmov.f32	s0, s16
 8007af6:	eef0 0a68 	vmov.f32	s1, s17
 8007afa:	f000 f85d 	bl	8007bb8 <finite>
 8007afe:	b1a8      	cbz	r0, 8007b2c <pow+0xac>
 8007b00:	ec45 4b10 	vmov	d0, r4, r5
 8007b04:	f000 f858 	bl	8007bb8 <finite>
 8007b08:	b180      	cbz	r0, 8007b2c <pow+0xac>
 8007b0a:	4632      	mov	r2, r6
 8007b0c:	463b      	mov	r3, r7
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	f7f9 f813 	bl	8000b3c <__aeabi_dcmpun>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d0e2      	beq.n	8007ae0 <pow+0x60>
 8007b1a:	f7fd ff09 	bl	8005930 <__errno>
 8007b1e:	2321      	movs	r3, #33	; 0x21
 8007b20:	6003      	str	r3, [r0, #0]
 8007b22:	ecbd 8b02 	vpop	{d8}
 8007b26:	ec47 6b10 	vmov	d0, r6, r7
 8007b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2300      	movs	r3, #0
 8007b30:	4630      	mov	r0, r6
 8007b32:	4639      	mov	r1, r7
 8007b34:	f7f8 ffd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d0f2      	beq.n	8007b22 <pow+0xa2>
 8007b3c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b40:	eef0 0a68 	vmov.f32	s1, s17
 8007b44:	f000 f838 	bl	8007bb8 <finite>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d0ea      	beq.n	8007b22 <pow+0xa2>
 8007b4c:	ec45 4b10 	vmov	d0, r4, r5
 8007b50:	f000 f832 	bl	8007bb8 <finite>
 8007b54:	e7c3      	b.n	8007ade <pow+0x5e>
 8007b56:	4f01      	ldr	r7, [pc, #4]	; (8007b5c <pow+0xdc>)
 8007b58:	2600      	movs	r6, #0
 8007b5a:	e7e2      	b.n	8007b22 <pow+0xa2>
 8007b5c:	3ff00000 	.word	0x3ff00000

08007b60 <sqrt>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	ed2d 8b02 	vpush	{d8}
 8007b66:	ec55 4b10 	vmov	r4, r5, d0
 8007b6a:	f000 f831 	bl	8007bd0 <__ieee754_sqrt>
 8007b6e:	4622      	mov	r2, r4
 8007b70:	462b      	mov	r3, r5
 8007b72:	4620      	mov	r0, r4
 8007b74:	4629      	mov	r1, r5
 8007b76:	eeb0 8a40 	vmov.f32	s16, s0
 8007b7a:	eef0 8a60 	vmov.f32	s17, s1
 8007b7e:	f7f8 ffdd 	bl	8000b3c <__aeabi_dcmpun>
 8007b82:	b990      	cbnz	r0, 8007baa <sqrt+0x4a>
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7f8 ffae 	bl	8000aec <__aeabi_dcmplt>
 8007b90:	b158      	cbz	r0, 8007baa <sqrt+0x4a>
 8007b92:	f7fd fecd 	bl	8005930 <__errno>
 8007b96:	2321      	movs	r3, #33	; 0x21
 8007b98:	6003      	str	r3, [r0, #0]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4610      	mov	r0, r2
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	f7f8 fe5b 	bl	800085c <__aeabi_ddiv>
 8007ba6:	ec41 0b18 	vmov	d8, r0, r1
 8007baa:	eeb0 0a48 	vmov.f32	s0, s16
 8007bae:	eef0 0a68 	vmov.f32	s1, s17
 8007bb2:	ecbd 8b02 	vpop	{d8}
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}

08007bb8 <finite>:
 8007bb8:	b082      	sub	sp, #8
 8007bba:	ed8d 0b00 	vstr	d0, [sp]
 8007bbe:	9801      	ldr	r0, [sp, #4]
 8007bc0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007bc4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007bc8:	0fc0      	lsrs	r0, r0, #31
 8007bca:	b002      	add	sp, #8
 8007bcc:	4770      	bx	lr
	...

08007bd0 <__ieee754_sqrt>:
 8007bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd4:	ec55 4b10 	vmov	r4, r5, d0
 8007bd8:	4e67      	ldr	r6, [pc, #412]	; (8007d78 <__ieee754_sqrt+0x1a8>)
 8007bda:	43ae      	bics	r6, r5
 8007bdc:	ee10 0a10 	vmov	r0, s0
 8007be0:	ee10 2a10 	vmov	r2, s0
 8007be4:	4629      	mov	r1, r5
 8007be6:	462b      	mov	r3, r5
 8007be8:	d10d      	bne.n	8007c06 <__ieee754_sqrt+0x36>
 8007bea:	f7f8 fd0d 	bl	8000608 <__aeabi_dmul>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	f7f8 fb51 	bl	800029c <__adddf3>
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	460d      	mov	r5, r1
 8007bfe:	ec45 4b10 	vmov	d0, r4, r5
 8007c02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c06:	2d00      	cmp	r5, #0
 8007c08:	dc0b      	bgt.n	8007c22 <__ieee754_sqrt+0x52>
 8007c0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007c0e:	4326      	orrs	r6, r4
 8007c10:	d0f5      	beq.n	8007bfe <__ieee754_sqrt+0x2e>
 8007c12:	b135      	cbz	r5, 8007c22 <__ieee754_sqrt+0x52>
 8007c14:	f7f8 fb40 	bl	8000298 <__aeabi_dsub>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	f7f8 fe1e 	bl	800085c <__aeabi_ddiv>
 8007c20:	e7eb      	b.n	8007bfa <__ieee754_sqrt+0x2a>
 8007c22:	1509      	asrs	r1, r1, #20
 8007c24:	f000 808d 	beq.w	8007d42 <__ieee754_sqrt+0x172>
 8007c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c2c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8007c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c34:	07c9      	lsls	r1, r1, #31
 8007c36:	bf5c      	itt	pl
 8007c38:	005b      	lslpl	r3, r3, #1
 8007c3a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8007c3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c42:	bf58      	it	pl
 8007c44:	0052      	lslpl	r2, r2, #1
 8007c46:	2500      	movs	r5, #0
 8007c48:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007c4c:	1076      	asrs	r6, r6, #1
 8007c4e:	0052      	lsls	r2, r2, #1
 8007c50:	f04f 0e16 	mov.w	lr, #22
 8007c54:	46ac      	mov	ip, r5
 8007c56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c5a:	eb0c 0001 	add.w	r0, ip, r1
 8007c5e:	4298      	cmp	r0, r3
 8007c60:	bfde      	ittt	le
 8007c62:	1a1b      	suble	r3, r3, r0
 8007c64:	eb00 0c01 	addle.w	ip, r0, r1
 8007c68:	186d      	addle	r5, r5, r1
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	f1be 0e01 	subs.w	lr, lr, #1
 8007c70:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007c74:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007c78:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007c7c:	d1ed      	bne.n	8007c5a <__ieee754_sqrt+0x8a>
 8007c7e:	4674      	mov	r4, lr
 8007c80:	2720      	movs	r7, #32
 8007c82:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007c86:	4563      	cmp	r3, ip
 8007c88:	eb01 000e 	add.w	r0, r1, lr
 8007c8c:	dc02      	bgt.n	8007c94 <__ieee754_sqrt+0xc4>
 8007c8e:	d113      	bne.n	8007cb8 <__ieee754_sqrt+0xe8>
 8007c90:	4290      	cmp	r0, r2
 8007c92:	d811      	bhi.n	8007cb8 <__ieee754_sqrt+0xe8>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	eb00 0e01 	add.w	lr, r0, r1
 8007c9a:	da57      	bge.n	8007d4c <__ieee754_sqrt+0x17c>
 8007c9c:	f1be 0f00 	cmp.w	lr, #0
 8007ca0:	db54      	blt.n	8007d4c <__ieee754_sqrt+0x17c>
 8007ca2:	f10c 0801 	add.w	r8, ip, #1
 8007ca6:	eba3 030c 	sub.w	r3, r3, ip
 8007caa:	4290      	cmp	r0, r2
 8007cac:	bf88      	it	hi
 8007cae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007cb2:	1a12      	subs	r2, r2, r0
 8007cb4:	440c      	add	r4, r1
 8007cb6:	46c4      	mov	ip, r8
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	3f01      	subs	r7, #1
 8007cbc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007cc0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007cc4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007cc8:	d1dd      	bne.n	8007c86 <__ieee754_sqrt+0xb6>
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	d01b      	beq.n	8007d06 <__ieee754_sqrt+0x136>
 8007cce:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007d7c <__ieee754_sqrt+0x1ac>
 8007cd2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007d80 <__ieee754_sqrt+0x1b0>
 8007cd6:	e9da 0100 	ldrd	r0, r1, [sl]
 8007cda:	e9db 2300 	ldrd	r2, r3, [fp]
 8007cde:	f7f8 fadb 	bl	8000298 <__aeabi_dsub>
 8007ce2:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f7f8 ff07 	bl	8000b00 <__aeabi_dcmple>
 8007cf2:	b140      	cbz	r0, 8007d06 <__ieee754_sqrt+0x136>
 8007cf4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007cf8:	e9da 0100 	ldrd	r0, r1, [sl]
 8007cfc:	e9db 2300 	ldrd	r2, r3, [fp]
 8007d00:	d126      	bne.n	8007d50 <__ieee754_sqrt+0x180>
 8007d02:	3501      	adds	r5, #1
 8007d04:	463c      	mov	r4, r7
 8007d06:	106a      	asrs	r2, r5, #1
 8007d08:	0863      	lsrs	r3, r4, #1
 8007d0a:	07e9      	lsls	r1, r5, #31
 8007d0c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007d10:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007d14:	bf48      	it	mi
 8007d16:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007d1a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007d1e:	461c      	mov	r4, r3
 8007d20:	e76d      	b.n	8007bfe <__ieee754_sqrt+0x2e>
 8007d22:	0ad3      	lsrs	r3, r2, #11
 8007d24:	3815      	subs	r0, #21
 8007d26:	0552      	lsls	r2, r2, #21
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d0fa      	beq.n	8007d22 <__ieee754_sqrt+0x152>
 8007d2c:	02dc      	lsls	r4, r3, #11
 8007d2e:	d50a      	bpl.n	8007d46 <__ieee754_sqrt+0x176>
 8007d30:	f1c1 0420 	rsb	r4, r1, #32
 8007d34:	fa22 f404 	lsr.w	r4, r2, r4
 8007d38:	1e4d      	subs	r5, r1, #1
 8007d3a:	408a      	lsls	r2, r1
 8007d3c:	4323      	orrs	r3, r4
 8007d3e:	1b41      	subs	r1, r0, r5
 8007d40:	e772      	b.n	8007c28 <__ieee754_sqrt+0x58>
 8007d42:	4608      	mov	r0, r1
 8007d44:	e7f0      	b.n	8007d28 <__ieee754_sqrt+0x158>
 8007d46:	005b      	lsls	r3, r3, #1
 8007d48:	3101      	adds	r1, #1
 8007d4a:	e7ef      	b.n	8007d2c <__ieee754_sqrt+0x15c>
 8007d4c:	46e0      	mov	r8, ip
 8007d4e:	e7aa      	b.n	8007ca6 <__ieee754_sqrt+0xd6>
 8007d50:	f7f8 faa4 	bl	800029c <__adddf3>
 8007d54:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	4649      	mov	r1, r9
 8007d60:	f7f8 fec4 	bl	8000aec <__aeabi_dcmplt>
 8007d64:	b120      	cbz	r0, 8007d70 <__ieee754_sqrt+0x1a0>
 8007d66:	1ca0      	adds	r0, r4, #2
 8007d68:	bf08      	it	eq
 8007d6a:	3501      	addeq	r5, #1
 8007d6c:	3402      	adds	r4, #2
 8007d6e:	e7ca      	b.n	8007d06 <__ieee754_sqrt+0x136>
 8007d70:	3401      	adds	r4, #1
 8007d72:	f024 0401 	bic.w	r4, r4, #1
 8007d76:	e7c6      	b.n	8007d06 <__ieee754_sqrt+0x136>
 8007d78:	7ff00000 	.word	0x7ff00000
 8007d7c:	200001d8 	.word	0x200001d8
 8007d80:	200001e0 	.word	0x200001e0
 8007d84:	00000000 	.word	0x00000000

08007d88 <__ieee754_pow>:
 8007d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8c:	ed2d 8b06 	vpush	{d8-d10}
 8007d90:	b089      	sub	sp, #36	; 0x24
 8007d92:	ed8d 1b00 	vstr	d1, [sp]
 8007d96:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007d9a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007d9e:	ea58 0102 	orrs.w	r1, r8, r2
 8007da2:	ec57 6b10 	vmov	r6, r7, d0
 8007da6:	d115      	bne.n	8007dd4 <__ieee754_pow+0x4c>
 8007da8:	19b3      	adds	r3, r6, r6
 8007daa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007dae:	4152      	adcs	r2, r2
 8007db0:	4299      	cmp	r1, r3
 8007db2:	4b89      	ldr	r3, [pc, #548]	; (8007fd8 <__ieee754_pow+0x250>)
 8007db4:	4193      	sbcs	r3, r2
 8007db6:	f080 84d1 	bcs.w	800875c <__ieee754_pow+0x9d4>
 8007dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	f7f8 fa6b 	bl	800029c <__adddf3>
 8007dc6:	ec41 0b10 	vmov	d0, r0, r1
 8007dca:	b009      	add	sp, #36	; 0x24
 8007dcc:	ecbd 8b06 	vpop	{d8-d10}
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	4b81      	ldr	r3, [pc, #516]	; (8007fdc <__ieee754_pow+0x254>)
 8007dd6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007dda:	429c      	cmp	r4, r3
 8007ddc:	ee10 aa10 	vmov	sl, s0
 8007de0:	463d      	mov	r5, r7
 8007de2:	dc06      	bgt.n	8007df2 <__ieee754_pow+0x6a>
 8007de4:	d101      	bne.n	8007dea <__ieee754_pow+0x62>
 8007de6:	2e00      	cmp	r6, #0
 8007de8:	d1e7      	bne.n	8007dba <__ieee754_pow+0x32>
 8007dea:	4598      	cmp	r8, r3
 8007dec:	dc01      	bgt.n	8007df2 <__ieee754_pow+0x6a>
 8007dee:	d10f      	bne.n	8007e10 <__ieee754_pow+0x88>
 8007df0:	b172      	cbz	r2, 8007e10 <__ieee754_pow+0x88>
 8007df2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007df6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007dfa:	ea55 050a 	orrs.w	r5, r5, sl
 8007dfe:	d1dc      	bne.n	8007dba <__ieee754_pow+0x32>
 8007e00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007e04:	18db      	adds	r3, r3, r3
 8007e06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007e0a:	4152      	adcs	r2, r2
 8007e0c:	429d      	cmp	r5, r3
 8007e0e:	e7d0      	b.n	8007db2 <__ieee754_pow+0x2a>
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	da3b      	bge.n	8007e8c <__ieee754_pow+0x104>
 8007e14:	4b72      	ldr	r3, [pc, #456]	; (8007fe0 <__ieee754_pow+0x258>)
 8007e16:	4598      	cmp	r8, r3
 8007e18:	dc51      	bgt.n	8007ebe <__ieee754_pow+0x136>
 8007e1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007e1e:	4598      	cmp	r8, r3
 8007e20:	f340 84ab 	ble.w	800877a <__ieee754_pow+0x9f2>
 8007e24:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e2c:	2b14      	cmp	r3, #20
 8007e2e:	dd0f      	ble.n	8007e50 <__ieee754_pow+0xc8>
 8007e30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e34:	fa22 f103 	lsr.w	r1, r2, r3
 8007e38:	fa01 f303 	lsl.w	r3, r1, r3
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	f040 849c 	bne.w	800877a <__ieee754_pow+0x9f2>
 8007e42:	f001 0101 	and.w	r1, r1, #1
 8007e46:	f1c1 0302 	rsb	r3, r1, #2
 8007e4a:	9304      	str	r3, [sp, #16]
 8007e4c:	b182      	cbz	r2, 8007e70 <__ieee754_pow+0xe8>
 8007e4e:	e05f      	b.n	8007f10 <__ieee754_pow+0x188>
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	d15b      	bne.n	8007f0c <__ieee754_pow+0x184>
 8007e54:	f1c3 0314 	rsb	r3, r3, #20
 8007e58:	fa48 f103 	asr.w	r1, r8, r3
 8007e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e60:	4543      	cmp	r3, r8
 8007e62:	f040 8487 	bne.w	8008774 <__ieee754_pow+0x9ec>
 8007e66:	f001 0101 	and.w	r1, r1, #1
 8007e6a:	f1c1 0302 	rsb	r3, r1, #2
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	4b5c      	ldr	r3, [pc, #368]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007e72:	4598      	cmp	r8, r3
 8007e74:	d132      	bne.n	8007edc <__ieee754_pow+0x154>
 8007e76:	f1b9 0f00 	cmp.w	r9, #0
 8007e7a:	f280 8477 	bge.w	800876c <__ieee754_pow+0x9e4>
 8007e7e:	4959      	ldr	r1, [pc, #356]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007e80:	4632      	mov	r2, r6
 8007e82:	463b      	mov	r3, r7
 8007e84:	2000      	movs	r0, #0
 8007e86:	f7f8 fce9 	bl	800085c <__aeabi_ddiv>
 8007e8a:	e79c      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	9304      	str	r3, [sp, #16]
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	d13d      	bne.n	8007f10 <__ieee754_pow+0x188>
 8007e94:	4b51      	ldr	r3, [pc, #324]	; (8007fdc <__ieee754_pow+0x254>)
 8007e96:	4598      	cmp	r8, r3
 8007e98:	d1ea      	bne.n	8007e70 <__ieee754_pow+0xe8>
 8007e9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007e9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007ea2:	ea53 030a 	orrs.w	r3, r3, sl
 8007ea6:	f000 8459 	beq.w	800875c <__ieee754_pow+0x9d4>
 8007eaa:	4b4f      	ldr	r3, [pc, #316]	; (8007fe8 <__ieee754_pow+0x260>)
 8007eac:	429c      	cmp	r4, r3
 8007eae:	dd08      	ble.n	8007ec2 <__ieee754_pow+0x13a>
 8007eb0:	f1b9 0f00 	cmp.w	r9, #0
 8007eb4:	f2c0 8456 	blt.w	8008764 <__ieee754_pow+0x9dc>
 8007eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ebc:	e783      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e7e5      	b.n	8007e8e <__ieee754_pow+0x106>
 8007ec2:	f1b9 0f00 	cmp.w	r9, #0
 8007ec6:	f04f 0000 	mov.w	r0, #0
 8007eca:	f04f 0100 	mov.w	r1, #0
 8007ece:	f6bf af7a 	bge.w	8007dc6 <__ieee754_pow+0x3e>
 8007ed2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007ed6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007eda:	e774      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007edc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007ee0:	d106      	bne.n	8007ef0 <__ieee754_pow+0x168>
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	4639      	mov	r1, r7
 8007eea:	f7f8 fb8d 	bl	8000608 <__aeabi_dmul>
 8007eee:	e76a      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007ef0:	4b3e      	ldr	r3, [pc, #248]	; (8007fec <__ieee754_pow+0x264>)
 8007ef2:	4599      	cmp	r9, r3
 8007ef4:	d10c      	bne.n	8007f10 <__ieee754_pow+0x188>
 8007ef6:	2d00      	cmp	r5, #0
 8007ef8:	db0a      	blt.n	8007f10 <__ieee754_pow+0x188>
 8007efa:	ec47 6b10 	vmov	d0, r6, r7
 8007efe:	b009      	add	sp, #36	; 0x24
 8007f00:	ecbd 8b06 	vpop	{d8-d10}
 8007f04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	f7ff be62 	b.w	8007bd0 <__ieee754_sqrt>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9304      	str	r3, [sp, #16]
 8007f10:	ec47 6b10 	vmov	d0, r6, r7
 8007f14:	f000 fc62 	bl	80087dc <fabs>
 8007f18:	ec51 0b10 	vmov	r0, r1, d0
 8007f1c:	f1ba 0f00 	cmp.w	sl, #0
 8007f20:	d129      	bne.n	8007f76 <__ieee754_pow+0x1ee>
 8007f22:	b124      	cbz	r4, 8007f2e <__ieee754_pow+0x1a6>
 8007f24:	4b2f      	ldr	r3, [pc, #188]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007f26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d123      	bne.n	8007f76 <__ieee754_pow+0x1ee>
 8007f2e:	f1b9 0f00 	cmp.w	r9, #0
 8007f32:	da05      	bge.n	8007f40 <__ieee754_pow+0x1b8>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	2000      	movs	r0, #0
 8007f3a:	492a      	ldr	r1, [pc, #168]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007f3c:	f7f8 fc8e 	bl	800085c <__aeabi_ddiv>
 8007f40:	2d00      	cmp	r5, #0
 8007f42:	f6bf af40 	bge.w	8007dc6 <__ieee754_pow+0x3e>
 8007f46:	9b04      	ldr	r3, [sp, #16]
 8007f48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007f4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f50:	431c      	orrs	r4, r3
 8007f52:	d108      	bne.n	8007f66 <__ieee754_pow+0x1de>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f7f8 f99c 	bl	8000298 <__aeabi_dsub>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	e78f      	b.n	8007e86 <__ieee754_pow+0xfe>
 8007f66:	9b04      	ldr	r3, [sp, #16]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	f47f af2c 	bne.w	8007dc6 <__ieee754_pow+0x3e>
 8007f6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f72:	4619      	mov	r1, r3
 8007f74:	e727      	b.n	8007dc6 <__ieee754_pow+0x3e>
 8007f76:	0feb      	lsrs	r3, r5, #31
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	9306      	str	r3, [sp, #24]
 8007f7c:	9a06      	ldr	r2, [sp, #24]
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	d102      	bne.n	8007f8a <__ieee754_pow+0x202>
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	e7e6      	b.n	8007f58 <__ieee754_pow+0x1d0>
 8007f8a:	4b19      	ldr	r3, [pc, #100]	; (8007ff0 <__ieee754_pow+0x268>)
 8007f8c:	4598      	cmp	r8, r3
 8007f8e:	f340 80fb 	ble.w	8008188 <__ieee754_pow+0x400>
 8007f92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007f96:	4598      	cmp	r8, r3
 8007f98:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <__ieee754_pow+0x260>)
 8007f9a:	dd0c      	ble.n	8007fb6 <__ieee754_pow+0x22e>
 8007f9c:	429c      	cmp	r4, r3
 8007f9e:	dc0f      	bgt.n	8007fc0 <__ieee754_pow+0x238>
 8007fa0:	f1b9 0f00 	cmp.w	r9, #0
 8007fa4:	da0f      	bge.n	8007fc6 <__ieee754_pow+0x23e>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	b009      	add	sp, #36	; 0x24
 8007faa:	ecbd 8b06 	vpop	{d8-d10}
 8007fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb2:	f000 bcc2 	b.w	800893a <__math_oflow>
 8007fb6:	429c      	cmp	r4, r3
 8007fb8:	dbf2      	blt.n	8007fa0 <__ieee754_pow+0x218>
 8007fba:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <__ieee754_pow+0x25c>)
 8007fbc:	429c      	cmp	r4, r3
 8007fbe:	dd19      	ble.n	8007ff4 <__ieee754_pow+0x26c>
 8007fc0:	f1b9 0f00 	cmp.w	r9, #0
 8007fc4:	dcef      	bgt.n	8007fa6 <__ieee754_pow+0x21e>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	b009      	add	sp, #36	; 0x24
 8007fca:	ecbd 8b06 	vpop	{d8-d10}
 8007fce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd2:	f000 bca9 	b.w	8008928 <__math_uflow>
 8007fd6:	bf00      	nop
 8007fd8:	fff00000 	.word	0xfff00000
 8007fdc:	7ff00000 	.word	0x7ff00000
 8007fe0:	433fffff 	.word	0x433fffff
 8007fe4:	3ff00000 	.word	0x3ff00000
 8007fe8:	3fefffff 	.word	0x3fefffff
 8007fec:	3fe00000 	.word	0x3fe00000
 8007ff0:	41e00000 	.word	0x41e00000
 8007ff4:	4b60      	ldr	r3, [pc, #384]	; (8008178 <__ieee754_pow+0x3f0>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f7f8 f94e 	bl	8000298 <__aeabi_dsub>
 8007ffc:	a354      	add	r3, pc, #336	; (adr r3, 8008150 <__ieee754_pow+0x3c8>)
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	4604      	mov	r4, r0
 8008004:	460d      	mov	r5, r1
 8008006:	f7f8 faff 	bl	8000608 <__aeabi_dmul>
 800800a:	a353      	add	r3, pc, #332	; (adr r3, 8008158 <__ieee754_pow+0x3d0>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	4606      	mov	r6, r0
 8008012:	460f      	mov	r7, r1
 8008014:	4620      	mov	r0, r4
 8008016:	4629      	mov	r1, r5
 8008018:	f7f8 faf6 	bl	8000608 <__aeabi_dmul>
 800801c:	4b57      	ldr	r3, [pc, #348]	; (800817c <__ieee754_pow+0x3f4>)
 800801e:	4682      	mov	sl, r0
 8008020:	468b      	mov	fp, r1
 8008022:	2200      	movs	r2, #0
 8008024:	4620      	mov	r0, r4
 8008026:	4629      	mov	r1, r5
 8008028:	f7f8 faee 	bl	8000608 <__aeabi_dmul>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	a14b      	add	r1, pc, #300	; (adr r1, 8008160 <__ieee754_pow+0x3d8>)
 8008032:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008036:	f7f8 f92f 	bl	8000298 <__aeabi_dsub>
 800803a:	4622      	mov	r2, r4
 800803c:	462b      	mov	r3, r5
 800803e:	f7f8 fae3 	bl	8000608 <__aeabi_dmul>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	2000      	movs	r0, #0
 8008048:	494d      	ldr	r1, [pc, #308]	; (8008180 <__ieee754_pow+0x3f8>)
 800804a:	f7f8 f925 	bl	8000298 <__aeabi_dsub>
 800804e:	4622      	mov	r2, r4
 8008050:	4680      	mov	r8, r0
 8008052:	4689      	mov	r9, r1
 8008054:	462b      	mov	r3, r5
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fad5 	bl	8000608 <__aeabi_dmul>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4640      	mov	r0, r8
 8008064:	4649      	mov	r1, r9
 8008066:	f7f8 facf 	bl	8000608 <__aeabi_dmul>
 800806a:	a33f      	add	r3, pc, #252	; (adr r3, 8008168 <__ieee754_pow+0x3e0>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f7f8 faca 	bl	8000608 <__aeabi_dmul>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4650      	mov	r0, sl
 800807a:	4659      	mov	r1, fp
 800807c:	f7f8 f90c 	bl	8000298 <__aeabi_dsub>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4680      	mov	r8, r0
 8008086:	4689      	mov	r9, r1
 8008088:	4630      	mov	r0, r6
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 f906 	bl	800029c <__adddf3>
 8008090:	2000      	movs	r0, #0
 8008092:	4632      	mov	r2, r6
 8008094:	463b      	mov	r3, r7
 8008096:	4604      	mov	r4, r0
 8008098:	460d      	mov	r5, r1
 800809a:	f7f8 f8fd 	bl	8000298 <__aeabi_dsub>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f7f8 f8f7 	bl	8000298 <__aeabi_dsub>
 80080aa:	9b04      	ldr	r3, [sp, #16]
 80080ac:	9a06      	ldr	r2, [sp, #24]
 80080ae:	3b01      	subs	r3, #1
 80080b0:	4313      	orrs	r3, r2
 80080b2:	4682      	mov	sl, r0
 80080b4:	468b      	mov	fp, r1
 80080b6:	f040 81e7 	bne.w	8008488 <__ieee754_pow+0x700>
 80080ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008170 <__ieee754_pow+0x3e8>
 80080be:	eeb0 8a47 	vmov.f32	s16, s14
 80080c2:	eef0 8a67 	vmov.f32	s17, s15
 80080c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080ca:	2600      	movs	r6, #0
 80080cc:	4632      	mov	r2, r6
 80080ce:	463b      	mov	r3, r7
 80080d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080d4:	f7f8 f8e0 	bl	8000298 <__aeabi_dsub>
 80080d8:	4622      	mov	r2, r4
 80080da:	462b      	mov	r3, r5
 80080dc:	f7f8 fa94 	bl	8000608 <__aeabi_dmul>
 80080e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080e4:	4680      	mov	r8, r0
 80080e6:	4689      	mov	r9, r1
 80080e8:	4650      	mov	r0, sl
 80080ea:	4659      	mov	r1, fp
 80080ec:	f7f8 fa8c 	bl	8000608 <__aeabi_dmul>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4640      	mov	r0, r8
 80080f6:	4649      	mov	r1, r9
 80080f8:	f7f8 f8d0 	bl	800029c <__adddf3>
 80080fc:	4632      	mov	r2, r6
 80080fe:	463b      	mov	r3, r7
 8008100:	4680      	mov	r8, r0
 8008102:	4689      	mov	r9, r1
 8008104:	4620      	mov	r0, r4
 8008106:	4629      	mov	r1, r5
 8008108:	f7f8 fa7e 	bl	8000608 <__aeabi_dmul>
 800810c:	460b      	mov	r3, r1
 800810e:	4604      	mov	r4, r0
 8008110:	460d      	mov	r5, r1
 8008112:	4602      	mov	r2, r0
 8008114:	4649      	mov	r1, r9
 8008116:	4640      	mov	r0, r8
 8008118:	f7f8 f8c0 	bl	800029c <__adddf3>
 800811c:	4b19      	ldr	r3, [pc, #100]	; (8008184 <__ieee754_pow+0x3fc>)
 800811e:	4299      	cmp	r1, r3
 8008120:	ec45 4b19 	vmov	d9, r4, r5
 8008124:	4606      	mov	r6, r0
 8008126:	460f      	mov	r7, r1
 8008128:	468b      	mov	fp, r1
 800812a:	f340 82f0 	ble.w	800870e <__ieee754_pow+0x986>
 800812e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008132:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008136:	4303      	orrs	r3, r0
 8008138:	f000 81e4 	beq.w	8008504 <__ieee754_pow+0x77c>
 800813c:	ec51 0b18 	vmov	r0, r1, d8
 8008140:	2200      	movs	r2, #0
 8008142:	2300      	movs	r3, #0
 8008144:	f7f8 fcd2 	bl	8000aec <__aeabi_dcmplt>
 8008148:	3800      	subs	r0, #0
 800814a:	bf18      	it	ne
 800814c:	2001      	movne	r0, #1
 800814e:	e72b      	b.n	8007fa8 <__ieee754_pow+0x220>
 8008150:	60000000 	.word	0x60000000
 8008154:	3ff71547 	.word	0x3ff71547
 8008158:	f85ddf44 	.word	0xf85ddf44
 800815c:	3e54ae0b 	.word	0x3e54ae0b
 8008160:	55555555 	.word	0x55555555
 8008164:	3fd55555 	.word	0x3fd55555
 8008168:	652b82fe 	.word	0x652b82fe
 800816c:	3ff71547 	.word	0x3ff71547
 8008170:	00000000 	.word	0x00000000
 8008174:	bff00000 	.word	0xbff00000
 8008178:	3ff00000 	.word	0x3ff00000
 800817c:	3fd00000 	.word	0x3fd00000
 8008180:	3fe00000 	.word	0x3fe00000
 8008184:	408fffff 	.word	0x408fffff
 8008188:	4bd5      	ldr	r3, [pc, #852]	; (80084e0 <__ieee754_pow+0x758>)
 800818a:	402b      	ands	r3, r5
 800818c:	2200      	movs	r2, #0
 800818e:	b92b      	cbnz	r3, 800819c <__ieee754_pow+0x414>
 8008190:	4bd4      	ldr	r3, [pc, #848]	; (80084e4 <__ieee754_pow+0x75c>)
 8008192:	f7f8 fa39 	bl	8000608 <__aeabi_dmul>
 8008196:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800819a:	460c      	mov	r4, r1
 800819c:	1523      	asrs	r3, r4, #20
 800819e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80081a2:	4413      	add	r3, r2
 80081a4:	9305      	str	r3, [sp, #20]
 80081a6:	4bd0      	ldr	r3, [pc, #832]	; (80084e8 <__ieee754_pow+0x760>)
 80081a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80081ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80081b0:	429c      	cmp	r4, r3
 80081b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80081b6:	dd08      	ble.n	80081ca <__ieee754_pow+0x442>
 80081b8:	4bcc      	ldr	r3, [pc, #816]	; (80084ec <__ieee754_pow+0x764>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	f340 8162 	ble.w	8008484 <__ieee754_pow+0x6fc>
 80081c0:	9b05      	ldr	r3, [sp, #20]
 80081c2:	3301      	adds	r3, #1
 80081c4:	9305      	str	r3, [sp, #20]
 80081c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80081ca:	2400      	movs	r4, #0
 80081cc:	00e3      	lsls	r3, r4, #3
 80081ce:	9307      	str	r3, [sp, #28]
 80081d0:	4bc7      	ldr	r3, [pc, #796]	; (80084f0 <__ieee754_pow+0x768>)
 80081d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081d6:	ed93 7b00 	vldr	d7, [r3]
 80081da:	4629      	mov	r1, r5
 80081dc:	ec53 2b17 	vmov	r2, r3, d7
 80081e0:	eeb0 9a47 	vmov.f32	s18, s14
 80081e4:	eef0 9a67 	vmov.f32	s19, s15
 80081e8:	4682      	mov	sl, r0
 80081ea:	f7f8 f855 	bl	8000298 <__aeabi_dsub>
 80081ee:	4652      	mov	r2, sl
 80081f0:	4606      	mov	r6, r0
 80081f2:	460f      	mov	r7, r1
 80081f4:	462b      	mov	r3, r5
 80081f6:	ec51 0b19 	vmov	r0, r1, d9
 80081fa:	f7f8 f84f 	bl	800029c <__adddf3>
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	2000      	movs	r0, #0
 8008204:	49bb      	ldr	r1, [pc, #748]	; (80084f4 <__ieee754_pow+0x76c>)
 8008206:	f7f8 fb29 	bl	800085c <__aeabi_ddiv>
 800820a:	ec41 0b1a 	vmov	d10, r0, r1
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	4630      	mov	r0, r6
 8008214:	4639      	mov	r1, r7
 8008216:	f7f8 f9f7 	bl	8000608 <__aeabi_dmul>
 800821a:	2300      	movs	r3, #0
 800821c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008220:	9302      	str	r3, [sp, #8]
 8008222:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008226:	46ab      	mov	fp, r5
 8008228:	106d      	asrs	r5, r5, #1
 800822a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800822e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008232:	ec41 0b18 	vmov	d8, r0, r1
 8008236:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800823a:	2200      	movs	r2, #0
 800823c:	4640      	mov	r0, r8
 800823e:	4649      	mov	r1, r9
 8008240:	4614      	mov	r4, r2
 8008242:	461d      	mov	r5, r3
 8008244:	f7f8 f9e0 	bl	8000608 <__aeabi_dmul>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4630      	mov	r0, r6
 800824e:	4639      	mov	r1, r7
 8008250:	f7f8 f822 	bl	8000298 <__aeabi_dsub>
 8008254:	ec53 2b19 	vmov	r2, r3, d9
 8008258:	4606      	mov	r6, r0
 800825a:	460f      	mov	r7, r1
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	f7f8 f81a 	bl	8000298 <__aeabi_dsub>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4650      	mov	r0, sl
 800826a:	4659      	mov	r1, fp
 800826c:	f7f8 f814 	bl	8000298 <__aeabi_dsub>
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	f7f8 f9c8 	bl	8000608 <__aeabi_dmul>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4630      	mov	r0, r6
 800827e:	4639      	mov	r1, r7
 8008280:	f7f8 f80a 	bl	8000298 <__aeabi_dsub>
 8008284:	ec53 2b1a 	vmov	r2, r3, d10
 8008288:	f7f8 f9be 	bl	8000608 <__aeabi_dmul>
 800828c:	ec53 2b18 	vmov	r2, r3, d8
 8008290:	ec41 0b19 	vmov	d9, r0, r1
 8008294:	ec51 0b18 	vmov	r0, r1, d8
 8008298:	f7f8 f9b6 	bl	8000608 <__aeabi_dmul>
 800829c:	a37c      	add	r3, pc, #496	; (adr r3, 8008490 <__ieee754_pow+0x708>)
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	4604      	mov	r4, r0
 80082a4:	460d      	mov	r5, r1
 80082a6:	f7f8 f9af 	bl	8000608 <__aeabi_dmul>
 80082aa:	a37b      	add	r3, pc, #492	; (adr r3, 8008498 <__ieee754_pow+0x710>)
 80082ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b0:	f7f7 fff4 	bl	800029c <__adddf3>
 80082b4:	4622      	mov	r2, r4
 80082b6:	462b      	mov	r3, r5
 80082b8:	f7f8 f9a6 	bl	8000608 <__aeabi_dmul>
 80082bc:	a378      	add	r3, pc, #480	; (adr r3, 80084a0 <__ieee754_pow+0x718>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f7 ffeb 	bl	800029c <__adddf3>
 80082c6:	4622      	mov	r2, r4
 80082c8:	462b      	mov	r3, r5
 80082ca:	f7f8 f99d 	bl	8000608 <__aeabi_dmul>
 80082ce:	a376      	add	r3, pc, #472	; (adr r3, 80084a8 <__ieee754_pow+0x720>)
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f7f7 ffe2 	bl	800029c <__adddf3>
 80082d8:	4622      	mov	r2, r4
 80082da:	462b      	mov	r3, r5
 80082dc:	f7f8 f994 	bl	8000608 <__aeabi_dmul>
 80082e0:	a373      	add	r3, pc, #460	; (adr r3, 80084b0 <__ieee754_pow+0x728>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f7 ffd9 	bl	800029c <__adddf3>
 80082ea:	4622      	mov	r2, r4
 80082ec:	462b      	mov	r3, r5
 80082ee:	f7f8 f98b 	bl	8000608 <__aeabi_dmul>
 80082f2:	a371      	add	r3, pc, #452	; (adr r3, 80084b8 <__ieee754_pow+0x730>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f7 ffd0 	bl	800029c <__adddf3>
 80082fc:	4622      	mov	r2, r4
 80082fe:	4606      	mov	r6, r0
 8008300:	460f      	mov	r7, r1
 8008302:	462b      	mov	r3, r5
 8008304:	4620      	mov	r0, r4
 8008306:	4629      	mov	r1, r5
 8008308:	f7f8 f97e 	bl	8000608 <__aeabi_dmul>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	f7f8 f978 	bl	8000608 <__aeabi_dmul>
 8008318:	4642      	mov	r2, r8
 800831a:	4604      	mov	r4, r0
 800831c:	460d      	mov	r5, r1
 800831e:	464b      	mov	r3, r9
 8008320:	ec51 0b18 	vmov	r0, r1, d8
 8008324:	f7f7 ffba 	bl	800029c <__adddf3>
 8008328:	ec53 2b19 	vmov	r2, r3, d9
 800832c:	f7f8 f96c 	bl	8000608 <__aeabi_dmul>
 8008330:	4622      	mov	r2, r4
 8008332:	462b      	mov	r3, r5
 8008334:	f7f7 ffb2 	bl	800029c <__adddf3>
 8008338:	4642      	mov	r2, r8
 800833a:	4682      	mov	sl, r0
 800833c:	468b      	mov	fp, r1
 800833e:	464b      	mov	r3, r9
 8008340:	4640      	mov	r0, r8
 8008342:	4649      	mov	r1, r9
 8008344:	f7f8 f960 	bl	8000608 <__aeabi_dmul>
 8008348:	4b6b      	ldr	r3, [pc, #428]	; (80084f8 <__ieee754_pow+0x770>)
 800834a:	2200      	movs	r2, #0
 800834c:	4606      	mov	r6, r0
 800834e:	460f      	mov	r7, r1
 8008350:	f7f7 ffa4 	bl	800029c <__adddf3>
 8008354:	4652      	mov	r2, sl
 8008356:	465b      	mov	r3, fp
 8008358:	f7f7 ffa0 	bl	800029c <__adddf3>
 800835c:	2000      	movs	r0, #0
 800835e:	4604      	mov	r4, r0
 8008360:	460d      	mov	r5, r1
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4640      	mov	r0, r8
 8008368:	4649      	mov	r1, r9
 800836a:	f7f8 f94d 	bl	8000608 <__aeabi_dmul>
 800836e:	4b62      	ldr	r3, [pc, #392]	; (80084f8 <__ieee754_pow+0x770>)
 8008370:	4680      	mov	r8, r0
 8008372:	4689      	mov	r9, r1
 8008374:	2200      	movs	r2, #0
 8008376:	4620      	mov	r0, r4
 8008378:	4629      	mov	r1, r5
 800837a:	f7f7 ff8d 	bl	8000298 <__aeabi_dsub>
 800837e:	4632      	mov	r2, r6
 8008380:	463b      	mov	r3, r7
 8008382:	f7f7 ff89 	bl	8000298 <__aeabi_dsub>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4650      	mov	r0, sl
 800838c:	4659      	mov	r1, fp
 800838e:	f7f7 ff83 	bl	8000298 <__aeabi_dsub>
 8008392:	ec53 2b18 	vmov	r2, r3, d8
 8008396:	f7f8 f937 	bl	8000608 <__aeabi_dmul>
 800839a:	4622      	mov	r2, r4
 800839c:	4606      	mov	r6, r0
 800839e:	460f      	mov	r7, r1
 80083a0:	462b      	mov	r3, r5
 80083a2:	ec51 0b19 	vmov	r0, r1, d9
 80083a6:	f7f8 f92f 	bl	8000608 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f7 ff73 	bl	800029c <__adddf3>
 80083b6:	4606      	mov	r6, r0
 80083b8:	460f      	mov	r7, r1
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f7 ff6b 	bl	800029c <__adddf3>
 80083c6:	a33e      	add	r3, pc, #248	; (adr r3, 80084c0 <__ieee754_pow+0x738>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	2000      	movs	r0, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	460d      	mov	r5, r1
 80083d2:	f7f8 f919 	bl	8000608 <__aeabi_dmul>
 80083d6:	4642      	mov	r2, r8
 80083d8:	ec41 0b18 	vmov	d8, r0, r1
 80083dc:	464b      	mov	r3, r9
 80083de:	4620      	mov	r0, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	f7f7 ff59 	bl	8000298 <__aeabi_dsub>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f7 ff53 	bl	8000298 <__aeabi_dsub>
 80083f2:	a335      	add	r3, pc, #212	; (adr r3, 80084c8 <__ieee754_pow+0x740>)
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	f7f8 f906 	bl	8000608 <__aeabi_dmul>
 80083fc:	a334      	add	r3, pc, #208	; (adr r3, 80084d0 <__ieee754_pow+0x748>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	4606      	mov	r6, r0
 8008404:	460f      	mov	r7, r1
 8008406:	4620      	mov	r0, r4
 8008408:	4629      	mov	r1, r5
 800840a:	f7f8 f8fd 	bl	8000608 <__aeabi_dmul>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4630      	mov	r0, r6
 8008414:	4639      	mov	r1, r7
 8008416:	f7f7 ff41 	bl	800029c <__adddf3>
 800841a:	9a07      	ldr	r2, [sp, #28]
 800841c:	4b37      	ldr	r3, [pc, #220]	; (80084fc <__ieee754_pow+0x774>)
 800841e:	4413      	add	r3, r2
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f7f7 ff3a 	bl	800029c <__adddf3>
 8008428:	4682      	mov	sl, r0
 800842a:	9805      	ldr	r0, [sp, #20]
 800842c:	468b      	mov	fp, r1
 800842e:	f7f8 f881 	bl	8000534 <__aeabi_i2d>
 8008432:	9a07      	ldr	r2, [sp, #28]
 8008434:	4b32      	ldr	r3, [pc, #200]	; (8008500 <__ieee754_pow+0x778>)
 8008436:	4413      	add	r3, r2
 8008438:	e9d3 8900 	ldrd	r8, r9, [r3]
 800843c:	4606      	mov	r6, r0
 800843e:	460f      	mov	r7, r1
 8008440:	4652      	mov	r2, sl
 8008442:	465b      	mov	r3, fp
 8008444:	ec51 0b18 	vmov	r0, r1, d8
 8008448:	f7f7 ff28 	bl	800029c <__adddf3>
 800844c:	4642      	mov	r2, r8
 800844e:	464b      	mov	r3, r9
 8008450:	f7f7 ff24 	bl	800029c <__adddf3>
 8008454:	4632      	mov	r2, r6
 8008456:	463b      	mov	r3, r7
 8008458:	f7f7 ff20 	bl	800029c <__adddf3>
 800845c:	2000      	movs	r0, #0
 800845e:	4632      	mov	r2, r6
 8008460:	463b      	mov	r3, r7
 8008462:	4604      	mov	r4, r0
 8008464:	460d      	mov	r5, r1
 8008466:	f7f7 ff17 	bl	8000298 <__aeabi_dsub>
 800846a:	4642      	mov	r2, r8
 800846c:	464b      	mov	r3, r9
 800846e:	f7f7 ff13 	bl	8000298 <__aeabi_dsub>
 8008472:	ec53 2b18 	vmov	r2, r3, d8
 8008476:	f7f7 ff0f 	bl	8000298 <__aeabi_dsub>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	4650      	mov	r0, sl
 8008480:	4659      	mov	r1, fp
 8008482:	e610      	b.n	80080a6 <__ieee754_pow+0x31e>
 8008484:	2401      	movs	r4, #1
 8008486:	e6a1      	b.n	80081cc <__ieee754_pow+0x444>
 8008488:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80084d8 <__ieee754_pow+0x750>
 800848c:	e617      	b.n	80080be <__ieee754_pow+0x336>
 800848e:	bf00      	nop
 8008490:	4a454eef 	.word	0x4a454eef
 8008494:	3fca7e28 	.word	0x3fca7e28
 8008498:	93c9db65 	.word	0x93c9db65
 800849c:	3fcd864a 	.word	0x3fcd864a
 80084a0:	a91d4101 	.word	0xa91d4101
 80084a4:	3fd17460 	.word	0x3fd17460
 80084a8:	518f264d 	.word	0x518f264d
 80084ac:	3fd55555 	.word	0x3fd55555
 80084b0:	db6fabff 	.word	0xdb6fabff
 80084b4:	3fdb6db6 	.word	0x3fdb6db6
 80084b8:	33333303 	.word	0x33333303
 80084bc:	3fe33333 	.word	0x3fe33333
 80084c0:	e0000000 	.word	0xe0000000
 80084c4:	3feec709 	.word	0x3feec709
 80084c8:	dc3a03fd 	.word	0xdc3a03fd
 80084cc:	3feec709 	.word	0x3feec709
 80084d0:	145b01f5 	.word	0x145b01f5
 80084d4:	be3e2fe0 	.word	0xbe3e2fe0
 80084d8:	00000000 	.word	0x00000000
 80084dc:	3ff00000 	.word	0x3ff00000
 80084e0:	7ff00000 	.word	0x7ff00000
 80084e4:	43400000 	.word	0x43400000
 80084e8:	0003988e 	.word	0x0003988e
 80084ec:	000bb679 	.word	0x000bb679
 80084f0:	08008db0 	.word	0x08008db0
 80084f4:	3ff00000 	.word	0x3ff00000
 80084f8:	40080000 	.word	0x40080000
 80084fc:	08008dd0 	.word	0x08008dd0
 8008500:	08008dc0 	.word	0x08008dc0
 8008504:	a3b3      	add	r3, pc, #716	; (adr r3, 80087d4 <__ieee754_pow+0xa4c>)
 8008506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f7 fec5 	bl	800029c <__adddf3>
 8008512:	4622      	mov	r2, r4
 8008514:	ec41 0b1a 	vmov	d10, r0, r1
 8008518:	462b      	mov	r3, r5
 800851a:	4630      	mov	r0, r6
 800851c:	4639      	mov	r1, r7
 800851e:	f7f7 febb 	bl	8000298 <__aeabi_dsub>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	ec51 0b1a 	vmov	r0, r1, d10
 800852a:	f7f8 fafd 	bl	8000b28 <__aeabi_dcmpgt>
 800852e:	2800      	cmp	r0, #0
 8008530:	f47f ae04 	bne.w	800813c <__ieee754_pow+0x3b4>
 8008534:	4aa2      	ldr	r2, [pc, #648]	; (80087c0 <__ieee754_pow+0xa38>)
 8008536:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800853a:	4293      	cmp	r3, r2
 800853c:	f340 8107 	ble.w	800874e <__ieee754_pow+0x9c6>
 8008540:	151b      	asrs	r3, r3, #20
 8008542:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008546:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800854a:	fa4a fa03 	asr.w	sl, sl, r3
 800854e:	44da      	add	sl, fp
 8008550:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008554:	489b      	ldr	r0, [pc, #620]	; (80087c4 <__ieee754_pow+0xa3c>)
 8008556:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800855a:	4108      	asrs	r0, r1
 800855c:	ea00 030a 	and.w	r3, r0, sl
 8008560:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008564:	f1c1 0114 	rsb	r1, r1, #20
 8008568:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800856c:	fa4a fa01 	asr.w	sl, sl, r1
 8008570:	f1bb 0f00 	cmp.w	fp, #0
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	4620      	mov	r0, r4
 800857a:	4629      	mov	r1, r5
 800857c:	bfb8      	it	lt
 800857e:	f1ca 0a00 	rsblt	sl, sl, #0
 8008582:	f7f7 fe89 	bl	8000298 <__aeabi_dsub>
 8008586:	ec41 0b19 	vmov	d9, r0, r1
 800858a:	4642      	mov	r2, r8
 800858c:	464b      	mov	r3, r9
 800858e:	ec51 0b19 	vmov	r0, r1, d9
 8008592:	f7f7 fe83 	bl	800029c <__adddf3>
 8008596:	a37a      	add	r3, pc, #488	; (adr r3, 8008780 <__ieee754_pow+0x9f8>)
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	2000      	movs	r0, #0
 800859e:	4604      	mov	r4, r0
 80085a0:	460d      	mov	r5, r1
 80085a2:	f7f8 f831 	bl	8000608 <__aeabi_dmul>
 80085a6:	ec53 2b19 	vmov	r2, r3, d9
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	4620      	mov	r0, r4
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7f7 fe71 	bl	8000298 <__aeabi_dsub>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f7 fe6b 	bl	8000298 <__aeabi_dsub>
 80085c2:	a371      	add	r3, pc, #452	; (adr r3, 8008788 <__ieee754_pow+0xa00>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f8 f81e 	bl	8000608 <__aeabi_dmul>
 80085cc:	a370      	add	r3, pc, #448	; (adr r3, 8008790 <__ieee754_pow+0xa08>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	4680      	mov	r8, r0
 80085d4:	4689      	mov	r9, r1
 80085d6:	4620      	mov	r0, r4
 80085d8:	4629      	mov	r1, r5
 80085da:	f7f8 f815 	bl	8000608 <__aeabi_dmul>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4640      	mov	r0, r8
 80085e4:	4649      	mov	r1, r9
 80085e6:	f7f7 fe59 	bl	800029c <__adddf3>
 80085ea:	4604      	mov	r4, r0
 80085ec:	460d      	mov	r5, r1
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	4630      	mov	r0, r6
 80085f4:	4639      	mov	r1, r7
 80085f6:	f7f7 fe51 	bl	800029c <__adddf3>
 80085fa:	4632      	mov	r2, r6
 80085fc:	463b      	mov	r3, r7
 80085fe:	4680      	mov	r8, r0
 8008600:	4689      	mov	r9, r1
 8008602:	f7f7 fe49 	bl	8000298 <__aeabi_dsub>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	4620      	mov	r0, r4
 800860c:	4629      	mov	r1, r5
 800860e:	f7f7 fe43 	bl	8000298 <__aeabi_dsub>
 8008612:	4642      	mov	r2, r8
 8008614:	4606      	mov	r6, r0
 8008616:	460f      	mov	r7, r1
 8008618:	464b      	mov	r3, r9
 800861a:	4640      	mov	r0, r8
 800861c:	4649      	mov	r1, r9
 800861e:	f7f7 fff3 	bl	8000608 <__aeabi_dmul>
 8008622:	a35d      	add	r3, pc, #372	; (adr r3, 8008798 <__ieee754_pow+0xa10>)
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	4604      	mov	r4, r0
 800862a:	460d      	mov	r5, r1
 800862c:	f7f7 ffec 	bl	8000608 <__aeabi_dmul>
 8008630:	a35b      	add	r3, pc, #364	; (adr r3, 80087a0 <__ieee754_pow+0xa18>)
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	f7f7 fe2f 	bl	8000298 <__aeabi_dsub>
 800863a:	4622      	mov	r2, r4
 800863c:	462b      	mov	r3, r5
 800863e:	f7f7 ffe3 	bl	8000608 <__aeabi_dmul>
 8008642:	a359      	add	r3, pc, #356	; (adr r3, 80087a8 <__ieee754_pow+0xa20>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	f7f7 fe28 	bl	800029c <__adddf3>
 800864c:	4622      	mov	r2, r4
 800864e:	462b      	mov	r3, r5
 8008650:	f7f7 ffda 	bl	8000608 <__aeabi_dmul>
 8008654:	a356      	add	r3, pc, #344	; (adr r3, 80087b0 <__ieee754_pow+0xa28>)
 8008656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865a:	f7f7 fe1d 	bl	8000298 <__aeabi_dsub>
 800865e:	4622      	mov	r2, r4
 8008660:	462b      	mov	r3, r5
 8008662:	f7f7 ffd1 	bl	8000608 <__aeabi_dmul>
 8008666:	a354      	add	r3, pc, #336	; (adr r3, 80087b8 <__ieee754_pow+0xa30>)
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	f7f7 fe16 	bl	800029c <__adddf3>
 8008670:	4622      	mov	r2, r4
 8008672:	462b      	mov	r3, r5
 8008674:	f7f7 ffc8 	bl	8000608 <__aeabi_dmul>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4640      	mov	r0, r8
 800867e:	4649      	mov	r1, r9
 8008680:	f7f7 fe0a 	bl	8000298 <__aeabi_dsub>
 8008684:	4604      	mov	r4, r0
 8008686:	460d      	mov	r5, r1
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4640      	mov	r0, r8
 800868e:	4649      	mov	r1, r9
 8008690:	f7f7 ffba 	bl	8000608 <__aeabi_dmul>
 8008694:	2200      	movs	r2, #0
 8008696:	ec41 0b19 	vmov	d9, r0, r1
 800869a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f7 fdf9 	bl	8000298 <__aeabi_dsub>
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	ec51 0b19 	vmov	r0, r1, d9
 80086ae:	f7f8 f8d5 	bl	800085c <__aeabi_ddiv>
 80086b2:	4632      	mov	r2, r6
 80086b4:	4604      	mov	r4, r0
 80086b6:	460d      	mov	r5, r1
 80086b8:	463b      	mov	r3, r7
 80086ba:	4640      	mov	r0, r8
 80086bc:	4649      	mov	r1, r9
 80086be:	f7f7 ffa3 	bl	8000608 <__aeabi_dmul>
 80086c2:	4632      	mov	r2, r6
 80086c4:	463b      	mov	r3, r7
 80086c6:	f7f7 fde9 	bl	800029c <__adddf3>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f7 fde1 	bl	8000298 <__aeabi_dsub>
 80086d6:	4642      	mov	r2, r8
 80086d8:	464b      	mov	r3, r9
 80086da:	f7f7 fddd 	bl	8000298 <__aeabi_dsub>
 80086de:	460b      	mov	r3, r1
 80086e0:	4602      	mov	r2, r0
 80086e2:	4939      	ldr	r1, [pc, #228]	; (80087c8 <__ieee754_pow+0xa40>)
 80086e4:	2000      	movs	r0, #0
 80086e6:	f7f7 fdd7 	bl	8000298 <__aeabi_dsub>
 80086ea:	ec41 0b10 	vmov	d0, r0, r1
 80086ee:	ee10 3a90 	vmov	r3, s1
 80086f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80086f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086fa:	da2b      	bge.n	8008754 <__ieee754_pow+0x9cc>
 80086fc:	4650      	mov	r0, sl
 80086fe:	f000 f877 	bl	80087f0 <scalbn>
 8008702:	ec51 0b10 	vmov	r0, r1, d0
 8008706:	ec53 2b18 	vmov	r2, r3, d8
 800870a:	f7ff bbee 	b.w	8007eea <__ieee754_pow+0x162>
 800870e:	4b2f      	ldr	r3, [pc, #188]	; (80087cc <__ieee754_pow+0xa44>)
 8008710:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008714:	429e      	cmp	r6, r3
 8008716:	f77f af0d 	ble.w	8008534 <__ieee754_pow+0x7ac>
 800871a:	4b2d      	ldr	r3, [pc, #180]	; (80087d0 <__ieee754_pow+0xa48>)
 800871c:	440b      	add	r3, r1
 800871e:	4303      	orrs	r3, r0
 8008720:	d009      	beq.n	8008736 <__ieee754_pow+0x9ae>
 8008722:	ec51 0b18 	vmov	r0, r1, d8
 8008726:	2200      	movs	r2, #0
 8008728:	2300      	movs	r3, #0
 800872a:	f7f8 f9df 	bl	8000aec <__aeabi_dcmplt>
 800872e:	3800      	subs	r0, #0
 8008730:	bf18      	it	ne
 8008732:	2001      	movne	r0, #1
 8008734:	e448      	b.n	8007fc8 <__ieee754_pow+0x240>
 8008736:	4622      	mov	r2, r4
 8008738:	462b      	mov	r3, r5
 800873a:	f7f7 fdad 	bl	8000298 <__aeabi_dsub>
 800873e:	4642      	mov	r2, r8
 8008740:	464b      	mov	r3, r9
 8008742:	f7f8 f9e7 	bl	8000b14 <__aeabi_dcmpge>
 8008746:	2800      	cmp	r0, #0
 8008748:	f43f aef4 	beq.w	8008534 <__ieee754_pow+0x7ac>
 800874c:	e7e9      	b.n	8008722 <__ieee754_pow+0x99a>
 800874e:	f04f 0a00 	mov.w	sl, #0
 8008752:	e71a      	b.n	800858a <__ieee754_pow+0x802>
 8008754:	ec51 0b10 	vmov	r0, r1, d0
 8008758:	4619      	mov	r1, r3
 800875a:	e7d4      	b.n	8008706 <__ieee754_pow+0x97e>
 800875c:	491a      	ldr	r1, [pc, #104]	; (80087c8 <__ieee754_pow+0xa40>)
 800875e:	2000      	movs	r0, #0
 8008760:	f7ff bb31 	b.w	8007dc6 <__ieee754_pow+0x3e>
 8008764:	2000      	movs	r0, #0
 8008766:	2100      	movs	r1, #0
 8008768:	f7ff bb2d 	b.w	8007dc6 <__ieee754_pow+0x3e>
 800876c:	4630      	mov	r0, r6
 800876e:	4639      	mov	r1, r7
 8008770:	f7ff bb29 	b.w	8007dc6 <__ieee754_pow+0x3e>
 8008774:	9204      	str	r2, [sp, #16]
 8008776:	f7ff bb7b 	b.w	8007e70 <__ieee754_pow+0xe8>
 800877a:	2300      	movs	r3, #0
 800877c:	f7ff bb65 	b.w	8007e4a <__ieee754_pow+0xc2>
 8008780:	00000000 	.word	0x00000000
 8008784:	3fe62e43 	.word	0x3fe62e43
 8008788:	fefa39ef 	.word	0xfefa39ef
 800878c:	3fe62e42 	.word	0x3fe62e42
 8008790:	0ca86c39 	.word	0x0ca86c39
 8008794:	be205c61 	.word	0xbe205c61
 8008798:	72bea4d0 	.word	0x72bea4d0
 800879c:	3e663769 	.word	0x3e663769
 80087a0:	c5d26bf1 	.word	0xc5d26bf1
 80087a4:	3ebbbd41 	.word	0x3ebbbd41
 80087a8:	af25de2c 	.word	0xaf25de2c
 80087ac:	3f11566a 	.word	0x3f11566a
 80087b0:	16bebd93 	.word	0x16bebd93
 80087b4:	3f66c16c 	.word	0x3f66c16c
 80087b8:	5555553e 	.word	0x5555553e
 80087bc:	3fc55555 	.word	0x3fc55555
 80087c0:	3fe00000 	.word	0x3fe00000
 80087c4:	fff00000 	.word	0xfff00000
 80087c8:	3ff00000 	.word	0x3ff00000
 80087cc:	4090cbff 	.word	0x4090cbff
 80087d0:	3f6f3400 	.word	0x3f6f3400
 80087d4:	652b82fe 	.word	0x652b82fe
 80087d8:	3c971547 	.word	0x3c971547

080087dc <fabs>:
 80087dc:	ec51 0b10 	vmov	r0, r1, d0
 80087e0:	ee10 2a10 	vmov	r2, s0
 80087e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087e8:	ec43 2b10 	vmov	d0, r2, r3
 80087ec:	4770      	bx	lr
	...

080087f0 <scalbn>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	ec55 4b10 	vmov	r4, r5, d0
 80087f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80087fa:	4606      	mov	r6, r0
 80087fc:	462b      	mov	r3, r5
 80087fe:	b999      	cbnz	r1, 8008828 <scalbn+0x38>
 8008800:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008804:	4323      	orrs	r3, r4
 8008806:	d03f      	beq.n	8008888 <scalbn+0x98>
 8008808:	4b35      	ldr	r3, [pc, #212]	; (80088e0 <scalbn+0xf0>)
 800880a:	4629      	mov	r1, r5
 800880c:	ee10 0a10 	vmov	r0, s0
 8008810:	2200      	movs	r2, #0
 8008812:	f7f7 fef9 	bl	8000608 <__aeabi_dmul>
 8008816:	4b33      	ldr	r3, [pc, #204]	; (80088e4 <scalbn+0xf4>)
 8008818:	429e      	cmp	r6, r3
 800881a:	4604      	mov	r4, r0
 800881c:	460d      	mov	r5, r1
 800881e:	da10      	bge.n	8008842 <scalbn+0x52>
 8008820:	a327      	add	r3, pc, #156	; (adr r3, 80088c0 <scalbn+0xd0>)
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	e01f      	b.n	8008868 <scalbn+0x78>
 8008828:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800882c:	4291      	cmp	r1, r2
 800882e:	d10c      	bne.n	800884a <scalbn+0x5a>
 8008830:	ee10 2a10 	vmov	r2, s0
 8008834:	4620      	mov	r0, r4
 8008836:	4629      	mov	r1, r5
 8008838:	f7f7 fd30 	bl	800029c <__adddf3>
 800883c:	4604      	mov	r4, r0
 800883e:	460d      	mov	r5, r1
 8008840:	e022      	b.n	8008888 <scalbn+0x98>
 8008842:	460b      	mov	r3, r1
 8008844:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008848:	3936      	subs	r1, #54	; 0x36
 800884a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800884e:	4296      	cmp	r6, r2
 8008850:	dd0d      	ble.n	800886e <scalbn+0x7e>
 8008852:	2d00      	cmp	r5, #0
 8008854:	a11c      	add	r1, pc, #112	; (adr r1, 80088c8 <scalbn+0xd8>)
 8008856:	e9d1 0100 	ldrd	r0, r1, [r1]
 800885a:	da02      	bge.n	8008862 <scalbn+0x72>
 800885c:	a11c      	add	r1, pc, #112	; (adr r1, 80088d0 <scalbn+0xe0>)
 800885e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008862:	a319      	add	r3, pc, #100	; (adr r3, 80088c8 <scalbn+0xd8>)
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	f7f7 fece 	bl	8000608 <__aeabi_dmul>
 800886c:	e7e6      	b.n	800883c <scalbn+0x4c>
 800886e:	1872      	adds	r2, r6, r1
 8008870:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008874:	428a      	cmp	r2, r1
 8008876:	dcec      	bgt.n	8008852 <scalbn+0x62>
 8008878:	2a00      	cmp	r2, #0
 800887a:	dd08      	ble.n	800888e <scalbn+0x9e>
 800887c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008880:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008884:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008888:	ec45 4b10 	vmov	d0, r4, r5
 800888c:	bd70      	pop	{r4, r5, r6, pc}
 800888e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008892:	da08      	bge.n	80088a6 <scalbn+0xb6>
 8008894:	2d00      	cmp	r5, #0
 8008896:	a10a      	add	r1, pc, #40	; (adr r1, 80088c0 <scalbn+0xd0>)
 8008898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800889c:	dac0      	bge.n	8008820 <scalbn+0x30>
 800889e:	a10e      	add	r1, pc, #56	; (adr r1, 80088d8 <scalbn+0xe8>)
 80088a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088a4:	e7bc      	b.n	8008820 <scalbn+0x30>
 80088a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80088aa:	3236      	adds	r2, #54	; 0x36
 80088ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80088b4:	4620      	mov	r0, r4
 80088b6:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <scalbn+0xf8>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	e7d5      	b.n	8008868 <scalbn+0x78>
 80088bc:	f3af 8000 	nop.w
 80088c0:	c2f8f359 	.word	0xc2f8f359
 80088c4:	01a56e1f 	.word	0x01a56e1f
 80088c8:	8800759c 	.word	0x8800759c
 80088cc:	7e37e43c 	.word	0x7e37e43c
 80088d0:	8800759c 	.word	0x8800759c
 80088d4:	fe37e43c 	.word	0xfe37e43c
 80088d8:	c2f8f359 	.word	0xc2f8f359
 80088dc:	81a56e1f 	.word	0x81a56e1f
 80088e0:	43500000 	.word	0x43500000
 80088e4:	ffff3cb0 	.word	0xffff3cb0
 80088e8:	3c900000 	.word	0x3c900000

080088ec <with_errno>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	4604      	mov	r4, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	4616      	mov	r6, r2
 80088f4:	f7fd f81c 	bl	8005930 <__errno>
 80088f8:	4629      	mov	r1, r5
 80088fa:	6006      	str	r6, [r0, #0]
 80088fc:	4620      	mov	r0, r4
 80088fe:	bd70      	pop	{r4, r5, r6, pc}

08008900 <xflow>:
 8008900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008902:	4614      	mov	r4, r2
 8008904:	461d      	mov	r5, r3
 8008906:	b108      	cbz	r0, 800890c <xflow+0xc>
 8008908:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800890c:	e9cd 2300 	strd	r2, r3, [sp]
 8008910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008914:	4620      	mov	r0, r4
 8008916:	4629      	mov	r1, r5
 8008918:	f7f7 fe76 	bl	8000608 <__aeabi_dmul>
 800891c:	2222      	movs	r2, #34	; 0x22
 800891e:	b003      	add	sp, #12
 8008920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008924:	f7ff bfe2 	b.w	80088ec <with_errno>

08008928 <__math_uflow>:
 8008928:	b508      	push	{r3, lr}
 800892a:	2200      	movs	r2, #0
 800892c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008930:	f7ff ffe6 	bl	8008900 <xflow>
 8008934:	ec41 0b10 	vmov	d0, r0, r1
 8008938:	bd08      	pop	{r3, pc}

0800893a <__math_oflow>:
 800893a:	b508      	push	{r3, lr}
 800893c:	2200      	movs	r2, #0
 800893e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008942:	f7ff ffdd 	bl	8008900 <xflow>
 8008946:	ec41 0b10 	vmov	d0, r0, r1
 800894a:	bd08      	pop	{r3, pc}

0800894c <_init>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr

08008958 <_fini>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr
